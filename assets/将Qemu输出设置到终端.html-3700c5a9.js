import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as p,b as n,d as a,e as t,a as s}from"./app-9978a549.js";const c="/assets/-serial_stdio-35033469.png",r="/assets/-nographic-2debcb2e.png",u="/assets/early-boot-messages-0f6d2ac7.png",d={},m={href:"https://fadeevab.com/how-to-setup-qemu-output-to-console-and-automate-using-shell-script/",target:"_blank",rel:"noopener noreferrer"},b=s(`<p>有时我们需要在没有桌面环境的系统上进行内核的开发及调试，但是<code>qemu</code>默认会弹出来一个窗口，这就有点尴尬了。今天我们来看看如何解决这个问题。</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><p>新建工作目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/projects/qemu_setup
$ <span class="token builtin class-name">cd</span> ~/projects/qemu_setup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>准备需要用到的文件：</p><ol><li>wheezy.qcow2 (i386)：可引导的 Debian &quot;Wheezy&quot; 映像，QEMU copy-on-write 格式。用户名/密码：&quot;root&quot;/&quot;root&quot;，&quot;user&quot;/&quot;user&quot;</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> https://people.debian.org/~aurel32/qemu/i386/debian_wheezy_i386_standard.qcow2 <span class="token parameter variable">-O</span> wheezy.qcow2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>wheezy.img (i386)：不可引导的 Debian &quot;Wheezy&quot; 映像（没有内核），使用自定义内核（-kernel vmlinuz）</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> https://storage.googleapis.com/syzkaller/wheezy.img
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),v={start:"3"},k=n("p",null,"vmlinuz (i386)：压缩过的可引导 Linux 内核。可选项：",-1),h={href:"https://fadeevab.com/build-android-kernel-and-run-on-qemu-minimal-step-by-step",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,[n("p",null,"从 Ubuntu 仓库下载（注意！端口转发将不可用）：")],-1),f=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> http://security.ubuntu.com/ubuntu/pool/main/l/linux-signed-azure/linux-image-4.15.0-1036-azure_4.15.0-1036.38~14.04.2_amd64.deb
$ ar x linux-image-4.15.0-1036-azure_4.15.0-1036.38~14.04.2_amd64.deb
$ <span class="token function">tar</span> xf data.tar.xz ./boot/vmlinuz-4.15.0-1036-azure
$ <span class="token function">cp</span> ./boot/vmlinuz-4.15.0-1036-azure ./vmlinuz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>你也可以使用你自己主机上的 Linux 内核（注意！端口转发和块设备可能会遇到问题）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">cp</span> /boot/vmlinuz-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),x=s(`<p>注意！Ubuntu&#39;s vmlinuz 不包含 QEMU emulated network card devices (NIC)的驱动。 Debian&#39;s vmlinuz 不包含从<code>/dev/sda</code>设备加载原始映像的预构建驱动。</p><p>这里我们选择从 Ubuntu 仓库下载的内核做说明。</p><p>此时我们拥有如下文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span> <span class="token parameter variable">-lh</span>
total <span class="token number">1</span>.3G
drwxrwxr-x <span class="token number">2</span> laoli laoli <span class="token number">4</span>.0K <span class="token number">8</span>月   <span class="token number">8</span> <span class="token number">22</span>:05 boot
-rw-r--r-- <span class="token number">1</span> laoli laoli <span class="token number">2</span>.3K <span class="token number">8</span>月   <span class="token number">8</span> <span class="token number">22</span>:05 control.tar.gz
-rw-r--r-- <span class="token number">1</span> laoli laoli <span class="token number">7</span>.4M <span class="token number">8</span>月   <span class="token number">8</span> <span class="token number">22</span>:05 data.tar.xz
-rw-r--r-- <span class="token number">1</span> laoli laoli    <span class="token number">4</span> <span class="token number">8</span>月   <span class="token number">8</span> <span class="token number">22</span>:05 debian-binary
-rw-rw-r-- <span class="token number">1</span> laoli laoli <span class="token number">7</span>.4M <span class="token number">12</span>月  <span class="token number">7</span>  <span class="token number">2018</span> linux-image-4.15.0-1036-azure_4.15.0-1036.38~14.04.2_amd64.deb
-rw------- <span class="token number">1</span> laoli laoli <span class="token number">7</span>.6M <span class="token number">8</span>月   <span class="token number">8</span> <span class="token number">22</span>:06 vmlinuz
-rw-rw-r-- <span class="token number">1</span> laoli laoli <span class="token number">1</span>.0G <span class="token number">8</span>月  <span class="token number">14</span>  <span class="token number">2017</span> wheezy.img
-rw-rw-r-- <span class="token number">1</span> laoli laoli 264M <span class="token number">8</span>月   <span class="token number">8</span> <span class="token number">22</span>:02 wheezy.qcow2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开始实验" tabindex="-1"><a class="header-anchor" href="#开始实验" aria-hidden="true">#</a> 开始实验</h2><h3 id="将输入-输出设置到宿主机终端" tabindex="-1"><a class="header-anchor" href="#将输入-输出设置到宿主机终端" aria-hidden="true">#</a> 将输入/输出设置到宿主机终端</h3><p><code>-serial stdio</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-x86_64 <span class="token parameter variable">-serial</span> stdio wheezy.qcow2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="-serial_stdio.png" tabindex="0" loading="lazy"><figcaption>-serial_stdio.png</figcaption></figure><p><code>-serial stdio</code>将虚拟机的串口重定向到宿主机终端的输入/输出。启动成功后你将看到一条欢迎信息。</p><p><code>-nographic</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-x86_64 <span class="token parameter variable">-nographic</span> wheezy.qcow2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="-nographic.png" tabindex="0" loading="lazy"><figcaption>-nographic.png</figcaption></figure><p><code>-nographic</code>所作的和<code>-serial stdio</code>一样，同时还会隐藏<code>Qemu</code>的图形化窗口。</p><p>注意：</p><ol><li>在宿主机的终端中你将不会看到内核启动的早期信息。为了获取这些信息，请继续往下看。</li><li>在非<code>GUI</code>模式下，如果要退出虚拟机，请在经过<code>qemu</code>重定向输入输出的终端中以<code>root</code>用户登录，密码也是<code>root</code>，输入<code>shutdown -h now</code>关机（需要等待一会儿）。</li></ol><h3 id="在宿主机终端中查看内核启动早期信息" tabindex="-1"><a class="header-anchor" href="#在宿主机终端中查看内核启动早期信息" aria-hidden="true">#</a> 在宿主机终端中查看内核启动早期信息</h3><p><code>console=ttyS0</code></p><p>如果想查看内核启动早期信息，你需要将<code>console=ttyS0</code>传递给 Linux kernel command line：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-x86_64 <span class="token parameter variable">-nographic</span> <span class="token parameter variable">-kernel</span> vmlinuz <span class="token parameter variable">-hda</span> wheezy.img <span class="token parameter variable">-append</span> <span class="token string">&quot;root=/dev/sda console=ttyS0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-x86_64 <span class="token parameter variable">-serial</span> stdio <span class="token parameter variable">-kernel</span> vmlinuz <span class="token parameter variable">-hda</span> wheezy.img <span class="token parameter variable">-append</span> <span class="token string">&quot;root=/dev/sda console=ttyS0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-x86_64 <span class="token parameter variable">-serial</span> stdio wheezy.qcow2
  <span class="token comment"># 1. Wait for a GRUB menu to show.</span>
  <span class="token comment"># 2. Press \`e\`.</span>
  <span class="token comment"># 3. Find the line starting with &quot;linux&quot;.</span>
  <span class="token comment"># 4. Add &quot;console=ttyS0&quot;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>qemu-system-x86_64 -serial stdio -kernel vmlinuz -hda wheezy.img -append &quot;root=/dev/sda console=ttyS0&quot;</code>：</p><figure><img src="`+u+`" alt="early-boot-messages.png" tabindex="0" loading="lazy"><figcaption>early-boot-messages.png</figcaption></figure><ul><li><p><code>-serial stdio</code> 或 <code>-nographic</code>将虚拟机的输入输出重定向到当前终端</p></li><li><p><code>-append &quot;root=/dev/sda console=ttyS0&quot;</code>：<code>console=ttyS0</code>强制 guest kernel 将输出发送到第一个 UART 串口 ttyS0，即通过<code>-serial stdio</code>选项重定向的宿主机终端；<code>root=/dev/sda</code>告诉内核从<code>/dev/sda</code>设备加载<code>wheezy.img</code></p></li></ul><p>其他选项：</p><ul><li><code>-kernel vmlinuz</code> 从 <code>vmlinuz</code>文件加载内核</li><li><code>-hda wheezy.img</code> 适配 <code>vmlinuz</code> 的原始映像（wheezy.qcow2 无法在块设备中识别）</li></ul><h3 id="通过命名管道-文件-进行输入输出" tabindex="-1"><a class="header-anchor" href="#通过命名管道-文件-进行输入输出" aria-hidden="true">#</a> 通过命名管道（文件）进行输入输出</h3><h4 id="创建命名管道" tabindex="-1"><a class="header-anchor" href="#创建命名管道" aria-hidden="true">#</a> 创建命名管道</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mkfifo</span> /tmp/guest.in /tmp/guest.out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="启动-qemu" tabindex="-1"><a class="header-anchor" href="#启动-qemu" aria-hidden="true">#</a> 启动 QEMU</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-x86_64 <span class="token parameter variable">-serial</span> pipe:/tmp/guest <span class="token parameter variable">-kernel</span> vmlinuz <span class="token parameter variable">-hda</span> wheezy.img <span class="token parameter variable">-append</span> <span class="token string">&quot;root=/dev/sda console=ttyS0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-serial pipe:/tmp/guest</code> 将输出重定向到<code>/tmp/guest.out</code>，输入重定向到<code>/tmp/guest.in</code></p><h4 id="从命名管道中获取输出" tabindex="-1"><a class="header-anchor" href="#从命名管道中获取输出" aria-hidden="true">#</a> 从命名管道中获取输出</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /tmp/guest.out
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> Linux version <span class="token number">4.15</span>.0-1036-azure <span class="token punctuation">(</span>buildd@lgw01-amd64-047<span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version <span class="token number">4.8</span>.4 <span class="token punctuation">(</span>Ubuntu <span class="token number">4.8</span>.4-2ubuntu1~14.04.4<span class="token punctuation">))</span> <span class="token comment">#38~14.04.2-Ubuntu SMP Fri Dec 7 04:07:34 UTC 2018 (Ubuntu 4.15.0-1036.38~14.04.2-azure 4.15.18)</span>
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> Command line: <span class="token assign-left variable">root</span><span class="token operator">=</span>/dev/sda <span class="token assign-left variable">console</span><span class="token operator">=</span>ttyS0
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> KERNEL supported cpus:
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span>   Intel GenuineIntel
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span>   AMD AuthenticAMD
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span>   Centaur CentaurHauls
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> x86/fpu: x87 FPU will use FXSAVE
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> e820: BIOS-provided physical RAM map:
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> BIOS-e820: <span class="token punctuation">[</span>mem 0x0000000000000000-0x000000000009fbff<span class="token punctuation">]</span> usable
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> BIOS-e820: <span class="token punctuation">[</span>mem 0x000000000009fc00-0x000000000009ffff<span class="token punctuation">]</span> reserved
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> BIOS-e820: <span class="token punctuation">[</span>mem 0x00000000000f0000-0x00000000000fffff<span class="token punctuation">]</span> reserved
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> BIOS-e820: <span class="token punctuation">[</span>mem 0x0000000000100000-0x0000000007fdffff<span class="token punctuation">]</span> usable
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> BIOS-e820: <span class="token punctuation">[</span>mem 0x0000000007fe0000-0x0000000007ffffff<span class="token punctuation">]</span> reserved
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> BIOS-e820: <span class="token punctuation">[</span>mem 0x00000000fffc0000-0x00000000ffffffff<span class="token punctuation">]</span> reserved
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span> ok <span class="token punctuation">]</span> Starting periodic <span class="token builtin class-name">command</span> scheduler: cron.
<span class="token punctuation">[</span> ok <span class="token punctuation">]</span> Starting OpenBSD Secure Shell server: sshd.

Debian GNU/Linux <span class="token number">7</span> syzkaller ttyS0

syzkaller login:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过命名管道发送信息" tabindex="-1"><a class="header-anchor" href="#通过命名管道发送信息" aria-hidden="true">#</a> 通过命名管道发送信息</h4><p>当出现登录界面时，发送登录信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">printf</span> <span class="token string">&quot;root<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token operator">&gt;</span> /tmp/guest.in
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（完）</p>`,41);function _(y,q){const e=l("ExternalLinkIcon");return o(),p("div",null,[n("p",null,[a("原文："),n("a",m,[a("How to Setup QEMU Output to Console and Automate Using Shell Script"),t(e)])]),b,n("ol",v,[n("li",null,[k,n("ul",null,[n("li",null,[n("p",null,[a("自己构建："),n("a",h,[a("Build Android Kernel and Run on QEMU with Minimal Environment: Step by Step"),t(e)])])]),g]),f])]),x])}const S=i(d,[["render",_],["__file","将Qemu输出设置到终端.html.vue"]]);export{S as default};
