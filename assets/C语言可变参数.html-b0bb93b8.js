import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as s,d as n,e as p,a as e}from"./app-819cf889.js";const i={},u=e(`<p>不懂原理的话一切都是玄学问题。今天，老李带你打破玄学，走近科学。</p><h2 id="实验环境" tabindex="-1"><a class="header-anchor" href="#实验环境" aria-hidden="true">#</a> 实验环境</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>
Linux lowb <span class="token number">5.11</span>.0-27-generic <span class="token comment">#29~20.04.1-Ubuntu SMP Wed Aug 11 15:58:17 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span>

$ lsb_release <span class="token parameter variable">-a</span>
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu <span class="token number">20.04</span>.3 LTS
Release:        <span class="token number">20.04</span>
Codename:       focal

$ cc <span class="token parameter variable">--version</span>
cc <span class="token punctuation">(</span>Ubuntu <span class="token number">9.3</span>.0-17ubuntu1~20.04<span class="token punctuation">)</span> <span class="token number">9.3</span>.0
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2019</span> Free Software Foundation, Inc.
This is <span class="token function">free</span> software<span class="token punctuation">;</span> see the <span class="token builtin class-name">source</span> <span class="token keyword">for</span> copying conditions.  There is NO
warranty<span class="token punctuation">;</span> not even <span class="token keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在研究可变参数之前有一个必须要搞清楚的东西 -- 函数调用约定。没有约定，那可变参数的实现也就无从谈起。</p><h2 id="函数调用约定" tabindex="-1"><a class="header-anchor" href="#函数调用约定" aria-hidden="true">#</a> 函数调用约定</h2><p>函数调用约定是函数调用者和被调函数之间关于参数传递、返回值传递、堆栈清除、寄存器使用的一种约定。</p><p>常见的调用约定：</p><ul><li><p>stdcall</p></li><li><p>cdecl</p></li><li><p>fastcall</p></li><li><p>thiscall</p></li><li><p>naked call</p></li></ul><p>这里主要讲解一下<code>stdcall</code>和<code>cdecl</code>。</p><h3 id="stdcall-调用约定" tabindex="-1"><a class="header-anchor" href="#stdcall-调用约定" aria-hidden="true">#</a> stdcall 调用约定</h3><ol><li>参数从右向左压入堆栈</li><li>函数自身清理堆栈</li></ol><p>举个例子，创建文件<code>main1_stdcall.c</code>，内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stdcall<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">sum_stdcall</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1+2+3=%d(stdcall)\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum_stdcall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过<code>__attribute__((stdcall))</code>指定函数<code>sum_stdcall</code>使用<code>stdcall</code>调用约定。如果不指定，则默认为<code>cdecl</code>。</p><p>编译：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span>    main1_stdcall.c   <span class="token parameter variable">-o</span> main1_stdcall
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>记得要加<code>-m32</code>参数，生成<code>32</code>位代码。因为<code>64</code>位参数传递的方式与<code>32</code>位不同，我们这里以<code>32</code>位为例。</p><p>查看汇编代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ objdump <span class="token parameter variable">-d</span> <span class="token parameter variable">-Msuffix</span> main1_stdcall

main1_stdcall:     <span class="token function">file</span> <span class="token function">format</span> elf32-i386

<span class="token punctuation">..</span>.

000011cd <span class="token operator">&lt;</span>sum_stdcall<span class="token operator">&gt;</span>:
    11cd:       f3 0f 1e fb             endbr32
    11d1:       <span class="token number">55</span>                      pushl  %ebp
    11d2:       <span class="token number">89</span> e5                   movl   %esp,%ebp
    11d4:       e8 <span class="token number">61</span> 00 00 00          calll  123a <span class="token operator">&lt;</span>__x86.get_pc_thunk.ax<span class="token operator">&gt;</span>
    11d9:       05 ff 2d 00 00          addl   <span class="token variable">$0x2dff</span>,%eax
    11de:       8b <span class="token number">55</span> 08                movl   0x8<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>,%edx
    11e1:       8b <span class="token number">45</span> 0c                movl   0xc<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>,%eax
    11e4:       01 c2                   addl   %eax,%edx
    11e6:       8b <span class="token number">45</span> <span class="token number">10</span>                movl   0x10<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>,%eax
    11e9:       01 d0                   addl   %edx,%eax
    11eb:       5d                      popl   %ebp
    11ec:       c2 0c 00                retl   <span class="token variable">$0xc</span>

000011ef <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span>:
<span class="token punctuation">..</span>.
    120d:       6a 03                   pushl  <span class="token variable">$0x3</span>
    120f:       6a 02                   pushl  <span class="token variable">$0x2</span>
    <span class="token number">1211</span>:       6a 01                   pushl  <span class="token variable">$0x1</span>
    <span class="token number">1213</span>:       e8 b5 ff ff ff          calll  11cd <span class="token operator">&lt;</span>sum_stdcall<span class="token operator">&gt;</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>省略了无关代码，只保留和函数调用相关的。</p><p>可以看到在<code>main</code>函数调用<code>sum_stdcall</code>之前，按照从右至左的顺序依次将参数压栈。而在<code>sum_stdcall</code>函数的最后一行，通过<code>retl $0xc</code>在被调函数中将栈指针 esp 向上移动<code>0xc</code>，即<code>12</code>个字节以清理堆栈。<code>int</code>占用<code>4</code>个字节，<code>12</code>正好是<code>3</code>个<code>int</code>型参数。</p><h3 id="cdecl-调用约定" tabindex="-1"><a class="header-anchor" href="#cdecl-调用约定" aria-hidden="true">#</a> cdecl 调用约定</h3><ol><li>参数从右向左压入堆栈</li><li>调用者负责清理堆栈</li><li>C 调用约定允许函数的参数个数是不固定的</li></ol><p>举个例子，创建文件<code>main1.c</code>，内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1+2+3=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span>    main1.c   <span class="token parameter variable">-o</span> main1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看汇编代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ objdump <span class="token parameter variable">-d</span> <span class="token parameter variable">-Msuffix</span> main1

main1:     <span class="token function">file</span> <span class="token function">format</span> elf32-i386

<span class="token punctuation">..</span>.

000011cd <span class="token operator">&lt;</span>sum<span class="token operator">&gt;</span>:
    11cd:       f3 0f 1e fb             endbr32
    11d1:       <span class="token number">55</span>                      pushl  %ebp
    11d2:       <span class="token number">89</span> e5                   movl   %esp,%ebp
    11d4:       e8 <span class="token number">62</span> 00 00 00          calll  123b <span class="token operator">&lt;</span>__x86.get_pc_thunk.ax<span class="token operator">&gt;</span>
    11d9:       05 ff 2d 00 00          addl   <span class="token variable">$0x2dff</span>,%eax
    11de:       8b <span class="token number">55</span> 08                movl   0x8<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>,%edx
    11e1:       8b <span class="token number">45</span> 0c                movl   0xc<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>,%eax
    11e4:       01 c2                   addl   %eax,%edx
    11e6:       8b <span class="token number">45</span> <span class="token number">10</span>                movl   0x10<span class="token punctuation">(</span>%ebp<span class="token punctuation">)</span>,%eax
    11e9:       01 d0                   addl   %edx,%eax
    11eb:       5d                      popl   %ebp
    11ec:       c3                      retl

000011ed <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span>:
<span class="token punctuation">..</span>.
    120b:       6a 03                   pushl  <span class="token variable">$0x3</span>
    120d:       6a 02                   pushl  <span class="token variable">$0x2</span>
    120f:       6a 01                   pushl  <span class="token variable">$0x1</span>
    <span class="token number">1211</span>:       e8 b7 ff ff ff          calll  11cd <span class="token operator">&lt;</span>sum<span class="token operator">&gt;</span>
    <span class="token number">1216</span>:       <span class="token number">83</span> c4 0c                addl   <span class="token variable">$0xc</span>,%esp
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，在<code>main</code>函数调用<code>sum</code>之前按照从右至左的顺序依次将参数压栈。注意在<code>sum</code>函数中<code>ret</code>指令并没有参数。栈的清理工作在<code>sum</code>函数调用返回之后，由<code>main</code>函数清理。通过<code>add</code>指令将栈指针 esp 向上移动<code>0xc</code>字节。</p><p>在了解了函数调用约定之后我们再来探究可变参数的实现。</p><h2 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数" aria-hidden="true">#</a> 可变参数</h2><p>我们先稍稍修改一下之前的例子，打印出每个参数的地址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d, xp = %p\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;y = %d, yp = %p\\n&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;z = %d, zp = %p\\n&quot;</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1+2+3=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span>    main2.c   <span class="token parameter variable">-o</span> main2
$ ./main2
x <span class="token operator">=</span> <span class="token number">1</span>, xp <span class="token operator">=</span> 0xff8e84c0
y <span class="token operator">=</span> <span class="token number">2</span>, yp <span class="token operator">=</span> 0xff8e84c4
z <span class="token operator">=</span> <span class="token number">3</span>, zp <span class="token operator">=</span> 0xff8e84c8
<span class="token number">1</span>+2+3<span class="token operator">=</span><span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察每个参数的地址，都是连续的，每个参数占<code>4</code>个字节。在上一节，我们知道了参数是由右至左依次压栈的，所以这里就很好理解了。</p><p>现在我们知道第一个参数，即<code>x</code>的地址，同时知道参数是连续的，还知道<code>int</code>型参数占<code>4</code>个字节。那我们就可以根据第一个参数的地址计算出其余参数的地址，知道了地址我们就可以取地址对应的值，继续改造我们的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>bp <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d, xp = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>bp<span class="token punctuation">,</span> bp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;y = %d, yp = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>bp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;z = %d, zp = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>bp <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bp <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1+2+3=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span>    main3.c   <span class="token parameter variable">-o</span> main3
$ ./main3
x <span class="token operator">=</span> <span class="token number">1</span>, xp <span class="token operator">=</span> 0xffed15c0
y <span class="token operator">=</span> <span class="token number">2</span>, yp <span class="token operator">=</span> 0xffed15c4
z <span class="token operator">=</span> <span class="token number">3</span>, zp <span class="token operator">=</span> 0xffed15c8
<span class="token number">1</span>+2+3<span class="token operator">=</span><span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们没有直接对<code>y</code>和<code>z</code>进行操作，依然得到了同样的结果。</p><p>有了这些基础知识，现在我们过渡到可变参数，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>bp <span class="token operator">=</span> <span class="token operator">&amp;</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;arg%d = %d, argp%d = %p\\n&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>bp <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> bp <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span> <span class="token operator">*</span><span class="token punctuation">(</span>bp <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1+2+3=%d\\n\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;3+4+5=%d\\n\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1+2+3+4=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C 语言可变参数函数规定：</p><ul><li>必须至少有一个固定参数</li><li>可选参数用<code>...</code>表示，且只能出现在参数列表的最后</li></ul><p>于是我们的代码中有一个固定参数<code>int n</code>，用来表示可选参数的数量。</p><p>第<code>4</code>行，我们取固定参数<code>n</code>的地址，<code>+ 1</code>取到第一个可选参数的地址作为后续操作的基地址。</p><p><code>for</code>循环中根据基地址依次计算出每个可选参数的地址进行相关操作。</p><p>查看运行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span>    main4.c   <span class="token parameter variable">-o</span> main4
$ ./main4
arg1 <span class="token operator">=</span> <span class="token number">1</span>, argp1 <span class="token operator">=</span> 0xffebc9f4
arg2 <span class="token operator">=</span> <span class="token number">2</span>, argp2 <span class="token operator">=</span> 0xffebc9f8
arg3 <span class="token operator">=</span> <span class="token number">3</span>, argp3 <span class="token operator">=</span> 0xffebc9fc
<span class="token number">1</span>+2+3<span class="token operator">=</span><span class="token number">6</span>

arg1 <span class="token operator">=</span> <span class="token number">3</span>, argp1 <span class="token operator">=</span> 0xffebc9f4
arg2 <span class="token operator">=</span> <span class="token number">4</span>, argp2 <span class="token operator">=</span> 0xffebc9f8
arg3 <span class="token operator">=</span> <span class="token number">5</span>, argp3 <span class="token operator">=</span> 0xffebc9fc
<span class="token number">3</span>+4+5<span class="token operator">=</span><span class="token number">12</span>

arg1 <span class="token operator">=</span> <span class="token number">1</span>, argp1 <span class="token operator">=</span> 0xffebc9e4
arg2 <span class="token operator">=</span> <span class="token number">2</span>, argp2 <span class="token operator">=</span> 0xffebc9e8
arg3 <span class="token operator">=</span> <span class="token number">3</span>, argp3 <span class="token operator">=</span> 0xffebc9ec
arg4 <span class="token operator">=</span> <span class="token number">4</span>, argp4 <span class="token operator">=</span> 0xffebc9f0
<span class="token number">1</span>+2+3+4<span class="token operator">=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),r={href:"https://github.com/mit-pdos/xv6-public/blob/master/console.c#L55",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">uint32_t</span> <span class="token operator">*</span>argp<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>
  <span class="token keyword">int</span> c<span class="token punctuation">;</span>

  argp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> fmt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">consputc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    c <span class="token operator">=</span> fmt<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token char">&#39;d&#39;</span><span class="token operator">:</span>
        <span class="token function">printint</span><span class="token punctuation">(</span><span class="token operator">*</span>argp<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token char">&#39;x&#39;</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token char">&#39;p&#39;</span><span class="token operator">:</span>
        <span class="token function">printint</span><span class="token punctuation">(</span><span class="token operator">*</span>argp<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token char">&#39;s&#39;</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>argp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token string">&quot;(null)&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">consputc</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token char">&#39;%&#39;</span><span class="token operator">:</span>
        <span class="token function">consputc</span><span class="token punctuation">(</span><span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">consputc</span><span class="token punctuation">(</span><span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">consputc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>sum</code>函数中，我们通过第一个参数告知函数本次调用共有多少个可选参数。当然也可以通过别的方式告知可选参数个数，例如<code>printf</code>函数和这里的<code>cprintf</code>中第一个参数<code>fmt</code>中的占位符。有多少个占位符就有多少个可选参数。我们在函数体中依次解析每一个字符，遇到占位符时，根据不同的类型对可选参数进行不同的操作。</p><p>我讲完了，但是好像没有完全讲完。</p><p>如果你之前搜索过 C 语言可变参数相关的资料，一定见过这些东西：</p><ul><li><code>stdarg.h</code></li><li><code>va_list</code></li><li><code>va_start</code></li><li><code>va_arg</code></li><li><code>va_end</code></li></ul><p>下面我们来说说这些东西。</p><h2 id="stdarg-h" tabindex="-1"><a class="header-anchor" href="#stdarg-h" aria-hidden="true">#</a> stdarg.h</h2><p>其实在上面我们已经实现并使用了可变参数，<code>stdarg.h</code>只是给我们提供了一种更简便的方法使用可变参数。主要通过<code>va_start</code>、<code>va_arg</code>，<code>va_end</code>这三个宏和<code>va_list</code>类型来完成工作。</p><p>同样的代码，我们使用<code>stdarg</code>重新实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  va_list valist<span class="token punctuation">;</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> cur<span class="token punctuation">;</span>

  <span class="token function">va_start</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cur <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;arg%d = %d\\n&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span> cur<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">va_end</span><span class="token punctuation">(</span>valist<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1+2+3=%d\\n\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;3+4+5=%d\\n\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1+2+3+4=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码结构是一样的，只不过现在我们声明了一个<code>va_list</code>类型的变量来表示参数指针，等价于之前的<code>bp</code>指针。接着使用<code>va_start</code>初始化<code>va_list</code>，然后使用<code>va_arg</code>依次访问每一个可选参数，最后通过<code>va_end</code>释放<code>va_list</code>。</p><p>编译运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span>    main5.c   <span class="token parameter variable">-o</span> main5
$ ./main5
arg1 <span class="token operator">=</span> <span class="token number">1</span>
arg2 <span class="token operator">=</span> <span class="token number">2</span>
arg3 <span class="token operator">=</span> <span class="token number">3</span>
<span class="token number">1</span>+2+3<span class="token operator">=</span><span class="token number">6</span>

arg1 <span class="token operator">=</span> <span class="token number">3</span>
arg2 <span class="token operator">=</span> <span class="token number">4</span>
arg3 <span class="token operator">=</span> <span class="token number">5</span>
<span class="token number">3</span>+4+5<span class="token operator">=</span><span class="token number">12</span>

arg1 <span class="token operator">=</span> <span class="token number">1</span>
arg2 <span class="token operator">=</span> <span class="token number">2</span>
arg3 <span class="token operator">=</span> <span class="token number">3</span>
arg4 <span class="token operator">=</span> <span class="token number">4</span>
<span class="token number">1</span>+2+3+4<span class="token operator">=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些宏及类型的一种实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">char</span><span class="token operator">*</span> va_list<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_INTSIZEOF</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">va_start</span><span class="token expression"><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">(</span>ap <span class="token operator">=</span> <span class="token punctuation">(</span>va_list<span class="token punctuation">)</span><span class="token operator">&amp;</span>v <span class="token operator">+</span> <span class="token function">_INTSIZEOF</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">va_arg</span><span class="token expression"><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ap <span class="token operator">+=</span> <span class="token function">_INTSIZEOF</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">_INTSIZEOF</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">va_end</span><span class="token expression"><span class="token punctuation">(</span>ap<span class="token punctuation">)</span> <span class="token punctuation">(</span>ap <span class="token operator">=</span> <span class="token punctuation">(</span>va_list<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，现代的编译器大概都会把这些实现为内置函数，在我的计算机上如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> __builtin_va_list va_list<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">va_start</span><span class="token expression"><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> param<span class="token punctuation">)</span> <span class="token function">__builtin_va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> param<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">va_end</span><span class="token expression"><span class="token punctuation">(</span>ap<span class="token punctuation">)</span>          <span class="token function">__builtin_va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">va_arg</span><span class="token expression"><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> type<span class="token punctuation">)</span>    <span class="token function">__builtin_va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> type<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我大概真的讲完了。</p><p>最后，在送给大家一段代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">va_demo</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>types<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  va_list valist<span class="token punctuation">;</span>
  <span class="token function">va_start</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> types<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;char&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;char*&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s &quot;</span><span class="token punctuation">,</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">va_end</span><span class="token punctuation">(</span>valist<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>types<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;char&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;char*&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">va_demo</span><span class="token punctuation">(</span>types<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;laoli!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-m32</span>    main6.c   <span class="token parameter variable">-o</span> main6
$ ./main6
<span class="token number">5</span> c laoli<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前我们说过，告知函数可选参数个数的方式不止一种。这里我们没有直接告诉函数有多少个可选参数，而是把<code>NULL</code>作为结束条件蕴含在第一个参数<code>types</code>中。 这里我想告诉大家一个字 -- <code>约定</code>。细细体会，计算机中，无处不约定。</p>`,23),d={href:"https://github.com/kviccn/c-variable-arguments",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"（完）",-1);function m(b,f){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("再来看一个稍微复杂一点的例子，该函数来自 "),s("a",r,[n("xv6"),p(a)]),n("：")]),k,s("p",null,[n("完整代码戳"),s("a",d,[n("这里"),p(a)]),n("。")]),v])}const y=t(i,[["render",m],["__file","C语言可变参数.html.vue"]]);export{y as default};
