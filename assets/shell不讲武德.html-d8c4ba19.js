import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as e,d as s,e as a,a as d}from"./app-a3b1dd03.js";const r="/assets/sheep-shell-problem-788b4aec.png",t={},p=e("p",null,[s("今日惊闻 🐏🐻 被"),e("code",null,"shell"),s("欺负了！")],-1),u=e("p",null,[s("下午 🐏🐻 在群里发了一段"),e("code",null,"shell"),s("，如下：")],-1),h=e("figure",null,[e("img",{src:r,alt:"sheep shell problem",tabindex:"0",loading:"lazy"}),e("figcaption",null,"sheep shell problem")],-1),m=e("p",null,"🐏🐻 被欺负之处如三条红线所划，俺梳理了一番，此三处分为两大招，三小式：",-1),v={href:"https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-Conditional-Expressions",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"$i -lt $N",-1),k={href:"https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Shell-Expansions",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Shell-Parameter-Expansion",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"N=${1:-3}",-1),x={href:"https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Arithmetic-Expansion",target:"_blank",rel:"noopener noreferrer"},$=e("code",null,"i=$(($i + 1))",-1),f=d(`<p>首先，🐏🐻 你要知道在<code>shell</code>中使用变量的方式是在变量前加一个<code>$</code>符，然后我们分析一下这三个问题。</p><p>第一个问题就是简单的条件判断。<code>lt</code>就是<code>less than</code>的缩写，<code>shell</code>中诸如此类的操作符还有<code>-eq -ne -le -gt -ge</code>，相信聪明的 🐏🐻 一定知道是什么意思。</p><p>第二个是给变量赋默认值的问题。表达式形式是这样的<code>\${parameter:-word}</code>，如果<code>parameter</code>有值的话则表达式的值为<code>parameter</code>，否则表达式的值为<code>word</code>，即默认值为<code>word</code>。</p><p>这里还有个小知识点，<code>shell</code>的参数。执行<code>shell</code>时可以向脚本传递参数，脚本内获取参数的格式为：<code>$n</code>。<code>n</code>代表一个数字，<code>1</code>为执行脚本的第一个参数，<code>2</code>为执行脚本的第二个参数，以此类推……</p><p><code>N=\${1:-3}</code>中的<code>1</code>即代表<code>shell</code>的第一个参数。所以这条语句是什么意思，🐏🐻 你懂了没？</p><p>第三个问题其实就是想做个<code>i = i + 1</code>的操作，但是原生<code>bash</code>不支持简单的数学运算，所以要曲线救国。🐏🐻 发的这段<code>shell</code>中采用了<code>Arithmetic Expansion</code>，形如<code>$(( expression ))</code>。对应<code>$(($i + 1))</code>就是取变量<code>i</code>的值加一在取表达式整体的值。🐏🐻 你懂了没？</p><p>即然是曲线救国，那肯定不只有一条。🐏🐻，俺在多告诉你几条。</p><ol><li><p><code>let</code>，该命令用于执行一个或多个表达式，变量计算中不需要加上<code>$</code>来表示变量。如果表达式中包含了空格或其他特殊字符，则必须引起来，如<code>let i++</code>。</p></li><li><p><code>expr</code>，该命令也用于执行表达式。不同之处在于<code>expr</code>命令要和待求值的表达式一起被反引号<code>\`</code>包起来，如<code>\`expr $i + 1\`</code>。</p></li></ol><p>🐏🐻，俺还给你写了个小 demo，你拿去康康：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">message</span><span class="token operator">=</span><span class="token string">&quot;🐏🐻枣🦆&quot;</span>

<span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token variable">\${1<span class="token operator">:-</span>3}</span>

<span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token parameter variable">-lt</span> <span class="token variable">$N</span> <span class="token punctuation">]</span>
<span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token variable">$message</span>
  <span class="token comment"># let i++</span>
  <span class="token comment"># i=\`expr $i + 1\`</span>
  <span class="token comment"># i=$(($i + 1))</span>
  <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下：</p><ol><li>不给参数，给<code>N</code>赋默认值<code>3</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./demo.sh
🐏🐻枣🦆
🐏🐻枣🦆
🐏🐻枣🦆
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>给个参数<code>1</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./demo.sh <span class="token number">1</span>
🐏🐻枣🦆
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>给个参数<code>5</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./demo.sh <span class="token number">5</span>
🐏🐻枣🦆
🐏🐻枣🦆
🐏🐻枣🦆
🐏🐻枣🦆
🐏🐻枣🦆
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🐏🐻，你学废了吗？</p>`,18);function w(E,N){const n=o("ExternalLinkIcon");return c(),i("div",null,[p,u,h,m,e("ol",null,[e("li",null,[e("a",v,[s("Bash Conditional Expressions"),a(n)]),b]),e("li",null,[e("a",k,[s("Shell Expansions"),a(n)]),e("ul",null,[e("li",null,[e("a",_,[s("Shell Parameter Expansion"),a(n)]),g]),e("li",null,[e("a",x,[s("Arithmetic Expansion"),a(n)]),$])])])]),f])}const y=l(t,[["render",w],["__file","shell不讲武德.html.vue"]]);export{y as default};
