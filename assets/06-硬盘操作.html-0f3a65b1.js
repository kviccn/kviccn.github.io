import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as i,b as e,d as n,e as t,w as l,a}from"./app-0c3433bd.js";const p="/assets/disk_char_A-63a9c146.png",u={},r=a('<p>今天我们来学习如何从硬盘读取数据。主要从编程的角度来学习关于硬盘的知识，即学习如何通过端口控制硬盘。</p><h2 id="硬盘" tabindex="-1"><a class="header-anchor" href="#硬盘" aria-hidden="true">#</a> 硬盘</h2><p>从存储数据的介质上区分，硬盘可以分为<strong>机械硬盘</strong>和<strong>固态硬盘</strong>，机械硬盘采用磁性碟片来存储数据，固态硬盘通过闪存颗粒存储数据。从编程的角度看，固态硬盘是兼容机械硬盘的，所以我们以机械硬盘为例，简要介绍一下硬盘。</p><h3 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h3><p>机械硬盘主要由磁盘盘片、磁头、主轴与传动轴等组成，数据存放在磁盘盘片中。每个盘片分为上下两面，每面由一个磁头<code>(Head)</code>进行读写。磁头统一固定在同一个支架上，由步进电动机控制，同时在盘片的中心和边缘之间来回移动。当盘片高速旋转时，磁头每步进一次，都会从它所在的位置开始，绕着圆心“画”出一个看不见的圆圈，这就是磁道<code>(Track)</code>。磁道是数据记录的轨迹。因为所有磁头都是联动的，故每个盘面上的同一条磁道又可以形成一个虚拟的圆柱，称为柱面<code>(Cylinder)</code>。</p><p>每条磁道划分为若干扇区<code>(Sector)</code>，扇区是硬盘读写数据的最小单位。每个扇区以扇区头开始，然后是<code>512</code>字节的数据区。扇区头包含了每个扇区自己的信息，主要有本扇区的磁道号、磁头号和扇区号。</p><h3 id="访问模式" tabindex="-1"><a class="header-anchor" href="#访问模式" aria-hidden="true">#</a> 访问模式</h3><p>硬盘读取数据的模式有两种：</p><ol><li><code>CHS</code>模式，即向硬盘控制器分别发送磁头号、柱面号和扇区号来访问。</li><li><code>LBA</code>模式，通过对所有扇区统一编址，形成逻辑扇区，访问时提供逻辑扇区号即可。使用<code>LBA</code>模式不需要考虑扇区的物理位置，对于编程来说比较友好，下面我们来介绍<code>LBA</code>模式。</li></ol><p><code>LBA</code>模式又分为<code>LBA28</code>和<code>LBA48</code>两种。<code>LBA28</code>使用<code>28</code>个<code>bit</code>表示逻辑扇区号，每个扇区<code>512B</code>，总共可管理<code>128GB</code>的硬盘；<code>LBA48</code>使用<code>48</code>个<code>bit</code>表示逻辑扇区号，可管理<code>131072TB</code>的硬盘容量。。</p>',10),v=e("code",null,"I/O",-1),b=e("code",null,"0x1f0~0x1f7",-1),m=e("code",null,"0x170~0x177",-1),k=e("code",null,"LBA28",-1),x=a(`<ul><li><code>0x1f0</code>，<code>16</code>位数据端口，用于读取或写入数据，每次读写<code>1</code>个字，循环直到读完所有数据。</li><li><code>0x1f1</code>，读取时的错误信息或写入时的额外参数。</li><li><code>0x1f2</code>，指定读取或写入的扇区数。</li><li><code>0x1f3</code>，<code>LBA</code>地址低<code>8</code>位。</li><li><code>0x1f4</code>，<code>LBA</code>地址中<code>8</code>位。</li><li><code>0x1f5</code>，<code>LBA</code>地址高<code>8</code>位。</li><li><code>0x1f6</code>，低<code>4</code>位保存<code>LBA</code>地址的前<code>4</code>位，高<code>4</code>位指定访问模式和访问的设备。其中第<code>4</code>位指示硬盘号，<code>0</code>表示主盘，<code>1</code>表示从盘；第<code>6</code>位指定访问模式，<code>0</code>表示<code>CHS 模式</code>，<code>1</code>表示<code>LBA 模式</code>。第<code>5、7</code>位为<code>1</code>。</li><li><code>0x1f7</code>，既是命令端口，又是状态端口。作为命令端口时，写入<code>0x20</code>表示请求读硬盘；写入<code>0x30</code>表示请求写硬盘。作为状态端口时，第<code>0</code>位为<code>1</code>表示前一个命令执行错误，具体原因可访问端口<code>0x1f1</code>；第<code>3</code>位为<code>1</code>表示硬盘已经准备好和主机进行数据交互；第<code>7</code>位为<code>1</code>表示硬盘忙。</li></ul><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><p>有了上面的知识我们就可以开始编码从硬盘读取数据了。我们打算创建一个<code>1KB</code>大小的虚拟硬盘，即<code>1024</code>字节大小。虚拟硬盘的大小其实并不影响我们的学习，能说明问题就可以了，小一点，理解起来可能会更容易。<code>1024</code>字节刚好可以分成两个逻辑扇区，逻辑扇区<code>0</code>和逻辑扇区<code>1</code>。逻辑扇区<code>0</code>作为主引导记录会被<code>BIOS</code>自动加载到内存，我们的目标就是将逻辑扇区<code>1</code>读入内存<code>0x10000</code>处。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>.code16

movw $0x1000, %ax
movw %ax, %es

xorw %di, %di

movw $0x1f2, %dx
movb $1, %al
outb %al, %dx

movw $0x1f3, %dx
movb $1, %al
outb %al, %dx

movw $0x1f4, %dx
movb $0, %al
outb %al, %dx

movw $0x1f5, %dx
movb $0, %al
outb %al, %dx

movw $0x1f6, %dx
movb $0, %al
orb  $0xe0, %al     # b&#39;1110xxxx&#39; LBA 主硬盘
outb %al, %dx

movw $0x1f7, %dx
movb $0x20, %al     # 读硬盘
outb %al, %dx

.wait:              # 等待硬盘不忙且准备好数据
  inb %dx, %al
  andb $0x88, %al
  cmpb $0x08, %al
  jnz .wait

movw $256, %cx
movw $0x1f0, %dx
rep insw

movw $0xb800, %ax
movw %ax, %ds

movw %es:0, %ax
movw %ax, 0

jmp .

.org 510
.word 0xAA55
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h3><p>第<code>3、4、6</code>行用于设置<code>es:di</code>，将<code>es</code>设置为<code>0x1000</code>，<code>di</code>设置为<code>0</code>。指向物理地址的<code>0x10000</code>处，我们的数据将加载到这里。配合第<code>41</code>行的<code>insw</code>指令。</p><p>第<code>8~10</code>行向端口<code>0x1f2</code>写入<code>1</code>，表示要读取<code>1</code>个扇区。</p><p>第<code>12~14</code>行向端口<code>0x1f3</code>写入<code>1</code>，这是<code>28</code>位逻辑扇区号的<code>0~7</code>位。</p><p>第<code>16~18、20~22</code>行分别向端口<code>0x1f4</code>和<code>0x1f5</code>写入逻辑扇区号的中间<code>8~15</code>位和<code>16~23</code>位。</p><p>第<code>24~27</code>行向端口<code>0x1f6</code>写入<code>0xe0</code>，即二进制<code>1110 0000</code>。其中低<code>4</code>位是<code>LBA</code>编号的前<code>4</code>位，高<code>4</code>位<code>1110</code>表示以<code>LBA 模式</code>访问主硬盘。</p><p>第<code>29~31</code>行向端口<code>0x1f7</code>写入命令<code>0x20</code>，表示读硬盘。</p><p>告诉硬盘我们要读取数据之后便采用忙等的形式一直测试硬盘的状态，直到硬盘准备好数据。</p><p>第<code>33~37</code>行不断的读取硬盘的状态并测试。<code>andb $0x88, %al</code>用于提取第<code>7</code>位和第<code>3</code>位，即硬盘是否忙，数据是否准备好。<code>cmpb $0x08, %al</code>用于测试，如果相等则表明硬盘不忙且已经准备好数据，不相等则继续测试。</p><p>第<code>39</code>行将计数寄存器<code>cx</code>设置为<code>256</code>。因为<code>insw</code>一次从端口读取<code>2</code>字节数据，一个扇区<code>512</code>字节，需要读取<code>256</code>次。</p><p>第<code>40</code>行将<code>dx</code>设置为数据端口<code>0x1f0</code>。</p><p>第<code>41</code>行使用<code>insw</code>指令从端口读取数据，数据将会被读取到<code>es:di</code>指向的内存单元。配合<code>rep</code>前缀便可以实现批量操作。</p><p>第<code>43~47</code>行用于将物理地址<code>0x10000</code>处的数据打印在屏幕上。我们会在虚拟硬盘文件的逻辑扇区<code>1</code>开始处放置一个字符<code>&#39;A&#39;</code>，所以屏幕此时会打印出字符<code>&#39;A&#39;</code>。与以往不同，这个字符是从硬盘中读取出来的。</p><h3 id="编译并制作虚拟硬盘" tabindex="-1"><a class="header-anchor" href="#编译并制作虚拟硬盘" aria-hidden="true">#</a> 编译并制作虚拟硬盘</h3><ol><li>编译主引导扇区文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ as <span class="token parameter variable">--32</span> boot.s <span class="token parameter variable">-o</span> boot.o
$ objcopy <span class="token parameter variable">-O</span> binary <span class="token parameter variable">-j</span> .text boot.o boot.bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建数据文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">&gt;&gt;</span> message.data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>echo</code>命令创建一个文件，向其中写入字符<code>&#39;A&#39;</code>。因为<code>echo</code>的输出是以行为单位的，所以字符<code>&#39;A&#39;</code>后面还会跟一个换行符<code>&#39;\\n&#39;</code>。而<code>&#39;\\n&#39;</code>的<code>ASCII</code>编码正好是<code>0a</code>，即在数值上等于显示属性<code>黑底绿字，高亮显示</code>。</p><ol start="3"><li>将主引导扇区文件和数据文件合并成虚拟硬盘文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">512</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">2</span>
$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>boot.bin <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">conv</span><span class="token operator">=</span>notrunc
$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>message.data <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">seek</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">conv</span><span class="token operator">=</span>notrunc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们便得到了虚拟硬盘文件<code>boot.img</code>，查看一下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ xxd <span class="token parameter variable">-a</span> boot.img
00000000: b800 108e c031 ffba f201 b001 eeba f301  <span class="token punctuation">..</span><span class="token punctuation">..</span>.1<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
00000010: b001 eeba f401 b000 eeba f501 b000 eeba  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
00000020: f601 b000 0ce0 eeba f701 b020 eeec <span class="token number">2488</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>. <span class="token punctuation">..</span>$.
00000030: 3c08 75f9 b900 01ba f001 f36d b800 b88e  <span class="token operator">&lt;</span>.u<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>m<span class="token punctuation">..</span><span class="token punctuation">..</span>
00000040: d826 a100 00a3 0000 ebfe 0000 0000 0000  <span class="token builtin class-name">.</span><span class="token operator">&amp;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
00000050: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
*
000001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>U.
00000200: 410a 0000 0000 0000 0000 0000 0000 0000  A<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.
00000210: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
*
000003f0: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中前<code>512</code>字节是主引导扇区，以<code>0x55、0xaa</code>结束。第二个扇区开始处的两个字节为<code>0x41、0x0a</code>。</p><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-i386 <span class="token parameter variable">-drive</span> <span class="token assign-left variable">file</span><span class="token operator">=</span>boot.img,format<span class="token operator">=</span>raw
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动参数中我们指明的虚拟硬盘的格式为<code>raw</code>，如果不指定并且<code>qemu</code>识别不了的话总是有警告。运行结果如下：</p><figure><img src="`+p+'" alt="disk_char_A" tabindex="0" loading="lazy"><figcaption>disk_char_A</figcaption></figure><p>有兴趣的同学可以尝试将<code>message.data</code>中的<code>&#39;A&#39;</code>修改为别的字符，在不修改主引导扇区代码的情况下重新构建虚拟硬盘文件，运行并观察结果。</p>',34);function h(f,g){const s=c("RouterLink");return d(),i("div",null,[r,e("p",null,[n("在"),t(s,{to:"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/05-IO%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF.html"},{default:l(()=>[n("上一篇")]),_:1}),n("文章中，我们给出了部分"),v,n("设备的端口地址分配，其中主硬盘接口分配的端口号是"),b,n("，副硬盘接口分配的端口号是"),m,n("。下面给出当使用"),k,n("方式访问硬盘时每个端口的用途。")]),x])}const $=o(u,[["render",h],["__file","06-硬盘操作.html.vue"]]);export{$ as default};
