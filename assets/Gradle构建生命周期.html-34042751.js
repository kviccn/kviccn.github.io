import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-a3b1dd03.js";const t={},i=e(`<p>Gradle 的构建过程基于一个个任务及其依赖关系形成的任务图。Gradle 在执行任务之前先根据配置构建任务图，根据配置 Gradle 可以跳过一些本次构建不需要执行的任务。如下是两个任务图的例子：</p><figure><img src="https://docs.gradle.org/current/userguide/img/task-dag-examples.png" alt="Gradle 任务图" tabindex="0" loading="lazy"><figcaption>Gradle 任务图</figcaption></figure><p>插件和用户自己编写的构建脚本均可以影响任务图。</p><h2 id="构建阶段" tabindex="-1"><a class="header-anchor" href="#构建阶段" aria-hidden="true">#</a> 构建阶段</h2><p>Gradle 构建有三个不同的阶段。Gradle 按顺序运行这些阶段：1. 初始化，2. 配置，3. 执行。</p><p><strong>初始化</strong></p><ul><li><p>检测 <code>settings</code> 文件。</p></li><li><p>评估 <code>settings</code> 文件以确定哪些项目和包含的构建参与本次构建。</p></li><li><p>为每一个项目创建一个 <code>Project</code> 实例。</p></li></ul><p><strong>配置</strong></p><ul><li><p>评估参与构建的每个项目的构建脚本。</p></li><li><p>为请求的任务创建任务图。</p></li></ul><p><strong>执行</strong></p><ul><li>按照依赖关系的顺序调度和执行每个选定的任务。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>下面的示例显示了 <code>settings</code> 文件和 <code>build</code> 文件的哪些部分对应于不同的构建阶段：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// settings.gradle.kts</span>
rootProject<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;basic&quot;</span></span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This is executed during the initialization phase.&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// build.gradle.kts</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This is executed during the configuration phase.&quot;</span></span><span class="token punctuation">)</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;configured&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This is also executed during the configuration phase, because :configured is used in the build.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This is executed during the execution phase.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;testBoth&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doFirst <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This is executed first during the execution phase.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This is executed last during the execution phase.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This is executed during the configuration phase as well, because :testBoth is used in the build.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后面的命令用于执行上面注册的 <code>test</code> 和 <code>testBoth</code> 任务。因为 Gradle 只会配置被请求的任务及其依赖，所以 <code>configured</code> 任务永远不会被配置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token builtin class-name">test</span> testBoth
This is executed during the initialization phase.
This is executed during the configuration phase as well, because :testBoth is used <span class="token keyword">in</span> the build.

<span class="token operator">&gt;</span> Task :test
This is executed during the execution phase.

<span class="token operator">&gt;</span> Task :testBoth
This is executed first during the execution phase.
This is executed last during the execution phase.

BUILD SUCCESSFUL <span class="token keyword">in</span> 1s
<span class="token number">2</span> actionable tasks: <span class="token number">2</span> executed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h2><p>在初始化阶段，Gradle 检测参与构建的项目集和包含的构建。Gradle 首先对 <code>settings</code> 文件求值。然后为每个项目实例化 <code>Project</code> 实例。</p><h3 id="检测-settings-文件" tabindex="-1"><a class="header-anchor" href="#检测-settings-文件" aria-hidden="true">#</a> 检测 Settings 文件</h3><p>当你在一个包含 <code>settings.gradle(.kts)</code> 文件的目录中运行 Gradle 时，Gradle 使用 <code>settings.gradle(.kts)</code> 文件初始化本次构建。你可以在任何子项目中运行 Gradle，当你在一个不包含 <code>settings.gradle(.kts)</code> 文件的目录中运行 Gradle 时：</p><ol><li><p>Gradle 在其父目录中查找 <code>settings.gradle(.kts)</code> 文件。</p></li><li><p>如果找到了 <code>settings.gradle(.kts)</code> 文件，Gradle 会检查当前项目是不是多项目构建的一部分。如果是，则 Gradle 构建作为一个多项目构建运行。</p></li><li><p>如果未找到 <code>settings.gradle(.kts)</code> 文件，Gradle 将作为一个单项目构建运行。</p></li></ol><h3 id="评估-settings-文件" tabindex="-1"><a class="header-anchor" href="#评估-settings-文件" aria-hidden="true">#</a> 评估 Settings 文件</h3><p>在对 settings 文件评估期间，Gradle 会：</p><ul><li><p>向构建脚本的 classpath 中添加依赖库。</p></li><li><p>定义哪些被包含的构建参与组合构建。</p></li><li><p>定义哪些项目参与多项目构建。</p></li></ul><p>在构建时，Gradle 会为每一个项目创建 <code>Project</code> 实例。默认情况下，每个 <code>Project</code> 的名字与其顶级目录名称相同。除了根项目外，每个项目都有一个父项目。任何项目都可以有子项目。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>在配置阶段，Gradle 将任务和其他属性添加到初始化阶段生成的项目中。在配置阶段结束时，Gradle 已经为被请求的任务提供了一个完整的任务执行图。</p><h3 id="项目评估" tabindex="-1"><a class="header-anchor" href="#项目评估" aria-hidden="true">#</a> 项目评估</h3><p>在对项目进行评估期间，Gradle 会对构建脚本进行求值以构建项目的任务层级。这个层次结构包括所有任务的输入、操作和输出。</p><h3 id="对项目评估作出反应" tabindex="-1"><a class="header-anchor" href="#对项目评估作出反应" aria-hidden="true">#</a> 对项目评估作出反应</h3><p>你可以在项目评估之前和之后立即收到通知。即使在项目评估失败时这些通知依然有效。你可以为所有项目或特定项目配置项目评估通知。例如，你可以将这些通知用于：</p><ul><li><p>在所有定义应用于构建脚本之后添加额外配置</p></li><li><p>自定义日志</p></li><li><p>自定义分析</p></li></ul><p>下面的示例使用 <code>gradle.beforeProject()</code> 为某些测试添加 <code>hasTests</code> 属性。稍后，该示例使用 <code>gradle.afterProject()</code> 向每个 <code>hasTests</code> 属性值为 <code>true</code> 的项目添加一个测试任务：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// build.gradle.kts</span>
gradle<span class="token punctuation">.</span><span class="token function">beforeProject</span> <span class="token punctuation">{</span>
    <span class="token comment">// Set a default value</span>
    project<span class="token punctuation">.</span>ext<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hasTests&quot;</span></span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

gradle<span class="token punctuation">.</span><span class="token function">afterProject</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>project<span class="token punctuation">.</span>ext<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hasTests&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> project<span class="token punctuation">.</span>ext<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hasTests&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> projectString <span class="token operator">=</span> project<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Adding test task to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">projectString</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            doLast <span class="token punctuation">{</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Running tests for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">projectString</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// project-a.gradle.kts</span>
extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;hasTests&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> <span class="token builtin class-name">test</span>
Adding <span class="token builtin class-name">test</span> task to project <span class="token string">&#39;:project-a&#39;</span>
Running tests <span class="token keyword">for</span> project <span class="token string">&#39;:project-a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="执行" tabindex="-1"><a class="header-anchor" href="#执行" aria-hidden="true">#</a> 执行</h2><p>在执行阶段，Gradle 运行任务。Gradle 使用配置阶段生成的任务执行图来决定执行哪些任务。</p><h3 id="任务执行" tabindex="-1"><a class="header-anchor" href="#任务执行" aria-hidden="true">#</a> 任务执行</h3><p>任务执行通常包括与构建相关联的大部分工作:下载库、编译代码、读取输入和写入输出。</p><p>你可以在 Gradle 执行任何任务之前和之后立即收到通知。即使任务执行失败，这些通知也会起作用。下面的示例记录每个任务执行的开始和结束：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// build.gradle.kts</span>
tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ok&quot;</span></span><span class="token punctuation">)</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;broken&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ok&quot;</span></span><span class="token punctuation">)</span>
    doLast <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">RuntimeException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;broken&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

gradle<span class="token punctuation">.</span>taskGraph<span class="token punctuation">.</span><span class="token function">beforeTask</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;executing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression"><span class="token keyword">this</span></span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

gradle<span class="token punctuation">.</span>taskGraph<span class="token punctuation">.</span><span class="token function">afterTask</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>failure <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;FAILED&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;done&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> broken
executing task <span class="token string">&#39;:ok&#39;</span> <span class="token punctuation">..</span>.
<span class="token keyword">done</span>
executing task <span class="token string">&#39;:broken&#39;</span> <span class="token punctuation">..</span>.
FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed <span class="token keyword">for</span> task <span class="token string">&#39;:broken&#39;</span><span class="token builtin class-name">.</span>
<span class="token operator">&gt;</span> broken

* Try:
<span class="token operator">&gt;</span> Run with <span class="token parameter variable">--stacktrace</span> option to get the stack trace.
<span class="token operator">&gt;</span> Run with <span class="token parameter variable">--info</span> or <span class="token parameter variable">--debug</span> option to get <span class="token function">more</span> log output.
<span class="token operator">&gt;</span> Run with <span class="token parameter variable">--scan</span> to get full insights.

* Get <span class="token function">more</span> <span class="token builtin class-name">help</span> at https://help.gradle.org

BUILD FAILED <span class="token keyword">in</span> 0s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),l=[i];function p(o,c){return s(),a("div",null,l)}const d=n(t,[["render",p],["__file","Gradle构建生命周期.html.vue"]]);export{d as default};
