import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as l,b as a,d as e,e as n,a as t}from"./app-a3b1dd03.js";const d={},c={href:"https://www.baeldung.com/curl-rest",target:"_blank",rel:"noopener noreferrer"},p=t(`<h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p>本教程简要概述了如何使用 <em>curl</em> 测试 REST API。</p><p><strong><em>curl</em> 是一种用于传输数据的命令行工具，它支持大约 22 种协议，包括 HTTP。</strong> 这种组合使它成为了一个非常好的用于测试 REST 服务的临时工具。</p><h2 id="命令行选项" tabindex="-1"><a class="header-anchor" href="#命令行选项" aria-hidden="true">#</a> 命令行选项</h2><p><strong><em>curl</em> 支持超过 200 个命令行选项。</strong> 我们可以在命令中包含零个或多个与 URL 进行组合。</p><p>在开始之前，让我们先看两个小技巧。</p><h3 id="verbose" tabindex="-1"><a class="header-anchor" href="#verbose" aria-hidden="true">#</a> Verbose</h3><p>当我们在做测试时，打开 verbose mode 通常是一个比较好的做法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-v</span> http://www.example.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会使命令提供很多有用的信息，例如解析的 IP 地址，尝试连接的端口和 headers。</p><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h3><p>默认情况下，<em>curl</em> 将响应体输出到标准输出。此外，我们可以提供输出选项来保存到文件:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-o</span> out.json http://www.example.com/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当响应规模较大时，这非常有用。</p><h2 id="http-methods" tabindex="-1"><a class="header-anchor" href="#http-methods" aria-hidden="true">#</a> HTTP Methods</h2><p>每个 HTTP 请求都包含一个方法。最常用的方法是 GET、POST、PUT 和 DELETE。</p><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> GET</h3><p>这是使用 <em>curl</em> 进行 HTTP 调用时的默认方法。事实上，前面展示的示例都是简单的 GET 调用。</p><p>当在 8082 端口上运行一个本地服务时，我们会使用如下命令进行 GET 调用:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-v</span> http://localhost:8082/spring-rest/foos/9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于开启了 verbose 模式，我们可以随着响应体获得更多的信息:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>*   Trying ::1<span class="token punctuation">..</span>.
* TCP_NODELAY <span class="token builtin class-name">set</span>
* Connected to localhost <span class="token punctuation">(</span>::1<span class="token punctuation">)</span> port <span class="token number">8082</span> <span class="token punctuation">(</span><span class="token comment">#0)</span>
<span class="token operator">&gt;</span> GET /spring-rest/foos/9 HTTP/1.1
<span class="token operator">&gt;</span> Host: localhost:8082
<span class="token operator">&gt;</span> User-Agent: curl/7.60.0
<span class="token operator">&gt;</span> Accept: */*
<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span> HTTP/1.1 <span class="token number">200</span>
<span class="token operator">&lt;</span> X-Application-Context: application:8082
<span class="token operator">&lt;</span> Content-Type: application/json<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
<span class="token operator">&lt;</span> Transfer-Encoding: chunked
<span class="token operator">&lt;</span> Date: Sun, <span class="token number">15</span> Jul <span class="token number">2018</span> <span class="token number">11</span>:55:26 GMT
<span class="token operator">&lt;</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;id&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">9</span>,
  <span class="token string">&quot;name&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;TuwJ&quot;</span>
<span class="token punctuation">}</span>* Connection <span class="token comment">#0 to host localhost left intact</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post" tabindex="-1"><a class="header-anchor" href="#post" aria-hidden="true">#</a> POST</h3><p>我们使用这种方法将数据发送给接收数据的服务，这意味着我们需要使用 <code>data</code> 选项。</p><p>最简单的方法是将数据嵌入到命令中:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;id=9&amp;name=baeldung&#39;</span> http://localhost:8082/spring-rest/foos/new
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，我们可以像这样传递一个包含请求体的文件给 <code>data</code> 选项:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-d</span> @request.json <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span>
    http://localhost:8082/spring-rest/foos/new
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用第一条命令时我们可能会遇到一个错误，如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;timestamp&quot;: &quot;15-07-2018 05:57&quot;,
  &quot;status&quot;: 415,
  &quot;error&quot;: &quot;Unsupported Media Type&quot;,
  &quot;exception&quot;: &quot;org.springframework.web.HttpMediaTypeNotSupportedException&quot;,
  &quot;message&quot;: &quot;Content type &#39;application/x-www-form-urlencoded;charset=UTF-8&#39; not supported&quot;,
  &quot;path&quot;: &quot;/spring-rest/foos/new&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为 <em>curl</em> 默认会向所有 POST 请求添加以下请求头:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Content-Type: application/x-www-form-urlencoded
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这也是浏览器在普通 POST 中所使用的方式。在我们的使用中，通常需要根据需求自定义请求头。</p><p>例如，如果我们的接口需要 JSON 类型的请求体，那么我们可以使用<code>-H</code> 选项来修改原始的 POST 请求:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;id&quot;:9,&quot;name&quot;:&quot;baeldung&quot;}&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Content-Type: application/json&#39;</span> <span class="token punctuation">\\</span>
    http://localhost:8082/spring-rest/foos/new
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Windows 命令行不支持类 unix 系统 shell 中那样的单引号。</p><p>因此，我们需要用双引号替换单引号，并且在必要的地方转义它们:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -d &quot;{\\&quot;id\\&quot;:9,\\&quot;name\\&quot;:\\&quot;baeldung\\&quot;}&quot; -H &quot;Content-Type: application/json&quot;
  http://localhost:8082/spring-rest/foos/new
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，当我们想要发送较大数量的数据时，使用数据文件（data file）通常是一个好主意。</p><h3 id="put" tabindex="-1"><a class="header-anchor" href="#put" aria-hidden="true">#</a> PUT</h3><p>此方法与 POST 非常相似，当我们想要更新资源时使用此方法。通过 <code>-X</code> 选项使用此方法。</p><p>未指明请求方法时，<em>curl</em> 默认使用 GET 方法，因此，在使用 PUT 方法时，我们需要显式指明：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-d</span> @request.json <span class="token parameter variable">-H</span> <span class="token string">&#39;Content-Type: application/json&#39;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-X</span> PUT http://localhost:8082/spring-rest/foos/9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> DELETE</h3><p>同样，我们通过使用 <code>-X</code> 选项来指定要使用 DELETE 方法:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> DELETE http://localhost:8082/spring-rest/foos/9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="自定义请求头" tabindex="-1"><a class="header-anchor" href="#自定义请求头" aria-hidden="true">#</a> 自定义请求头</h2><p>我们可以替换默认请求头或者添加我们自己的请求头。</p><p>例如，要更改 Host 头，我们可以这样做:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Host: com.baeldung&quot;</span> http://example.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了关闭 User-Agent 头，我们可以输入一个空值:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;User-Agent:&quot;</span> http://example.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试时最常见的场景是更改 Content-Type 和 Accept。我们只需在每个请求头前加上 <code>-H</code> 选项:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-d</span> @request.json <span class="token punctuation">\\</span>
       <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span>
       <span class="token parameter variable">-H</span> <span class="token string">&quot;Accept: application/json&quot;</span> <span class="token punctuation">\\</span>
       http://localhost:8082/spring-rest/foos/new
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="身份验证" tabindex="-1"><a class="header-anchor" href="#身份验证" aria-hidden="true">#</a> 身份验证</h2>`,55),u={href:"https://www.baeldung.com/spring-security-basic-authentication",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"401 – Unauthorized",-1),h=a("code",null,"WWW-Authenticate",-1),m=t(`<p>对于基本身份验证（basic authentication），我们可以简单地使用 <code>user</code> 选项将用户名和密码组合嵌入到请求中:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">--user</span> baeldung:secretPassword http://example.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),b={href:"https://www.baeldung.com/rest-api-spring-oauth2-angularjs",target:"_blank",rel:"noopener noreferrer"},g=a("code",null,"access_token",-1),k=t(`<p>授权服务的响应中会包含<code>access_token</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;access_token&quot;: &quot;b1094abc0-54a4-3eab-7213-877142c33fh3&quot;,
  &quot;token_type&quot;: &quot;bearer&quot;,
  &quot;refresh_token&quot;: &quot;253begef-868c-5d48-92e8-448c2ec4bd91&quot;,
  &quot;expires_in&quot;: 31234
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以在<code>Authorization header</code>中使用这个<code>token</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Authorization: Bearer b1094abc0-54a4-3eab-7213-877142c33fh3&quot;</span> http://example.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本文中，我们演示了使用 <em>curl</em> 的最小功能来测试 REST 服务。虽然它可以做的比这里讨论的更多，但对于我们的目的来说，这就足够了。</p>`,6),q=a("code",null,"curl -h",-1),f={href:"https://github.com/eugenp/tutorials/tree/master/spring-web-modules/spring-rest-simple",target:"_blank",rel:"noopener noreferrer"};function x(T,_){const s=o("ExternalLinkIcon");return r(),l("div",null,[a("p",null,[e("原文："),a("a",c,[e("Test a REST API with curl"),n(s)])]),p,a("p",null,[a("a",u,[e("需要身份验证的服务"),n(s)]),e("可能会返回 "),v,e(" HTTP 响应码和相关的 "),h,e(" 头。")]),m,a("p",null,[e("但是，如果我们想"),a("a",b,[e("使用 OAuth2 进行身份验证"),n(s)]),e("，那就需要先从授权服务获取 "),g,e("。")]),k,a("p",null,[e("可以在命令行上输入 "),q,e("，查看所有可用选项。用于演示的 REST 服务可以"),a("a",f,[e("在 GitHub 上"),n(s)]),e("找到。")])])}const P=i(d,[["render",x],["__file","使用curl测试REST-API.html.vue"]]);export{P as default};
