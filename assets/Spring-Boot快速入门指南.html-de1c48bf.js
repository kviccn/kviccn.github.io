import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,b as s,d as n,e as c,a as l}from"./app-0c3433bd.js";const i="/assets/quick-img-1-12bfde9c5c280b1940d85dee3d81772d-4b0a84df.png",u={},r=s("h1",{id:"获取-spring-boot-项目模板",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#获取-spring-boot-项目模板","aria-hidden":"true"},"#"),n(" 获取 Spring Boot 项目模板")],-1),d={href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"},k=l('<figure><img src="'+i+`" alt="quick" tabindex="0" loading="lazy"><figcaption>quick</figcaption></figure><h1 id="写点代码" tabindex="-1"><a class="header-anchor" href="#写点代码" aria-hidden="true">#</a> 写点代码</h1><p>打开刚才生成的项目，在<code>src/main/java/com/example/demo</code>目录下找到<code>DemoApplication.java</code>文件，修改内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于刚生成的代码我们在<code>class</code>上添加了<code>@RestController</code>注解，这个注解告诉<code>spring</code>这个<code>class</code>现在是一个<code>Controller</code>了，而且是<code>Rest</code>了的<code>Controller</code>。</p><p>停一下，我先简单的解释一下<code>Http</code>模型。<code>Http</code>规范的应用实际上拥有一个很简单的模型，那就是客户端发起请求，服务端返回响应，这种简单的，一个响应对应一个请求的模型。</p><p>基于这个模型来解释一下<code>Controller</code>，<code>Controller</code>就是用来将客户端的请求转发到对应的处理方法的，简而言之就是<code>路由</code>。理解了这个概念你也就知道了为什么不应该在<code>Controller</code>里写业务逻辑了。正是这个原因，在<code>WebFlux</code>中直接就没有了<code>Controller</code>这个东西，取而代之的是<code>Router</code>。</p><p>那<code>Controller</code>前面加了个<code>Rest</code>是啥意思呢？这题我会，在很久很久以前，那时候还没有前后端分离、微服务这些概念，网站的页面也是集成在后端的，以模板的形式出现。<code>Controller</code>需要将最终注入了数据的视图，也就是页面发送到客户端，所以<code>Controller</code>是配合视图解析器返回页面的。加了<code>Rest</code>就简单了，不用搞这些花里胡哨的了，业务逻辑处理完，数据直接<code>Json</code>处理一下返回给客户端。</p><p>接下来我们看这段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码穿的衣服太多了，我们先把她的衣服脱掉：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这还用解释吗？既然代码这么简单，我们就看看她的衣服到底有什么不一样。</p><p>她穿的第一件衣服是<code>@GetMapping(&quot;/hello&quot;)</code>，简单，这衣服告诉<code>spring</code>，这个方法用来处理访问到<code>/hello</code>这个地址上的请求，且只处理访问到该地址的<code>GET</code>请求。</p><p>第二件衣服<code>@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;)</code>，这是穿在<code>hello</code>方法的参数<code>name</code>上的。它说要把请求参数中的<code>name</code>参数<code>(value = &quot;name&quot;)</code>和方法的<code>name</code>参数<code>(String name)</code>绑定在一起。如果<code>name</code>参数没有出现在请求中或者为空的话，那就取默认值<code>&quot;World&quot;</code>。</p><p>这里的请求参数指<code>Query Strings</code>，<code>Query Strings</code>就是请求行<code>?</code>后面跟的那一串用<code>&amp;</code>和<code>=</code>连起来的字符串，示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://www.example.com?search=ruby&amp;results=10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="启动项目" tabindex="-1"><a class="header-anchor" href="#启动项目" aria-hidden="true">#</a> 启动项目</h2><p>打开终端，进入项目根目录，执行如下命令：</p><p>MacOS/Linux:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./mvnw spring-boot:run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Windows:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mvnw spring-boot:run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看到如下输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./mvnw spring-boot:run
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Scanning <span class="token keyword">for</span> projects<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------<span class="token operator">&lt;</span> com.example:demo <span class="token operator">&gt;</span>--------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building demo <span class="token number">0.0</span>.1-SNAPSHOT
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------------<span class="token punctuation">[</span> jar <span class="token punctuation">]</span>---------------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spring-boot-maven-plugin:2.5.4:run <span class="token punctuation">(</span>default-cli<span class="token punctuation">)</span> <span class="token operator">&gt;</span> test-compile @ demo <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>
<span class="token punctuation">..</span>.

  <span class="token builtin class-name">.</span>   ____          _            __ _ _
 /<span class="token punctuation">\\</span><span class="token punctuation">\\</span> / ___<span class="token string">&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\
( ( )\\___ | &#39;</span>_ <span class="token operator">|</span> <span class="token string">&#39;_| | &#39;</span>_ <span class="token punctuation">\\</span>/ _\` <span class="token operator">|</span> <span class="token punctuation">\\</span> <span class="token punctuation">\\</span> <span class="token punctuation">\\</span> <span class="token punctuation">\\</span>
 <span class="token punctuation">\\</span><span class="token punctuation">\\</span>/  ___<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token string">&#39;  |____| .__|_| |_|_| |_\\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.5.4)

...
2021-08-26 12:42:46.810  INFO 4644 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to default profiles: default
...
2021-08-26 12:42:47.774  INFO 4644 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;</span>&#39;
<span class="token punctuation">..</span>.
<span class="token number">2021</span>-08-26 <span class="token number">12</span>:42:54.335  INFO <span class="token number">4644</span> --- <span class="token punctuation">[</span>nio-8080-exec-1<span class="token punctuation">]</span> o.s.web.servlet.DispatcherServlet        <span class="token builtin class-name">:</span> Completed initialization <span class="token keyword">in</span> <span class="token number">0</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们发个请求看看效果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-s</span> localhost:8080/hello
Hello World<span class="token operator">!</span>
$ <span class="token function">curl</span> <span class="token parameter variable">-s</span> localhost:8080/hello?name<span class="token operator">=</span>laoli
Hello laoli<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当请求中没有<code>name</code>参数时，使用默认值<code>&quot;World&quot;</code>。</p><p>（完）</p>`,29);function m(v,b){const a=t("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[n("在"),s("a",d,[n("https://start.spring.io/"),c(a)]),n("上按下图指示生成项目：")]),k])}const h=e(u,[["render",m],["__file","Spring-Boot快速入门指南.html.vue"]]);export{h as default};
