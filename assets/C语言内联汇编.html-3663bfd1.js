import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-a3b1dd03.js";const t={},c=e(`<p>在任何一个搜索引擎中输入关键字<code>C语言内联汇编</code>都能搜索到八百个结果，但是<code>纸上得来终觉浅</code>。别人的文章写的再好也比不上自己敲一遍在总结出来。老李在这里做一个粗浅的总结，觉得不够深入的朋友还是去看看那八百篇文章。</p><p>为什么要学习 C 语言内联汇编？想必当你在搜索引擎中敲下这几个字的时候就已经有了答案，话不多说，看代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你没有看错，这段代码里并没有内联汇编，但我还是想从这个栗子开始。这是一段没有任何意义的代码，它唯一的作用可能就是向操作系统返回<code>0</code>吧。</p><p>在<code>linux</code>环境下编译并运行这个程序。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> -fno-pic <span class="token parameter variable">-g</span> demo.c <span class="token parameter variable">-o</span> demo
$ ./demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>没有任何输出，但是我们可以查看它的返回结果。在<code>shell</code>中，<code>$?</code>代表上一个命令执行后的退出状态。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>没有意外，是<code>0</code>。你可能从来都不会在意编译器会把这段简单的代码编译成什么样子，但是当你决定学习<code>内联汇编</code>的时候，你就需要知道它究竟会被编译成什么样子。为了清晰我决定反编译这段代码对应的<code>目标文件</code>，因为在链接之后的可执行文件里加入了太多和程序主流程无关的东西。</p><p>编译：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> -fno-pic <span class="token parameter variable">-g</span> <span class="token parameter variable">-c</span> demo.c <span class="token parameter variable">-o</span> demo.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>反编译：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ objdump <span class="token parameter variable">-d</span> <span class="token parameter variable">-Msuffix</span> demo.o

demo.o：     文件格式 elf32-i386


Disassembly of section .text:

00000000 <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span>:
   <span class="token number">0</span>:   <span class="token number">55</span>                      pushl  %ebp
   <span class="token number">1</span>:   <span class="token number">89</span> e5                   movl   %esp,%ebp
   <span class="token number">3</span>:   b8 00 00 00 00          movl   <span class="token variable">$0x0</span>,%eax
   <span class="token number">8</span>:   5d                      popl   %ebp
   <span class="token number">9</span>:   c3                      retl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们不讲汇编语言的基础，反编译后的代码放在这里用来和后续的代码做对比。</p><p>继续下一个栗子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;nop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和最初的版本比起来多了一行，<code>asm(&quot;&quot;)</code>包裹起来的就是我们内联的汇编语言代码。我们内联了<code>nop</code>指令，这个指令使处理器空转一个<code>时钟周期</code>，换句话说，这个指令让处理器什么都不做。</p><p>运行结果也一样，还是向操作系统返回<code>0</code>。我们还是看一下反编译后的结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> -fno-pic <span class="token parameter variable">-g</span> <span class="token parameter variable">-c</span> demo.c <span class="token parameter variable">-o</span> demo.o
$ objdump <span class="token parameter variable">-d</span> <span class="token parameter variable">-Msuffix</span> demo.o

demo.o：     文件格式 elf32-i386


Disassembly of section .text:

00000000 <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span>:
   <span class="token number">0</span>:   <span class="token number">55</span>                      pushl  %ebp
   <span class="token number">1</span>:   <span class="token number">89</span> e5                   movl   %esp,%ebp
   <span class="token number">3</span>:   <span class="token number">90</span>                      nop
   <span class="token number">4</span>:   b8 00 00 00 00          movl   <span class="token variable">$0x0</span>,%eax
   <span class="token number">9</span>:   5d                      popl   %ebp
   a:   c3                      retl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比之前的结果，意料之中。第<code>12</code>行多了一行指令，就是我们在<code>C 语言</code>源代码中内联的<code>nop</code>指令。</p><p>这肯定无法让你分泌更多的多巴胺，但在这之前你还是需要先做一个平平无奇的练习，如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;movl $1, %eax\\n\\t&quot;</span>
      <span class="token string">&quot;movl $4, %ebx\\n\\t&quot;</span>
      <span class="token string">&quot;int $0x80&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译，运行，查看返回值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> -fno-pic <span class="token parameter variable">-g</span> demo.c <span class="token parameter variable">-o</span> demo
$ ./demo
$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次返回给操作系统的并不是<code>0</code>，而是<code>4</code>，第<code>4</code>行代码中的<code>4</code>。</p><p>为了美观我们使用了 C 语言中自动连接两个相邻双引号中的字符串的技巧，所以这三行汇编代码实际上等于<code>movl $1, %eax\\n\\tmovl $4, %ebx\\n\\tint $0x80</code>。这也解释了为什么前两行的行尾要加<code>换行符</code>和<code>制表符</code>，换行符用于分割每一条汇编指令，制表符使编译器编译时产生的汇编指令格式保持规范。当然，你也可以把它们换成分号。</p><p>这三行汇编指令的作用是以参数<code>4</code>调用<code>linux</code>的系统调用<code>exit</code>，<code>4</code>作为退出状态。<code>movl $1, %eax</code>将数字<code>1</code>放入寄存器<code>%eax</code>，这是<code>linux</code>系统调用<code>exit</code>的编号。<code>movl $4, %ebx</code>将程序的退出状态放入寄存器<code>%ebx</code>，这也是规定，调用<code>exit</code>之前必须将退出状态放在这里。<code>int $0x80</code>触发<code>0x80</code>号中断，该中断的处理过程就是内核会去查询<code>%eax</code>拿到系统调用编号然后执行相应的操作。所以程序在执行到<code>return 0</code>之前就已经通过<code>exit(4)</code>退出了，退出状态为<code>4</code>。</p><p>再来看下一个栗子，在这个例子中，我们会让 C 语言和汇编指令产生交互。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> z<span class="token punctuation">;</span>

  <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;addl %%ebx, %%eax&quot;</span>
      <span class="token operator">:</span> <span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>        <span class="token comment">/* 输出变量列表（可选）*/</span>
      <span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment">/* 输入变量列表（可选）*/</span>
      <span class="token operator">:</span> <span class="token comment">/* 被破坏的寄存器列表（可选）*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d + %d = %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> -fno-pic <span class="token parameter variable">-g</span> demo.c <span class="token parameter variable">-o</span> demo
$ ./demo
<span class="token number">3</span> + <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>汇编指令部分是<code>addl %%ebx, %%eax</code>，寄存器前多加了一个<code>%</code>。因为<code>%</code>在 C 语言中是特殊字符，所以要多加一个区分。随后是输出变量列表，我们只有一个输出变量<code>z</code>，前面双引号中的是<code>约束条件</code>，<code>=</code>号指定它是输出操作数，<code>a</code>表示把<code>%eax</code>和<code>z</code>对应起来，最终的结果是<code>%eax</code>的值会输出到变量<code>z</code>中。接着是输入变量列表，<code>x, y</code>两个输入变量，使用<code>逗号</code>隔开。<code>x</code>的约束条件是<code>b</code>，表示把<code>%ebx</code>和<code>x</code>关联起来；<code>y</code>的约束条件是<code>a</code>，表示把<code>%eax</code>和<code>y</code>关联起来。</p><p>上面的栗子是一个标准的<code>内联汇编</code>的示例。下面给出<code>内联汇编</code>的代码框架：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;汇编指令1\\n\\t&quot;</span>
    <span class="token string">&quot;汇编指令2\\n\\t&quot;</span>
    <span class="token string">&quot;汇编指令3\\n\\t&quot;</span>
    <span class="token string">&quot;汇编指令n&quot;</span>
    <span class="token operator">:</span> 输出变量列表（可选）
    <span class="token operator">:</span> 输入变量列表（可选）
    <span class="token operator">:</span> 被破坏的寄存器列表（可选）<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在给出部分约束条件的含义：</p><table><thead><tr><th style="text-align:center;">约束条件</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">a</td><td style="text-align:left;">使用寄存器 eax</td></tr><tr><td style="text-align:center;">b</td><td style="text-align:left;">使用寄存器 ebx</td></tr><tr><td style="text-align:center;">c</td><td style="text-align:left;">使用寄存器 ecx</td></tr><tr><td style="text-align:center;">d</td><td style="text-align:left;">使用寄存器 edx</td></tr><tr><td style="text-align:center;">S</td><td style="text-align:left;">使用 esi</td></tr><tr><td style="text-align:center;">D</td><td style="text-align:left;">使用 edi</td></tr><tr><td style="text-align:center;">q</td><td style="text-align:left;">使用动态分配字节可寻址寄存器</td></tr><tr><td style="text-align:center;">r</td><td style="text-align:left;">使用任意动态分配的寄存器</td></tr><tr><td style="text-align:center;">A</td><td style="text-align:left;">使用寄存器 eax 与 edx 联合</td></tr><tr><td style="text-align:center;">m</td><td style="text-align:left;">使用内存地址</td></tr><tr><td style="text-align:center;">o</td><td style="text-align:left;">使用内存地址并可以加偏移量</td></tr><tr><td style="text-align:center;">I</td><td style="text-align:left;">使用常数 0-31</td></tr><tr><td style="text-align:center;">J</td><td style="text-align:left;">使用常数 0-63</td></tr><tr><td style="text-align:center;">K</td><td style="text-align:left;">使用常数 0-255</td></tr><tr><td style="text-align:center;">M</td><td style="text-align:left;">使用常数 0-3</td></tr><tr><td style="text-align:center;">N</td><td style="text-align:left;">使用一字节常数 0-255</td></tr></tbody></table><p>如果参数过多，每一个寄存器都要自己定的话很麻烦。这时我们可以使用约束条件<code>r</code>和<code>占位符</code>让编译器帮我们决定用哪个寄存器。改造上面的栗子如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

  <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;addl %1, %0&quot;</span>
      <span class="token operator">:</span> <span class="token string">&quot;=r&quot;</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment">/* 输出变量列表（可选）*/</span>
      <span class="token operator">:</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment">/* 输入变量列表（可选）*/</span>
      <span class="token operator">:</span> <span class="token comment">/* 被破坏的寄存器列表（可选）*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1 + 2 = %d\\n&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>占位符</code>用来表示输入输出变量，规则是从输出列表开始，一直到输入列表结束，从左到右，从上到下依次为<code>%0, %1, %2...</code>。所以输出列表中的第一个变量<code>y</code>用<code>%0</code>表示，然后到输入列表中的第一个变量<code>x</code>，用<code>%1</code>表示。第二个变量<code>y</code>在之前已经出现过，所以在约束条件处填<code>0</code>，把它们关联起来。除此之外，约束条件<code>r</code>告诉编译器，由编译器分配具体的寄存器。</p><p>编译运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> -fno-pic <span class="token parameter variable">-g</span> demo.c <span class="token parameter variable">-o</span> demo
$ ./demo
<span class="token number">1</span> + <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>掌握了这些知识点实际上已经够用了，但是被破坏的寄存器列表我们没有讲。因为现在的编译器已经很智能了，比如说上面我们将<code>%ebx</code>和<code>x</code>关联，将<code>%eax</code>和<code>y</code>关联，实际上如果你查看反编译后的代码会发现，编译器已经将它们保护起来了。当以后如果碰到一些被隐式操作到的寄存器时记得将他们写到<code>被破坏的寄存器列表</code>中就可以了。</p>`,42),o=[c];function l(p,d){return s(),a("div",null,o)}const u=n(t,[["render",l],["__file","C语言内联汇编.html.vue"]]);export{u as default};
