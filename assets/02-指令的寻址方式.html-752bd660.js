import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as n,c as a,b as s,d as e,e as d,w as i,a as o}from"./app-9978a549.js";const p="/assets/boot-c5c8a858.png",m={},r=o(`<p>上篇文章中老李给大家教了怎么在屏幕上打印一个字符，还留了个课后作业，打印完整的<code>Hello World</code>。最简单的方法是按照打印<code>H</code>的方式依次打印其它字符就好了。当然，这种重复的工作还是交给计算机去做吧，毕竟我们的时间是很宝贵的。</p><p>这篇文章中我们用循环的方式让计算机自己把所有的字符都打印出来。并结合代码给大家讲解一下指令的寻址方式。下面给出代码：</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>.code16

movw $0x07c0, %ax
movw %ax, %ds

movw $0xb800, %ax
movw %ax, %es

xorw %si, %si
movw message_length, %cx

l1:
  movb message(%si), %bl
  movb %bl, %es:(%si)
  incw %si
  loop l1

jmp .

message:
  .byte &#39;H&#39;, 0xa, &#39;e&#39;, 0xa, &#39;l&#39;, 0xa, &#39;l&#39;, 0xa, &#39;o&#39;, 0xa, &#39; &#39;, 0xa, &#39;W&#39;, 0xa, &#39;o&#39;, 0xa, &#39;r&#39;, 0xa, &#39;l&#39;, 0xa, &#39;d&#39;, 0xa
message_length:
  .word . - message

.org 510
.word 0xAA55
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h2><h3 id="代码解释" tabindex="-1"><a class="header-anchor" href="#代码解释" aria-hidden="true">#</a> 代码解释</h3>`,6),h=s("code",null,"3、4",-1),u=s("code",null,"ds",-1),_=s("code",null,"0x07c0",-1),v=s("code",null,"message",-1),b=s("code",null,"message_length",-1),g=s("code",null,"0x07c0",-1),x=s("code",null,"BIOS",-1),y=s("code",null,"0",-1),w=s("code",null,"0",-1),k=s("code",null,"1",-1),f=s("code",null,"0x7c00",-1),z=s("code",null,"ds",-1),H=s("code",null,"4",-1),M=s("code",null,"0x07c0",-1),A=s("code",null,"0x7c00",-1),E=o(`<p>第<code>6, 7</code>行上一篇文章中讲过，将<code>es</code>设置为显存映射的内存段，方便操控屏幕。</p><p>第<code>9</code>行使用异或指令<code>xor</code>将源索引寄存器<code>si</code>内容清空，即设置为<code>0</code>。可以把源索引寄存器想象成数组的下标，结合<code>message</code>标号处的数据，大概就能明白我们要做什么了吧？我们要通过这个索引来访问<code>message</code>标号开始处的数据，<code>si</code>每次增加<code>1</code>，依次，我们就能通过循环的方式访问所有的数据。</p><p>第<code>10</code>行将内存地址<code>message_length</code>处的数据转移到<code>cx</code>寄存器。我们先来分析一下<code>message_length</code>，<code>message_length</code>定义在第<code>22</code>行，后面跟了一个冒号，是一个标号<code>(label)</code>。标号代表的就是所处行的位置，这个在稍后我们反编译的时候可以看到。我们在这个位置定义了一个<code>word</code>的数据，数据的内容是<code>message</code>内容的长度。计算的方式是用当前位置（用位置计数器<code>.</code>表示）减去标号<code>message</code>所表示的位置，中间的这一段数据就是我们要打印的字符及其显示属性。<code>cx</code>是一个通用寄存器，但是通用寄存器也有特殊的用途。例如<code>cx</code>，在串操作指令和<code>loop</code>指令中作计数器用；在移位、循环移位指令中作移位次数计数器用。其中<code>c</code>就是<code>count</code>的意思。下面我们要用到<code>loop</code>指令来依次打印每一个字符，所以在这里设置<code>cx</code>。</p><p>第<code>13</code>行采用了<strong>寄存器相对寻址</strong>的方式将<code>ds:(si + message)</code>处的一个字节的数据转移到<code>bx</code>寄存器的低字节处<code>bl</code>。寻址方式我们稍后解释，这里先说明一下<code>bl</code>。<code>8086</code>中的<code>4</code>个<code>16</code>位数据寄存器<code>ax、bx、cx、dx</code>可以用来存放数据或地址，也可以将每个数据寄存器拆成两个独立的<code>8</code>位寄存器使用。高<code>8</code>位寄存器分别是<code>ah、bh、ch、dh</code>，低<code>8</code>位寄存器分别是<code>al、bl、cl、dl</code>。因为这里我们要移动一个字节的数据，所以拆了一个<code>8</code>位寄存器使用。</p><p>第<code>14</code>行采用了<strong>寄存器间接寻址</strong>的方式将<code>bl</code>中的一字节数据转移到内存<code>es:si</code>处，这里我们显示的指明了要使用<code>es</code>作为段地址，因为在使用<code>si、di、bx</code>做偏移量时默认使用的是<code>ds</code>段寄存器。我们用<code>bl</code>做了一个中转，把<code>ds:(si + message)</code>处的一个字节的数据转移到了<code>es:si</code>处。为什么需要用寄存器做一次中转呢？答案是<code>8086</code>处理器不支持同时操作两个内存数。</p><p>第<code>15</code>行使用了加一指令<code>inc</code>将<code>si</code>的值加一，相当于高级语言中常用的<code>i++</code>。</p><p>第<code>16</code>行使用了<code>loop</code>指令来实现循环。<code>loop</code>指令的功能是重复执行一段相同的代码，处理器在执行它的时候会顺序做两件事：1. 将寄存器<code>cx</code>的内容减一；2. 如果<code>cx</code>的内容不为零，转移到指定的位置处执行，否则顺序执行后面的指令。</p><p>第<code>20</code>行定义了标号<code>message</code>，标号实际上表示一个位置，它的一个功能就是方便我们引用数据。例如这里，如果我们手动去数<code>&#39;H&#39;</code>这个字符在内存中的第几个字节处，那这代码就没法写了，太痛苦了。但是当我们使用了标号时，编译器就会帮我们计算出<code>&#39;H&#39;</code>所在的位置，并在我们的代码中把使用了<code>message</code>的地方替换成实际的位置。</p><p>第<code>21</code>行依次定义了每一个要显示的字符，每个数据的长度为一字节<code>(byte)</code>，每个字符由两个字节组成，<code>ASCII</code>码和显示属性<code>0xa</code>（浅绿色）。</p><p>第<code>22</code>行定义了标号<code>message_length</code>，作为我们对要打印数据长度的引用。</p><p>第<code>23</code>行定义了要打印的数据的长度，占用一个字<code>(word)</code>的存储空间，值为当前位置减去标号<code>message</code>所表示的位置，结果即<code>Hello World</code>及其显示属性所占据的内存空间的大小。</p><h3 id="编译、反编译" tabindex="-1"><a class="header-anchor" href="#编译、反编译" aria-hidden="true">#</a> 编译、反编译</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ as <span class="token parameter variable">--32</span> boot.s <span class="token parameter variable">-o</span> boot.o
$ objdump <span class="token parameter variable">-D</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-m</span> i386 -Mi8086,suffix boot.o

boot.o：     文件格式 elf32-i386

SYMBOL TABLE:
00000000 l    d  .text  00000000 .text
00000000 l    d  .data  00000000 .data
00000000 l    d  .bss   00000000 .bss
00000032 l       .text  00000000 message_length
00000010 l       .text  00000000 l1
0000001c l       .text  00000000 message



Disassembly of section .text:

00000000 <span class="token operator">&lt;</span>l1-0x1<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>:
   <span class="token number">0</span>:   b8 c0 07                movw   <span class="token variable">$0x7c0</span>,%ax
   <span class="token number">3</span>:   8e d8                   movw   %ax,%ds
   <span class="token number">5</span>:   b8 00 b8                movw   <span class="token variable">$0xb800</span>,%ax
   <span class="token number">8</span>:   8e c0                   movw   %ax,%es
   a:   <span class="token number">31</span> f6                   xorw   %si,%si
   c:   8b 0e <span class="token number">32</span> 00             movw   0x32,%cx

00000010 <span class="token operator">&lt;</span>l<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>:
  <span class="token number">10</span>:   8a 9c 1c 00             movb   0x1c<span class="token punctuation">(</span>%si<span class="token punctuation">)</span>,%bl
  <span class="token number">14</span>:   <span class="token number">26</span> <span class="token number">88</span> 1c                movb   %bl,%es:<span class="token punctuation">(</span>%si<span class="token punctuation">)</span>
  <span class="token number">17</span>:   <span class="token number">46</span>                      incw   %si
  <span class="token number">18</span>:   e2 f6                   loopw  <span class="token number">10</span> <span class="token operator">&lt;</span>l<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
  1a:   eb fe                   jmp    1a <span class="token operator">&lt;</span>l1+0xa<span class="token operator">&gt;</span>

0000001c <span class="token operator">&lt;</span>message<span class="token operator">&gt;</span>:
  1c:   <span class="token number">48</span>                      decw   %ax
  1d:   0a <span class="token number">65</span> 0a                orb    0xa<span class="token punctuation">(</span>%di<span class="token punctuation">)</span>,%ah
  <span class="token number">20</span>:   6c                      insb   <span class="token punctuation">(</span>%dx<span class="token punctuation">)</span>,%es:<span class="token punctuation">(</span>%di<span class="token punctuation">)</span>
  <span class="token number">21</span>:   0a 6c 0a                orb    0xa<span class="token punctuation">(</span>%si<span class="token punctuation">)</span>,%ch
  <span class="token number">24</span>:   6f                      outsw  %ds:<span class="token punctuation">(</span>%si<span class="token punctuation">)</span>,<span class="token punctuation">(</span>%dx<span class="token punctuation">)</span>
  <span class="token number">25</span>:   0a <span class="token number">20</span>                   orb    <span class="token punctuation">(</span>%bx,%si<span class="token punctuation">)</span>,%ah
  <span class="token number">27</span>:   0a <span class="token number">57</span> 0a                orb    0xa<span class="token punctuation">(</span>%bx<span class="token punctuation">)</span>,%dl
  2a:   6f                      outsw  %ds:<span class="token punctuation">(</span>%si<span class="token punctuation">)</span>,<span class="token punctuation">(</span>%dx<span class="token punctuation">)</span>
  2b:   0a <span class="token number">72</span> 0a                orb    0xa<span class="token punctuation">(</span>%bp,%si<span class="token punctuation">)</span>,%dh
  2e:   6c                      insb   <span class="token punctuation">(</span>%dx<span class="token punctuation">)</span>,%es:<span class="token punctuation">(</span>%di<span class="token punctuation">)</span>
  2f:   0a <span class="token number">64</span> 0a                orb    0xa<span class="token punctuation">(</span>%si<span class="token punctuation">)</span>,%ah

00000032 <span class="token operator">&lt;</span>message_length<span class="token operator">&gt;</span>:
  <span class="token number">32</span>:   <span class="token number">16</span>                      pushw  %ss
        <span class="token punctuation">..</span>.
 1fb:   00 00                   addb   %al,<span class="token punctuation">(</span>%bx,%si<span class="token punctuation">)</span>
 1fd:   00 <span class="token number">55</span> aa                addb   %dl,-0x56<span class="token punctuation">(</span>%di<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第<code>2</code>行，这次我们在反编译的时候加上了<code>-t</code>参数，表示要打印<code>符号表</code>。就是第<code>6</code>行到第<code>12</code>行的内容。</p><p>第<code>10、11、12</code>行分别是我们在代码中定义的三个符号及其代表的值。<code>l1 -&gt; 10、message -&gt; 1c、message_length -&gt; 32</code>。</p><p>第<code>24</code>行，<code>message_length</code>已经被替换成了<code>0x32</code>。</p><p>第<code>27</code>行，<code>message</code>替换成了<code>0x1c</code>。</p><p>第<code>30</code>行，<code>l1</code>替换成了<code>0x10</code>。</p><p>第<code>34 - 44</code>行是我们定义的数据，即<code>Hello World</code>及其显示属性，但是被<code>objdump</code>无情的当成了代码，不用在意了。</p><p>第<code>47</code>行是我们定义的数据的长度，是<code>. - message</code>计算的结果<code>0x16</code>，即十进制的<code>22</code>。我们可以数一数，或者计算一下，<code>Hello World</code>一共是<code>11</code>个字符（含空格），每一个字符包含显示属性的话占用两个字节，所以一共占用<code>22</code>个字节。</p><h2 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-i386 boot.bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果如下：</p><figure><img src="`+p+'" alt="运行结果" tabindex="0" loading="lazy"><figcaption>运行结果</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="代码总结" tabindex="-1"><a class="header-anchor" href="#代码总结" aria-hidden="true">#</a> 代码总结</h3><ol><li><code>xor</code>，异或指令，对源操作数和目的操作数做按位异或操作，结果保存在目的操作数中。</li><li><code>inc</code>，加一指令，对操作数加一。</li><li><code>loop</code>，循环指令，其功能是重复执行一段相同的代码，处理器在执行它的时候会顺序做两件事： <ul><li>将寄存器<code>cx</code>的内容减一。</li><li>如果<code>cx</code>的内容不为零，转移到指定的位置处执行，否则顺序执行后面的指令。</li></ul></li><li><code>label</code>，即<strong>标号</strong>，如<code>l1、message、message_length</code>。它们表示当前所处行的位置，当编译完成之后，会被替换成实际的位置。</li><li><code>.byte</code>，伪指令，用于定义一字节大小的数据，也可以同时指定一组一字节大小的数据，使用逗号分隔。</li></ol><h3 id="寻址方式总结" tabindex="-1"><a class="header-anchor" href="#寻址方式总结" aria-hidden="true">#</a> 寻址方式总结</h3><p>指令的寻址方式很重要，也很简单。下面解释一下寻址的含义。</p><p>汇编语言指令是由操作码和操作数两部分组成的。操作码是一组约定的二进制代码，用来指明所要执行的操作性质和方式，操作数字段除了可以是操作数本身外，还可以是操作数的地址或者地址的一部分。具体而言，可以是指向操作数地址的指针或其他有关操作数的信息。<em><strong>操作数存放的位置不同，寻找的方法也不同，寻找操作数的过程称为寻址。</strong></em></p><p>在<code>8086</code>指令系统中，根据操作数的来源可将其分为<code>立即数操作数</code>、<code>寄存器操作数</code>和<code>存储器操作数</code>，相应的寻址方式分为<code>立即数寻址</code>、<code>寄存器寻址</code>和<code>存储器寻址</code>；此外，还有一种<code>端口寻址</code>。</p><h4 id="立即数寻址" tabindex="-1"><a class="header-anchor" href="#立即数寻址" aria-hidden="true">#</a> 立即数寻址</h4><p>立即就是立刻、马上的意思。立即数寻址就是说操作数就在指令后面，不需要再去寄存器或者内存中寻找。立即数是作为指令的一个部分置于指令代码的后部。</p><p>观察反编译结果的第<code>19、21</code>行，<code>movw $0x7c0,%ax</code>、<code>movw $0xb800,%ax</code>对应的二进制代码<code>b8 c0 07</code>、<code>b8 00 b8</code>，可以发现其中的立即数<code>$0x7c0</code>、<code>$0xb800</code>是直接跟在指令后面的。</p><h4 id="寄存器寻址" tabindex="-1"><a class="header-anchor" href="#寄存器寻址" aria-hidden="true">#</a> 寄存器寻址</h4><p>在寄存器寻址中，操作数是预先存放在<code>CPU</code>的内部寄存器中的，指令中的操作数部分只需给出寄存器的名称。</p><p>如代码中的第<code>4</code>行，<code>movw %ax, %ds</code>，在上一步中我们已经把<code>ax</code>寄存器的值设置成了<code>0x07c0</code>，这里我们直接从寄存器中取值。</p><h4 id="存储器寻址" tabindex="-1"><a class="header-anchor" href="#存储器寻址" aria-hidden="true">#</a> 存储器寻址</h4><p>存储器寻址方式中，寻找的操作数是放在存储器中的，可以在存储器的数据段、代码段或堆栈段等存储区；指令中的操作数代码主要是存储单元的地址或生成地址的相关信息。由于<code>8086 CPU</code>的内存采用分段管理方式，段基址由段寄存器提供，存储器操作数寻址还应提供段内偏移量。段内偏移量通常也称为有效地址<code>(EA)</code>，这是一个<code>16</code>位的无符号数，代表距离段基址的字节数。<code>16</code>位有效地址<code>EA</code>可以由以下<code>3</code>部分算的：</p>',39),B=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"E"),s("mi",null,"A"),s("mo",null,"="),s("mtext",null,"基址"),s("mo",null,"+"),s("mtext",null,"变址"),s("mo",null,"+"),s("mtext",null,"偏移量")]),s("annotation",{encoding:"application/x-tex"}," EA = \\text{基址} + \\text{变址} + \\text{偏移量} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"基址")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"变址")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"偏移量")])])])])])],-1),V=s("p",null,[e("其中，基址由基址寄存器"),s("code",null,"bx"),e("和基址指针"),s("code",null,"bp"),e("提供，变址由变址寄存器"),s("code",null,"si、di"),e("提供，偏移量是一个"),s("code",null,"8"),e("位或"),s("code",null,"16"),e("位二进制常数，即")],-1),$={class:"katex-block"},R={class:"katex-display"},I={class:"katex"},Y=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"e"),s("mi",null,"a"),s("mo",null,"="),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"b"),s("mi",null,"x")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"b"),s("mi",null,"p")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])])])]),s("mo",{fence:"true"},"}")]),s("mo",null,"+"),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"s"),s("mi",null,"i")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"d"),s("mi",null,"i")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])])])]),s("mo",{fence:"true"},"}")]),s("mo",null,"+"),s("mtext",null,"偏移量")]),s("annotation",{encoding:"application/x-tex"}," ea = \\begin{Bmatrix} bx\\\\\\\\ bp\\\\\\\\ \\end{Bmatrix} + \\begin{Bmatrix} si\\\\\\\\ di\\\\\\\\ \\end{Bmatrix} + \\text{偏移量} ")])])],-1),j={class:"katex-html","aria-hidden":"true"},O=o('<span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span>',1),C={class:"base"},L=s("span",{class:"strut",style:{height:"4.8em","vertical-align":"-2.15em"}},null,-1),N={class:"minner"},D={class:"mopen"},W={class:"delimsizing mult"},F={class:"vlist-t vlist-t2"},S={class:"vlist-r"},P={class:"vlist",style:{height:"2.65em"}},T=s("span",{style:{top:"-1.9em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎩")])],-1),U={style:{top:"-1.892em"}},q=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),G={style:{height:"0.616em",width:"0.8889em"}},J={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.616em",style:{width:"0.8889em"},viewBox:"0 0 888.89 616",preserveAspectRatio:"xMinYMin"},K=s("path",{d:"M384 0 H504 V616 H384z M384 0 H504 V616 H384z"},null,-1),Q=[K],X=s("span",{style:{top:"-3.15em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎨")])],-1),Z={style:{top:"-4.292em"}},ss=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),es={style:{height:"0.616em",width:"0.8889em"}},ns={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.616em",style:{width:"0.8889em"},viewBox:"0 0 888.89 616",preserveAspectRatio:"xMinYMin"},as=s("path",{d:"M384 0 H504 V616 H384z M384 0 H504 V616 H384z"},null,-1),os=[as],cs=s("span",{style:{top:"-4.9em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎧")])],-1),ts=s("span",{class:"vlist-s"},"​",-1),ls=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])],-1),ds=o('<span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">p</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span>',1),is={class:"mclose"},ps={class:"delimsizing mult"},ms={class:"vlist-t vlist-t2"},rs={class:"vlist-r"},hs={class:"vlist",style:{height:"2.65em"}},us=s("span",{style:{top:"-1.9em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎭")])],-1),_s={style:{top:"-1.892em"}},vs=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),bs={style:{height:"0.616em",width:"0.8889em"}},gs={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.616em",style:{width:"0.8889em"},viewBox:"0 0 888.89 616",preserveAspectRatio:"xMinYMin"},xs=s("path",{d:"M384 0 H504 V616 H384z M384 0 H504 V616 H384z"},null,-1),ys=[xs],ws=s("span",{style:{top:"-3.15em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎬")])],-1),ks={style:{top:"-4.292em"}},fs=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),zs={style:{height:"0.616em",width:"0.8889em"}},Hs={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.616em",style:{width:"0.8889em"},viewBox:"0 0 888.89 616",preserveAspectRatio:"xMinYMin"},Ms=s("path",{d:"M384 0 H504 V616 H384z M384 0 H504 V616 H384z"},null,-1),As=[Ms],Es=s("span",{style:{top:"-4.9em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎫")])],-1),Bs=s("span",{class:"vlist-s"},"​",-1),Vs=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])],-1),$s=s("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1),Rs=s("span",{class:"mbin"},"+",-1),Is=s("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1),Ys={class:"base"},js=s("span",{class:"strut",style:{height:"4.8em","vertical-align":"-2.15em"}},null,-1),Os={class:"minner"},Cs={class:"mopen"},Ls={class:"delimsizing mult"},Ns={class:"vlist-t vlist-t2"},Ds={class:"vlist-r"},Ws={class:"vlist",style:{height:"2.65em"}},Fs=s("span",{style:{top:"-1.9em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎩")])],-1),Ss={style:{top:"-1.892em"}},Ps=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),Ts={style:{height:"0.616em",width:"0.8889em"}},Us={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.616em",style:{width:"0.8889em"},viewBox:"0 0 888.89 616",preserveAspectRatio:"xMinYMin"},qs=s("path",{d:"M384 0 H504 V616 H384z M384 0 H504 V616 H384z"},null,-1),Gs=[qs],Js=s("span",{style:{top:"-3.15em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎨")])],-1),Ks={style:{top:"-4.292em"}},Qs=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),Xs={style:{height:"0.616em",width:"0.8889em"}},Zs={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.616em",style:{width:"0.8889em"},viewBox:"0 0 888.89 616",preserveAspectRatio:"xMinYMin"},se=s("path",{d:"M384 0 H504 V616 H384z M384 0 H504 V616 H384z"},null,-1),ee=[se],ne=s("span",{style:{top:"-4.9em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎧")])],-1),ae=s("span",{class:"vlist-s"},"​",-1),oe=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])],-1),ce=o('<span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span>',1),te={class:"mclose"},le={class:"delimsizing mult"},de={class:"vlist-t vlist-t2"},ie={class:"vlist-r"},pe={class:"vlist",style:{height:"2.65em"}},me=s("span",{style:{top:"-1.9em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎭")])],-1),re={style:{top:"-1.892em"}},he=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),ue={style:{height:"0.616em",width:"0.8889em"}},_e={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.616em",style:{width:"0.8889em"},viewBox:"0 0 888.89 616",preserveAspectRatio:"xMinYMin"},ve=s("path",{d:"M384 0 H504 V616 H384z M384 0 H504 V616 H384z"},null,-1),be=[ve],ge=s("span",{style:{top:"-3.15em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎬")])],-1),xe={style:{top:"-4.292em"}},ye=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),we={style:{height:"0.616em",width:"0.8889em"}},ke={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.616em",style:{width:"0.8889em"},viewBox:"0 0 888.89 616",preserveAspectRatio:"xMinYMin"},fe=s("path",{d:"M384 0 H504 V616 H384z M384 0 H504 V616 H384z"},null,-1),ze=[fe],He=s("span",{style:{top:"-4.9em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎫")])],-1),Me=s("span",{class:"vlist-s"},"​",-1),Ae=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])],-1),Ee=s("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1),Be=s("span",{class:"mbin"},"+",-1),Ve=s("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1),$e=s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"偏移量")])],-1),Re=o('<p>以上<code>3</code>个分量的不同组合可以构成<code>5</code>种不同的有效地址形成方式，即存储器操作数有<code>5</code>种寻址方式。</p><p>有了有效地址<code>EA</code>和段寄存器提供的段基址，就可以计算出存储器单元的物理地址了，即 <code>物理地址（PA） = 段寄存器（左移4位） + 有效地址（EA）</code></p><ol><li><p>直接寻址 即操作数地址的<code>16</code>位偏移量直接包含在指令代码中。例如上一篇文章中的<code>movb $0xa, %es:1</code>指令，其编译后的结果是<code>26 c6 06 01 00 0a</code>。其中的<code>01 00</code>（小端序，转换成常规顺序后就是<code>00 01</code>）即偏移量<code>1</code>。因为使用了<strong>段前缀</strong>显示的指明了使用<code>es</code>段寄存器，所以最终的内存单元就是<code>es</code>左移<code>4</code>位加<code>1</code>。因为此时<code>es</code>内容为<code>0xb800</code>，所以物理地址为<code>0xb8001</code>。</p></li><li><p>寄存器间接寻址 即操作数地址的<code>16</code>位偏移量包含在寄存器<code>bx、bp、si或di</code>中，因为要通过寄存器<code>间接</code>获取到这个偏移量，所以叫寄存器间接寻址。因为每个寄存器除了通用功能外还有其特殊的用途，所以寄存器间接寻址还可以分为两种不同的类型。</p><ul><li>当使用<code>bx、si、di</code>做间接寻址时，段寄存器默认为<code>ds（数据段寄存器）</code>。例如<code>movb %bl, %es:(%si)</code>，因为我们加了段前缀<code>es</code>，所以目的操作数的物理地址为<code>es &lt;&lt; 4 + si</code>。如果不加段前缀的话则为<code>ds &lt;&lt; 4 + si</code>。</li><li>当使用<code>bp</code>做间接寻址时，段寄存器默认为<code>ss（堆栈段寄存器）</code>。暂时没有涉及。</li></ul></li><li><p>寄存器相对寻址 寄存器相对寻址是由<strong>指定的寄存器内容</strong>加上<strong>指令中给出的偏移量</strong>作为存储器中操作数的偏移地址的寻址方式。<strong>用于相对寻址的寄存器必须是专用间接寻址寄存器<code>bx、bp、si或di</code></strong>。与寄存器间接寻址类似，寄存器相对寻址也可分两种类型。</p><ul><li>当使用<code>bx、si、di</code>作为变址寄存器时，段寄存器默认为<code>ds（数据段寄存器）</code>。例如<code>movb message(%si), %bl</code>中的源操作数<code>message(%si)</code>，标号<code>message</code>在编译后被替换成为<code>0x1c</code>，即源操作数为<code>0x1c(%si)</code>。因为默认使用<code>ds</code>寄存器，且此时<code>ds</code>寄存器的值为<code>0x07c0</code>，所以物理地址为<code>0x07c0 &lt;&lt; 4 + si + 0x1c</code>。结合<code>loop</code>和<code>inc</code>指令，我们可以控制<code>si</code>每次加一，循环<code>cx</code>次，达到访问所有数据的目的。</li><li>当使用<code>bp</code>作为变址寄存器时，段寄存器默认为<code>ss（堆栈段寄存器）</code>。暂时没有涉及。</li></ul></li><li><p>基址加变址寻址 基址加变址的寻址方式是，操作数在存储器中，其偏移地址由**基址寄存器<code>（bx或bp）</code> + 变址寄存器<code>（si或di）</code>**形成。基址寄存器若为<code>bx</code>，则默认在段寄存器<code>ds</code>指定的数据段中寻址；若用<code>bp</code>为基地址，则默认在段寄存器<code>ss</code>指定的堆栈段中寻址。两种情况的变址寄存器都用<code>si</code>或<code>di</code>。即<code>ea = bx/bp + si/di</code>。暂时没有涉及。</p></li><li><p>相对基址加变址寻址 与基址加变址寻址类似，只是多加了偏移量。即<code>ea = bx/bp + si/di + 偏移量</code>。暂时没有涉及。</p></li></ol><h4 id="端口寻址" tabindex="-1"><a class="header-anchor" href="#端口寻址" aria-hidden="true">#</a> 端口寻址</h4><p>在<code>8086</code>系统结构中，<code>I/O</code>端口的地址采用独立编址方法，即采用专门的输入/输出指令（<code>in</code>和<code>out</code>）对系统外围的<code>I/O</code>端口进行操作。指令系统中的输入/输出指令对<code>I/O</code>端口的寻址可采用直接寻址或间接寻址两种方式。</p><ol><li><p>直接寻址 <code>I/O</code>端口地址以<code>8</code>位立即数方式在指令中直接给出，例如，输入指令：<code>in N, al</code>。由于只能使用<code>8</code>位立即数，所以该指令只能访问<code>（0~255）</code>范围内的端口。该指令的含义是从地址为<code>N</code>的端口读入一个<code>8</code>位的数据到<code>ax</code>寄存器的低<code>8</code>位<code>al</code>中。</p></li><li><p>间接寻址 <code>I/O</code>端口的间接寻址类似于寄存器间接寻址，<code>16</code>位的<code>I/O</code>端口地址放在<code>dx</code>寄存器中，即通过<code>dx</code>间接寻址，可寻址的端口范围为<code>（0x0000~0xffff）</code>。例如，输出指令：<code>out al, dx</code>。该指令的功能是将<code>al</code>的内容输出到由<code>dx</code>指定的端口中去。<strong>注意，这里用<code>dx</code>作为间接寻址寄存器，在端口的间接寻址指令中是固定的。</strong></p></li></ol><p>我们暂时还没有接触到端口寻址的例子，当以后需要控制光标，访问硬盘的时候就会碰到了，到时在结合代码具体说。</p>',7);function Ie(Ye,je){const c=l("RouterLink");return n(),a("div",null,[r,s("p",null,[e("第"),h,e("行用于将数据段寄存器"),u,e("的值设置为"),_,e("，这是为了访问数据的方便。这里的数据指的是"),v,e("和"),b,e("这两个符号所处位置的数据。为什么是"),g,e("呢？还记得我们在"),d(c,{to:"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/00-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8%E7%9A%84.html"},{default:i(()=>[e("计算机是如何启动的")]),_:1}),e("这篇文章中说的吗。"),x,e("会把我们的程序，也就是磁盘"),y,e("柱面"),w,e("磁道的第"),k,e("个扇区加载到内存"),f,e("处执行。因为"),z,e("是段寄存器，所以在寻址的时候左移"),H,e("位，"),M,e("转换为"),A,e("。具体有什么好处需要结合下面的代码，稍后说。")]),E,B,V,s("p",$,[s("span",R,[s("span",I,[Y,s("span",j,[O,s("span",C,[L,s("span",N,[s("span",D,[s("span",W,[s("span",F,[s("span",S,[s("span",P,[T,s("span",U,[q,s("span",G,[(n(),a("svg",J,Q))])]),X,s("span",Z,[ss,s("span",es,[(n(),a("svg",ns,os))])]),cs]),ts]),ls])])]),ds,s("span",is,[s("span",ps,[s("span",ms,[s("span",rs,[s("span",hs,[us,s("span",_s,[vs,s("span",bs,[(n(),a("svg",gs,ys))])]),ws,s("span",ks,[fs,s("span",zs,[(n(),a("svg",Hs,As))])]),Es]),Bs]),Vs])])])]),$s,Rs,Is]),s("span",Ys,[js,s("span",Os,[s("span",Cs,[s("span",Ls,[s("span",Ns,[s("span",Ds,[s("span",Ws,[Fs,s("span",Ss,[Ps,s("span",Ts,[(n(),a("svg",Us,Gs))])]),Js,s("span",Ks,[Qs,s("span",Xs,[(n(),a("svg",Zs,ee))])]),ne]),ae]),oe])])]),ce,s("span",te,[s("span",le,[s("span",de,[s("span",ie,[s("span",pe,[me,s("span",re,[he,s("span",ue,[(n(),a("svg",_e,be))])]),ge,s("span",xe,[ye,s("span",we,[(n(),a("svg",ke,ze))])]),He]),Me]),Ae])])])]),Ee,Be,Ve]),$e])])])]),Re])}const Le=t(m,[["render",Ie],["__file","02-指令的寻址方式.html.vue"]]);export{Le as default};
