const e=JSON.parse('{"key":"v-e5c50684","path":"/series/spring-boot/Spring%E4%B8%AD%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html","title":"Spring 中的控制反转和依赖注入","lang":"zh-CN","frontmatter":{"title":"Spring 中的控制反转和依赖注入","date":"2021-08-26T08:19:37.000Z","tag":["spring","spring boot","IoC","DI","控制反转","依赖注入"],"category":["spring boot"],"description":"说明：控制反转和依赖注入是很简单的两个概念，如果你看了很多文章还没有搞明白那说明写那些文章的人也是个半吊子。 概览 今天简单说一下 IoC (Inversion of Control) 和 DI (Dependency Injection)的概念，同时看看其在 Spring framework 中的实现。 啥是控制反转 控制反转（英语：Inversion of Control，缩写为 IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称 DI），还有一种方式叫“依赖查找”（Dependency Lookup）。see wikipedia。","head":[["meta",{"property":"og:url","content":"https://kviccn.github.io/series/spring-boot/Spring%E4%B8%AD%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"未央"}],["meta",{"property":"og:title","content":"Spring 中的控制反转和依赖注入"}],["meta",{"property":"og:description","content":"说明：控制反转和依赖注入是很简单的两个概念，如果你看了很多文章还没有搞明白那说明写那些文章的人也是个半吊子。 概览 今天简单说一下 IoC (Inversion of Control) 和 DI (Dependency Injection)的概念，同时看看其在 Spring framework 中的实现。 啥是控制反转 控制反转（英语：Inversion of Control，缩写为 IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称 DI），还有一种方式叫“依赖查找”（Dependency Lookup）。see wikipedia。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-04T14:47:29.000Z"}],["meta",{"property":"article:author","content":"未央"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"spring boot"}],["meta",{"property":"article:tag","content":"IoC"}],["meta",{"property":"article:tag","content":"DI"}],["meta",{"property":"article:tag","content":"控制反转"}],["meta",{"property":"article:tag","content":"依赖注入"}],["meta",{"property":"article:published_time","content":"2021-08-26T08:19:37.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-04T14:47:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 中的控制反转和依赖注入\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-26T08:19:37.000Z\\",\\"dateModified\\":\\"2023-06-04T14:47:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"未央\\",\\"url\\":\\"https://kviccn.github.io\\"}]}"]]},"headers":[{"level":2,"title":"概览","slug":"概览","link":"#概览","children":[]},{"level":2,"title":"啥是控制反转","slug":"啥是控制反转","link":"#啥是控制反转","children":[]},{"level":2,"title":"Spring IoC Container","slug":"spring-ioc-container","link":"#spring-ioc-container","children":[]},{"level":2,"title":"基于构造函数的依赖注入","slug":"基于构造函数的依赖注入","link":"#基于构造函数的依赖注入","children":[]},{"level":2,"title":"基于 Setter 的依赖注入","slug":"基于-setter-的依赖注入","link":"#基于-setter-的依赖注入","children":[]},{"level":2,"title":"基于字段的依赖注入","slug":"基于字段的依赖注入","link":"#基于字段的依赖注入","children":[]},{"level":2,"title":"自动装配依赖关系","slug":"自动装配依赖关系","link":"#自动装配依赖关系","children":[]},{"level":2,"title":"延迟初始化 Beans","slug":"延迟初始化-beans","link":"#延迟初始化-beans","children":[]}],"git":{"createdTime":1685890049000,"updatedTime":1685890049000,"contributors":[{"name":"kviccn","email":"kviccn@outlook.com","commits":1}]},"readingTime":{"minutes":6.72,"words":2017},"filePathRelative":"series/spring-boot/Spring中的控制反转和依赖注入.md","localizedDate":"2021年8月26日","excerpt":"<p>说明：控制反转和依赖注入是很简单的两个概念，如果你看了很多文章还没有搞明白那说明写那些文章的人也是个半吊子。</p>\\n<h2> 概览</h2>\\n<p>今天简单说一下 IoC (Inversion of Control) 和 DI (Dependency Injection)的概念，同时看看其在 Spring framework 中的实现。</p>\\n<h2> 啥是控制反转</h2>\\n<p><code>控制反转</code>（英语：Inversion of Control，缩写为 <code>IoC</code>），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做<code>依赖注入</code>（Dependency Injection，简称 DI），还有一种方式叫“依赖查找”（Dependency Lookup）。see <a href=\\"https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">wikipedia</a>。</p>","autoDesc":true}');export{e as data};
