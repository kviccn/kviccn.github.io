const e=JSON.parse('{"key":"v-25a36959","path":"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/08-%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92.html","title":"汇编语言一发入魂 0x08 - 过程调用中的参数传递","lang":"zh-CN","frontmatter":{"title":"汇编语言一发入魂 0x08 - 过程调用中的参数传递","shortTitle":"过程调用中的参数传递","date":"2020-03-21T05:31:27.000Z","tag":["过程调用"],"category":["汇编语言"],"description":"通常我们封装过程是为了方便调用，避免写重复的代码。过程调用时通常需要通过传递参数来控制过程的执行，今天我们来讲一讲参数传递时的一些规范和需要注意的地方。 先来看一个例子： 示例一 .code16 movw $0x7c00, %sp callw set_cursor jmp . # 目的: 设置光标位置为 0 # # 输入: 无 # # 输出: 无 set_cursor: movw $0x3d4, %dx movb $0xe, %al outb %al, %dx movw $0x3d5, %dx movb $0, %al outb %al, %dx movw $0x3d4, %dx movb $0xf, %al outb %al, %dx movw $0x3d5, %dx movb $0, %al outb %al, %dx retw .org 510 .word 0xAA55","head":[["meta",{"property":"og:url","content":"https://kviccn.github.io/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/08-%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92.html"}],["meta",{"property":"og:site_name","content":"未央"}],["meta",{"property":"og:title","content":"汇编语言一发入魂 0x08 - 过程调用中的参数传递"}],["meta",{"property":"og:description","content":"通常我们封装过程是为了方便调用，避免写重复的代码。过程调用时通常需要通过传递参数来控制过程的执行，今天我们来讲一讲参数传递时的一些规范和需要注意的地方。 先来看一个例子： 示例一 .code16 movw $0x7c00, %sp callw set_cursor jmp . # 目的: 设置光标位置为 0 # # 输入: 无 # # 输出: 无 set_cursor: movw $0x3d4, %dx movb $0xe, %al outb %al, %dx movw $0x3d5, %dx movb $0, %al outb %al, %dx movw $0x3d4, %dx movb $0xf, %al outb %al, %dx movw $0x3d5, %dx movb $0, %al outb %al, %dx retw .org 510 .word 0xAA55"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://kviccn.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-03T14:00:42.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"汇编语言一发入魂 0x08 - 过程调用中的参数传递"}],["meta",{"property":"article:author","content":"未央"}],["meta",{"property":"article:tag","content":"过程调用"}],["meta",{"property":"article:published_time","content":"2020-03-21T05:31:27.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-03T14:00:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"汇编语言一发入魂 0x08 - 过程调用中的参数传递\\",\\"image\\":[\\"https://kviccn.github.io/\\"],\\"datePublished\\":\\"2020-03-21T05:31:27.000Z\\",\\"dateModified\\":\\"2023-06-03T14:00:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"未央\\",\\"url\\":\\"https://kviccn.github.io\\"}]}"]]},"headers":[{"level":2,"title":"示例一","slug":"示例一","link":"#示例一","children":[]},{"level":2,"title":"示例二","slug":"示例二","link":"#示例二","children":[{"level":3,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":3,"title":"解释","slug":"解释","link":"#解释","children":[]},{"level":3,"title":"调试","slug":"调试","link":"#调试","children":[]}]},{"level":2,"title":"示例三","slug":"示例三","link":"#示例三","children":[{"level":3,"title":"代码","slug":"代码-1","link":"#代码-1","children":[]},{"level":3,"title":"解释","slug":"解释-1","link":"#解释-1","children":[]}]}],"git":{"createdTime":1685800842000,"updatedTime":1685800842000,"contributors":[{"name":"kviccn","email":"kviccn@outlook.com","commits":1}]},"readingTime":{"minutes":6.23,"words":1868},"filePathRelative":"series/汇编语言一发入魂/08-过程调用中的参数传递.md","localizedDate":"2020年3月21日","excerpt":"<p>通常我们封装过程是为了方便调用，避免写重复的代码。过程调用时通常需要通过传递参数来控制过程的执行，今天我们来讲一讲参数传递时的一些规范和需要注意的地方。</p>\\n<p>先来看一个例子：</p>\\n<h2> 示例一</h2>\\n<div class=\\"language-asm line-numbers-mode\\" data-ext=\\"asm\\"><pre class=\\"language-asm\\"><code>.code16\\n\\nmovw $0x7c00, %sp\\n\\ncallw set_cursor\\n\\njmp .\\n\\n# 目的: 设置光标位置为 0\\n#\\n# 输入: 无\\n#\\n# 输出: 无\\nset_cursor:\\n  movw $0x3d4, %dx\\n  movb $0xe, %al\\n  outb %al, %dx\\n\\n  movw $0x3d5, %dx\\n  movb $0, %al\\n  outb %al, %dx\\n\\n  movw $0x3d4, %dx\\n  movb $0xf, %al\\n  outb %al, %dx\\n\\n  movw $0x3d5, %dx\\n  movb $0, %al\\n  outb %al, %dx\\n\\n  retw\\n\\n.org 510\\n.word 0xAA55\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
