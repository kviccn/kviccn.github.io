const e=JSON.parse('{"key":"v-1cd6f31b","path":"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/01-hello-world.html","title":"汇编语言一发入魂 0x01 - Hello World","lang":"zh-CN","frontmatter":{"title":"汇编语言一发入魂 0x01 - Hello World","shortTitle":"Hello World","date":"2020-03-05T08:44:50.000Z","tag":["显卡","显存"],"category":["汇编语言"],"description":"目标：在屏幕上打印出Hello World。 要在屏幕上打印字符就需要对显存进行操作。那么如何操作显存呢？对于汇编语言来说，这个问题的答案是很简单的。如上一篇文章所讲，在计算机启动时，显卡被初始化为文本模式，对应的显存也已经映射到了0xb8000到0xbffff这段物理地址空间。所以直接向这段内存写入数据，屏幕上就能够打印出对应的字符了。那么如何向内存写入数据呢？ 向内存写入数据，首先需要知道内存对应的地址。对于8086处理器来说，内存地址是以段基址:段内偏移的形式给出的。物理内存被划分为逻辑上的段，每个段最长为64KB。这是有历史原因的，8086具有20位的地址线，寻址范围是1MB，但是8086的内部寄存器都是16位的，最多只能访问64KB的内存空间，无法完全利用这巨大的内存，真是太可惜了。天无绝人之路，Intel的那帮巨佬们就想出了一个巧（鸡）妙（贼）的办法。16位的寄存器左移4位不就是20位了吗？理想很丰满，但是这里有一个问题。因为采用了左移4位的方法，所以无论地址是多少，最终计算得到的地址都是16字节对齐的。举个栗子，0x1234这个地址，左移4位之后就变成了0x12340，同理，0x1235对应0x12350，0x12340到0x12350之间的16个字节是没法访问到的。这个就很好解决了，把0x1234看作一个段，这样的话再加一个偏移量就可以访问到刚才无法访问到的空间了。栗如要访问0x1234f这个位置，那么给个0xf的偏移量就可以了。说干就干，于是他们马上设计了一个计算物理地址的电路，做的运算就是从段寄存器里取出来段地址，左移4位，然后在加上一个16位的偏移地址，形成20位的物理地址。这个电路俗称地址加法器。","head":[["meta",{"property":"og:url","content":"https://kviccn.github.io/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/01-hello-world.html"}],["meta",{"property":"og:site_name","content":"未央"}],["meta",{"property":"og:title","content":"汇编语言一发入魂 0x01 - Hello World"}],["meta",{"property":"og:description","content":"目标：在屏幕上打印出Hello World。 要在屏幕上打印字符就需要对显存进行操作。那么如何操作显存呢？对于汇编语言来说，这个问题的答案是很简单的。如上一篇文章所讲，在计算机启动时，显卡被初始化为文本模式，对应的显存也已经映射到了0xb8000到0xbffff这段物理地址空间。所以直接向这段内存写入数据，屏幕上就能够打印出对应的字符了。那么如何向内存写入数据呢？ 向内存写入数据，首先需要知道内存对应的地址。对于8086处理器来说，内存地址是以段基址:段内偏移的形式给出的。物理内存被划分为逻辑上的段，每个段最长为64KB。这是有历史原因的，8086具有20位的地址线，寻址范围是1MB，但是8086的内部寄存器都是16位的，最多只能访问64KB的内存空间，无法完全利用这巨大的内存，真是太可惜了。天无绝人之路，Intel的那帮巨佬们就想出了一个巧（鸡）妙（贼）的办法。16位的寄存器左移4位不就是20位了吗？理想很丰满，但是这里有一个问题。因为采用了左移4位的方法，所以无论地址是多少，最终计算得到的地址都是16字节对齐的。举个栗子，0x1234这个地址，左移4位之后就变成了0x12340，同理，0x1235对应0x12350，0x12340到0x12350之间的16个字节是没法访问到的。这个就很好解决了，把0x1234看作一个段，这样的话再加一个偏移量就可以访问到刚才无法访问到的空间了。栗如要访问0x1234f这个位置，那么给个0xf的偏移量就可以了。说干就干，于是他们马上设计了一个计算物理地址的电路，做的运算就是从段寄存器里取出来段地址，左移4位，然后在加上一个16位的偏移地址，形成20位的物理地址。这个电路俗称地址加法器。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://kviccn.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-04T14:47:29.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"汇编语言一发入魂 0x01 - Hello World"}],["meta",{"property":"article:author","content":"未央"}],["meta",{"property":"article:tag","content":"显卡"}],["meta",{"property":"article:tag","content":"显存"}],["meta",{"property":"article:published_time","content":"2020-03-05T08:44:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-04T14:47:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"汇编语言一发入魂 0x01 - Hello World\\",\\"image\\":[\\"https://kviccn.github.io/\\"],\\"datePublished\\":\\"2020-03-05T08:44:50.000Z\\",\\"dateModified\\":\\"2023-06-04T14:47:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"未央\\",\\"url\\":\\"https://kviccn.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1685890049000,"updatedTime":1685890049000,"contributors":[{"name":"kviccn","email":"kviccn@outlook.com","commits":1}]},"readingTime":{"minutes":12.81,"words":3843},"filePathRelative":"series/汇编语言一发入魂/01-hello-world.md","localizedDate":"2020年3月5日","excerpt":"<p>目标：在屏幕上打印出<code>Hello World</code>。</p>\\n<p>要在屏幕上打印字符就需要对显存进行操作。那么如何操作显存呢？对于汇编语言来说，这个问题的答案是很简单的。如上一篇文章所讲，在计算机启动时，显卡被初始化为文本模式，对应的显存也已经映射到了<code>0xb8000</code>到<code>0xbffff</code>这段物理地址空间。所以直接向这段内存写入数据，屏幕上就能够打印出对应的字符了。那么如何向内存写入数据呢？</p>\\n<p>向内存写入数据，首先需要知道内存对应的地址。对于<code>8086</code>处理器来说，内存地址是以<code>段基址</code>:<code>段内偏移</code>的形式给出的。物理内存被划分为逻辑上的段，每个段最长为<code>64KB</code>。这是有历史原因的，<code>8086</code>具有<code>20</code>位的地址线，寻址范围是<code>1MB</code>，但是<code>8086</code>的内部寄存器都是<code>16</code>位的，最多只能访问<code>64KB</code>的内存空间，无法完全利用这巨大的内存，真是太可惜了。天无绝人之路，<code>Intel</code>的那帮巨佬们就想出了一个巧（鸡）妙（贼）的办法。<code>16</code>位的寄存器左移<code>4</code>位不就是<code>20</code>位了吗？理想很丰满，但是这里有一个问题。因为采用了左移<code>4</code>位的方法，所以无论地址是多少，最终计算得到的地址都是<code>16</code>字节对齐的。举个栗子，<code>0x1234</code>这个地址，左移<code>4</code>位之后就变成了<code>0x12340</code>，同理，<code>0x1235</code>对应<code>0x12350</code>，<code>0x12340</code>到<code>0x12350</code>之间的<code>16</code>个字节是没法访问到的。这个就很好解决了，把<code>0x1234</code>看作一个段，这样的话再加一个偏移量就可以访问到刚才无法访问到的空间了。栗如要访问<code>0x1234f</code>这个位置，那么给个<code>0xf</code>的偏移量就可以了。说干就干，于是他们马上设计了一个计算物理地址的电路，做的运算就是从段寄存器里取出来段地址，左移<code>4</code>位，然后在加上一个<code>16</code>位的偏移地址，形成<code>20</code>位的物理地址。这个电路俗称地址加法器。</p>","autoDesc":true}');export{e as data};
