import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as u,b as s,d as n,e as a,w as e,a as p}from"./app-a3b1dd03.js";const r="/assets/hello-world-829c7d77.png",d="/assets/lf-bs-346f6c74.png",k="/assets/scroll-c3fef224.png",v="/assets/printint-222dd297.png",b="/assets/cprintf-795d8295.png",m={},w=p("<p>今天的目标：写个“显卡驱动”，实际上就是实现一个<code>printf</code>函数。在平时的开发中，我们可以使用标准库给我们提供的<code>printf</code>进行打印输出，不得不说，这个函数应该是最简洁有力的调试工具。但是我们现在要开发操作系统，完全从零开始，这就意味着，我们必须自己实现一个<code>printf</code>函数，方便我们查看各种信息和状态。</p><p>在上一篇文章中我们已经抽取出了一个<code>cprintf</code>函数用于打印输出，但这还是太简陋了，今天我们给它加点功能，以满足我们的需求。</p><p>要实现的功能有两点：</p><ol><li>显示字符</li><li>控制光标</li></ol>",4),g=p('<p>显示字符之前我们已经讲过了，简单说就是向显存映射的内存输出<code>ASCII</code>码及字符显示属性就行了，所以今天我们先从控制光标开始讲起。</p><h2 id="控制光标" tabindex="-1"><a class="header-anchor" href="#控制光标" aria-hidden="true">#</a> 控制光标</h2><p>原理：<code>标准 VGA 文本模式</code>下光标位置保存在显卡内部的两个光标寄存器中，每个寄存器都是 <code>8</code> 位的，合起来形成一个 <code>16</code> 位的数值。这两个寄存器在显卡内部的索引值分别是 <code>14(0x0e)</code>和 <code>15(0x0f)</code>，分别用于提供光标位置的高 <code>8</code> 位和低 <code>8</code> 位。在读写这两个寄存器之前需要先通过索引寄存器指定它们的索引，索引寄存器的端口号是 <code>0x3d4</code>。指定了寄存器之后，就可以通过数据端口 <code>0x3d5</code> 来进行读写了。</p>',3),f=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">uint8_t</span>
<span class="token function">inb</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> port<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">uint8_t</span> data<span class="token punctuation">;</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">&quot;inb %1,%0&quot;</span>
               <span class="token operator">:</span> <span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
               <span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span>
<span class="token function">outb</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> port<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">&quot;outb %0,%1&quot;</span>
               <span class="token operator">:</span>
               <span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取当前光标位置的步骤如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRTPORT</span> <span class="token expression"><span class="token number">0x3d4</span></span></span>

<span class="token keyword">int</span> pos<span class="token punctuation">;</span>

<span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pos <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pos <span class="token operator">|=</span> <span class="token function">inb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先向索引端口<code>0x3d4</code>写入索引值<code>14</code>，通过数据端口<code>0x3d5</code>读取出光标位置的高<code>8</code>位，再向索引端口<code>0x3d4</code>写入索引值<code>15</code>，通过数据端口<code>0x3d5</code>读取出光标位置的低<code>8</code>位。</p><p>写入光标位置的步骤如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依次写入光标位置的高<code>8</code>位和低<code>8</code>位。</p><p>完整的输出一个字符并移动光标位置的过程如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRTPORT</span> <span class="token expression"><span class="token number">0x3d4</span></span></span>
<span class="token keyword">static</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span>crt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xb8000</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">cgaputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> pos<span class="token punctuation">;</span>

  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pos <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pos <span class="token operator">|=</span> <span class="token function">inb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  crt<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x0700</span><span class="token punctuation">;</span>

  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  crt<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span> <span class="token operator">|</span> <span class="token number">0x0700</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第<code>13</code>行用于将字符显示属性设置为黑底白字<code>(0x07)</code>。</p><p>测试一下效果：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>message <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">kernel_main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> message<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">cgaputc</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><figure><img src="`+r+'" alt="hello-world" tabindex="0" loading="lazy"><figcaption>hello-world</figcaption></figure><p>可以看到光标位置已经在字符串最后了。</p>',15),h={href:"https://github.com/kviccn/lowbos/tree/master/src/0x01/a",target:"_blank",rel:"noopener noreferrer"},H=p(`<p>接下来我们给字符的显示添加上更强大的功能。</p><h2 id="显示字符" tabindex="-1"><a class="header-anchor" href="#显示字符" aria-hidden="true">#</a> 显示字符</h2><h3 id="增加对回车-退格的支持" tabindex="-1"><a class="header-anchor" href="#增加对回车-退格的支持" aria-hidden="true">#</a> 增加对回车，退格的支持</h3><p>在<code>ASCII</code>码中，<code>\\b</code>表示退格，<code>\\n</code>表示换行，<code>\\r</code>表示回车，即回到行首，但具体这些字符的含义还是需要我们去赋予它。例如，在<code>Unix</code>中，每行以<code>\\n</code>结尾；在<code>Windows</code>中，每行以<code>\\r\\n</code>结尾；在<code>Mac</code>中，每行以<code>\\r</code>结尾。</p><p>这里我们以<code>\\n</code>表示每行的结尾来进行编码。</p><p>对应的代码也很简单，当遇到<code>\\n</code>时，将光标位置移动到下一行开头处；当遇到<code>\\b</code>时，将光标向后移动一格。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
  pos <span class="token operator">+=</span> <span class="token number">80</span> <span class="token operator">-</span> pos <span class="token operator">%</span> <span class="token number">80</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\b&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token operator">--</span>pos<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">cgaputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> pos<span class="token punctuation">;</span>

  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pos <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pos <span class="token operator">|=</span> <span class="token function">inb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
    pos <span class="token operator">+=</span> <span class="token number">80</span> <span class="token operator">-</span> pos <span class="token operator">%</span> <span class="token number">80</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\b&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token operator">--</span>pos<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
    crt<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x0700</span><span class="token punctuation">;</span>

  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  crt<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span> <span class="token operator">|</span> <span class="token number">0x0700</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用字符串：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>message <span class="token operator">=</span> <span class="token string">&quot;Hello, world!\\nabc\\b&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果：</p><figure><img src="`+d+'" alt="lf-bs" tabindex="0" loading="lazy"><figcaption>lf-bs</figcaption></figure><p>可以看到<code>ab</code>输出到了下一行，<code>c</code>被退格清除了。</p>',14),y={href:"https://github.com/kviccn/lowbos/tree/master/src/0x01/b",target:"_blank",rel:"noopener noreferrer"},x=p(`<h3 id="屏幕滚动" tabindex="-1"><a class="header-anchor" href="#屏幕滚动" aria-hidden="true">#</a> 屏幕滚动</h3><p>到目前为止<code>cgaputc</code>函数还有一个比较大的缺陷，就是当输出字符的位置超出<code>2000</code>之后，即超出屏幕之后的情况我们还没有处理。</p><p>现在我们就来处理这个情况，处理方法很简单，即当光标位置超过<code>2000</code>之后，将所有的字符整体向上移动一行。</p><p>主要代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    crt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> crt<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    crt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0700</span> <span class="token operator">|</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
  pos <span class="token operator">-=</span> <span class="token number">80</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">cgaputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> pos<span class="token punctuation">;</span>

  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pos <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pos <span class="token operator">|=</span> <span class="token function">inb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
    pos <span class="token operator">+=</span> <span class="token number">80</span> <span class="token operator">-</span> pos <span class="token operator">%</span> <span class="token number">80</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\b&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token operator">--</span>pos<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
    crt<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x0700</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
      crt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> crt<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
      crt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0700</span> <span class="token operator">|</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
    pos <span class="token operator">-=</span> <span class="token number">80</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>CRTPORT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  crt<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span> <span class="token operator">|</span> <span class="token number">0x0700</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用字符串：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>message <span class="token operator">=</span> <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span>
                <span class="token string">&quot;Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><figure><img src="`+k+'" alt="scroll" tabindex="0" loading="lazy"><figcaption>scroll</figcaption></figure>',11),_={href:"https://github.com/kviccn/lowbos/tree/master/src/0x01/c",target:"_blank",rel:"noopener noreferrer"},q=s("h3",{id:"打印数字",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#打印数字","aria-hidden":"true"},"#"),n(" 打印数字")],-1),R={href:"https://github.com/mit-pdos/xv6-public/blob/master/console.c#L28",target:"_blank",rel:"noopener noreferrer"},T=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">printint</span><span class="token punctuation">(</span><span class="token keyword">int</span> xx<span class="token punctuation">,</span> <span class="token keyword">int</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> sign<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">char</span> digits<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;0123456789abcdef&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>sign <span class="token operator">=</span> xx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> <span class="token operator">-</span>xx<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    x <span class="token operator">=</span> xx<span class="token punctuation">;</span>

  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span>
  <span class="token punctuation">{</span>
    buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> digits<span class="token punctuation">[</span>x <span class="token operator">%</span> base<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">/=</span> base<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>sign<span class="token punctuation">)</span>
    buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">consputc</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数巧妙的地方有两处：</p><ol><li><p>利用了分解数字时余数与数组索引之间的关系</p></li><li><p>使用栈来保存分解的各个位</p></li></ol><p><code>do ... while ...</code>循环根据基数<code>base</code>依次分解各位，并根据余数和数组索引的关系找到数字对应的字符并入栈。随后判断是否是负数，如果是，则将<code>&#39;-&#39;</code>号入栈。最后，将栈中字符依次出栈即可。</p><p>测试代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printint</span><span class="token punctuation">(</span><span class="token number">9527</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9527</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printint</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><figure><img src="`+v+'" alt="printint" tabindex="0" loading="lazy"><figcaption>printint</figcaption></figure>',8),C={href:"https://github.com/kviccn/lowbos/tree/master/src/0x01/d",target:"_blank",rel:"noopener noreferrer"},E=p(`<h3 id="格式化输出" tabindex="-1"><a class="header-anchor" href="#格式化输出" aria-hidden="true">#</a> 格式化输出</h3><p>有了上面这些基础函数就可以很方便的构造格式化输出函数了。</p><p>直接看代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">uint32_t</span> <span class="token operator">*</span>argp<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>
  <span class="token keyword">int</span> c<span class="token punctuation">;</span>

  argp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> fmt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">consputc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    c <span class="token operator">=</span> fmt<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token char">&#39;d&#39;</span><span class="token operator">:</span>
      <span class="token function">printint</span><span class="token punctuation">(</span><span class="token operator">*</span>argp<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token char">&#39;x&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token char">&#39;p&#39;</span><span class="token operator">:</span>
      <span class="token function">printint</span><span class="token punctuation">(</span><span class="token operator">*</span>argp<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token char">&#39;s&#39;</span><span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>argp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        s <span class="token operator">=</span> <span class="token string">&quot;(null)&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">consputc</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token char">&#39;%&#39;</span><span class="token operator">:</span>
      <span class="token function">consputc</span><span class="token punctuation">(</span><span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token function">consputc</span><span class="token punctuation">(</span><span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">consputc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),O={href:"https://github.com/mit-pdos/xv6-public/blob/master/console.c#L55",target:"_blank",rel:"noopener noreferrer"},P=p(`<p>函数主体是一个<code>for</code>循环套了一个<code>switch</code>，依次解析<code>fmt</code>字符串中的每个字符，决定以何种方式（<code>printint</code>还是<code>consputc</code>）输出占位符所代表的数据。</p><p><code>consputc</code>是对<code>cgaputc</code>的包装：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">consputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">cgaputc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>xv6</code>中同时将字符输出到了<code>cga</code>和<code>串口</code>，所以将<code>cgaputc</code>和用于串口输出的<code>uartputc</code>进行了包装，原函数大概是下面这个样子：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">consputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> BACKSPACE<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">uartputc</span><span class="token punctuation">(</span><span class="token char">&#39;\\b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">uartputc</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">uartputc</span><span class="token punctuation">(</span><span class="token char">&#39;\\b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
    <span class="token function">uartputc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">cgaputc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">&quot;LowbOS @%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><figure><img src="`+b+'" alt="cprintf" tabindex="0" loading="lazy"><figcaption>cprintf</figcaption></figure>',9),A={href:"https://github.com/kviccn/lowbos/tree/master/src/0x01/e",target:"_blank",rel:"noopener noreferrer"},B=s("p",null,"（完）",-1);function F(D,I){const t=c("RouterLink"),o=c("ExternalLinkIcon");return i(),u("div",null,[w,s("p",null,[n("关于这两个主题我在之前的"),a(t,{to:"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/"},{default:e(()=>[n("汇编语言系列")]),_:1}),n("中分别有过介绍，不熟悉的朋友可以参考：")]),s("ul",null,[s("li",null,[a(t,{to:"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/01-hello-world.html"},{default:e(()=>[n("显存操作")]),_:1})]),s("li",null,[a(t,{to:"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/05-IO%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF.html"},{default:e(()=>[n("端口操作")]),_:1})])]),g,s("p",null,[n("由于 C 语言无法操作端口，所以我们先使用"),a(t,{to:"/posts/C%E8%AF%AD%E8%A8%80%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96.html"},{default:e(()=>[n("内联汇编")]),_:1}),n("写两个用于操作端口的函数，如下：")]),f,s("p",null,[n("完整代码戳"),s("a",h,[n("这里"),a(o)]),n("。")]),H,s("p",null,[n("完整代码戳"),s("a",y,[n("这里"),a(o)]),n("。")]),x,s("p",null,[n("完整代码戳"),s("a",_,[n("这里"),a(o)]),n("。")]),q,s("p",null,[n("打印数字的函数我是直接从 xv6"),s("a",R,[n("源码"),a(o)]),n("里抄来的，如下：")]),T,s("p",null,[n("完整代码戳"),s("a",C,[n("这里"),a(o)]),n("。")]),E,s("p",null,[n("也是我直接"),s("a",O,[n("抄过来"),a(o)]),n("的。")]),s("p",null,[n("这个函数略长但是不复杂，主要就是可变参数和对格式化字符串的解析。关于可变参数我之前写过一篇文章，戳"),a(t,{to:"/posts/2021/09/c-%E8%AF%AD%E8%A8%80%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"},{default:e(()=>[n("这里")]),_:1}),n("。")]),P,s("p",null,[n("完整代码戳"),s("a",A,[n("这里"),a(o)]),n("。")]),B])}const S=l(m,[["render",F],["__file","0x03-显卡驱动.html.vue"]]);export{S as default};
