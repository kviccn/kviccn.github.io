import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,a as p}from"./app-819cf889.js";const t="/assets/硬件加电后寄存器初始值-d561b4f0.png",c="/assets/内存使用区域图-751c389b.png",o="/assets/Flash-ROM-BIOS位置和复制映射区域-ee3d8676.png",i="/assets/boot-disk-0x00-34b76b59.png",l="/assets/edit-boot-disk-0262d518.jpg",n="/assets/boot-disk-0x01-38531afa.jpg",u={},d=p('<p>这个系列的首篇老李打算为大家介绍一下计算机是如何启动的。我的设想是把我们写出来的程序直接放在<code>CPU</code>上去跑，因为汇编语言就是和硬件打交道的语言，如果在我们的程序和硬件之间隔一层操作系统的话，总感觉没那么舒服。结合这篇文章的知识，我们就可以让硬件直接加载我们自己的程序并执行。</p><p>通常计算机的启动方式分为两种：传统的<code>BIOS-MBR</code>启动模式和新的<code>UEFI-GPT</code>启动模式。在这里我们介绍传统的<code>BIOS-MBR</code>启动模式。</p><p>先来看一下按下计算机的电源或者复位键之后<code>CPU</code>中寄存器的初始值。</p><figure><img src="'+t+'" alt="硬件加电后寄存器初始值" tabindex="0" loading="lazy"><figcaption>硬件加电后寄存器初始值</figcaption></figure><p>我们重点关注一下<code>cs</code>寄存器和<code>eip</code>寄存器，这两个寄存器决定了<code>CPU</code>执行哪里的代码，地址计算的方式为：<code>EA = Base + EIP</code>。</p><p>由上图的寄存器状态可知<code>CPU</code>在加电后首先会去<code>0xFFFF0000 + 0x0000FFF0</code>处即<code>0xFFFFFFF0</code>处执行第一条指令。下面我们看一看计算机加电后的内存状态是怎样的。</p><p>当计算机上电初始化时，物理内存被设置成从地址<code>0</code>开始的连续区域。除了地址从<code>0xA0000</code>到<code>0xFFFFF</code>(<code>640K</code>到<code>1M</code>共<code>384K</code>)和<code>0xFFFE0000</code>到<code>0xFFFFFFFF</code>(<code>4G</code>处的最后<code>64K</code>)范围以外的所有内存都可用作系统内存。这两个特定范围被用于<code>I/O</code>设备和<code>BIOS</code>程序。<code>640K</code>--<code>1M</code>之间的<code>384K</code>用作下图中指明的用途。其中地址<code>0xA0000</code>开始的<code>128K</code>用作显存缓冲区，随后部分用于其他控制卡的<code>ROM BIOS</code>或其映射区域，而<code>0xF0000</code>到<code>1M</code>范围用于高端系统<code>ROM BIOS</code>的映射区。</p><figure><img src="'+c+'" alt="内存使用区域图" tabindex="0" loading="lazy"><figcaption>内存使用区域图</figcaption></figure><p><code>ROM-BIOS</code>是一段固化在主板上的程序，这段程序在计算机加电后会自动被加载到内存中，主要用于计算机的自检和初始化。根据上面的分析可知<code>0xFFFFFFF0</code>正好处于这段程序中，位于<code>4G</code>空间最后一个<code>64K</code>的最后<code>16</code>字节处。这里会被安排一条<code>jmp</code>指令，用于跳转到<code>BIOS</code>代码中<code>64KB</code>范围内的某一条指令开始执行。<code>BIOS</code>在执行了一系列硬件检测和初始化操作之后，会把与原来<code>PC</code>机兼容的<code>64KB BIOS</code>代码和数据复制到内存低端<code>1M</code>末端的<code>64K</code>处，然后跳转到这个地方并让<code>CPU</code>运行在实地址模式下。过程如下图所示。</p><figure><img src="'+o+`" alt="Flash-ROM-BIOS位置和复制映射区域" tabindex="0" loading="lazy"><figcaption>Flash-ROM-BIOS位置和复制映射区域</figcaption></figure><p>最后，如果硬盘或软盘是首选的启动设备的话，<code>BIOS</code>会读取其中的<code>0</code>柱面<code>0</code>磁道<code>1</code>扇区，并检测是否为可引导设备，如果是的话，这个扇区将被加载到内存<code>0x7c00</code>处并被执行。可引导的标志是扇区的最后两个字节为<code>0x55</code>和<code>0xAA</code>。</p><p>在这篇文章中我们先不写程序，但我们可以做一个小实验验证一下上面学到的这些知识。</p><p>实验环境如下：</p><ul><li>系统：<code>Ubuntu 18.04.4 LTS</code></li><li>虚拟机：<code>QEMU emulator version 2.11.1(Debian 1:2.11+dfsg-1ubuntu7.21)</code></li><li>二进制编辑器：<code>hexedit</code></li></ul><p>我们将用虚拟机代替物理机，用磁盘映像文件代替真实的硬盘。因为实验中我们需要操作主引导记录，主引导记录对于操作系统是非常重要的，如果操作不慎将会导操作系统无法启动。</p><p>首先我们创建一个空的磁盘映像文件，使用<code>dd</code>命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>disk.img <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面我们创建了一个<code>100KB</code>大的硬盘映像，好像有点小，但是对于我们的实验来说足够了。</p><p>查看一下硬盘映像中的内容。因为我们在创建时输入使用的是产生<code>0</code>的设备文件，所以现在的这块&quot;硬盘&quot;中的内容全部为零，为了加深印象我们还是查看一下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ xxd <span class="token parameter variable">-a</span> disk.img 
00000000: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
*
00018ff0: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>disk.img</code>中的内容全为零。</p><p>下面我们试试看如果直接用虚拟机去启动这块硬盘的话会发生什么。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-i386 disk.img
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虚拟机启动后结果如下，<code>Boot failed: not a bootable disk</code>。提示磁盘不可引导。</p><figure><img src="`+i+`" alt="引导不可引导的硬盘" tabindex="0" loading="lazy"><figcaption>引导不可引导的硬盘</figcaption></figure><p>现在我们将<code>disk.img</code>文件的第<code>510</code>、<code>511</code>字节改为<code>0x55</code>、<code>0xAA</code>，然后重新启动看看结果。</p><p>关于如何直接修改这两个字节，如果有二进制文件编辑器的话会简单很多。当然如果没有的话我们可以自己写一个工具来完成这个目标。</p><p>先使用工具来直接对这两个字节进行编辑，我们用到的工具是<code>hexedit</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexedit disk.img
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过键盘方向键定位到位置<code>0x1FE</code>即十进制<code>510</code>这个位置，将连续的两个字节分别修改为<code>0x55</code>、<code>0xAA</code>，<code>Ctrl + X</code>保存退出。</p><figure><img src="`+l+`" alt="编辑硬盘映像文件" tabindex="0" loading="lazy"><figcaption>编辑硬盘映像文件</figcaption></figure><p>再次查看，可以看出已经有了我们需要的可引导标记。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ xxd <span class="token parameter variable">-a</span> disk.img 
00000000: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
*
000001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>U.
00000200: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
*
00018ff0: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再次尝试启动虚拟机，看看这次的结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-i386 disk.img
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+n+`" alt="可引导的硬盘" tabindex="0" loading="lazy"><figcaption>可引导的硬盘</figcaption></figure><p>如我们所愿，虚拟机这次告诉我们已经从硬盘开始引导了。但是我们的硬盘里一行指令也没有，所以现在虚拟机就傻傻的在哪里等着。</p><p>至此我们已经知道了计算机是如何启动的，剩下的内容作为老李赠送给大家的一点小礼物。老李会教大家写一个小工具，用于将主引导记录，也就是磁盘的<code>0</code>柱面<code>0</code>磁道<code>1</code>扇区，对应磁盘映像文件的前<code>512</code>个字节设置为可引导的。</p><p>我们的程序功能很简单：</p><ol><li>读入一个不大于<code>510</code>字节的文件</li><li>将它补齐到<code>510</code>字节</li><li>将第<code>510</code>、<code>511</code>字节(从<code>0</code>开始计数)设置为<code>0x55</code>、<code>0xAA</code></li><li>写入原文件</li></ol><p>程序代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  va_list args<span class="token punctuation">;</span>
  <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">vfprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
  <span class="token class-name">ssize_t</span> size<span class="token punctuation">;</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;usage: ./sign bin_file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;open %s error&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;read %s error&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">510</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;boot block too large: %d bytes (max 510)&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">510</span> <span class="token operator">-</span> size<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    buf<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  buf<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x55</span><span class="token punctuation">;</span>
  buf<span class="token punctuation">[</span><span class="token number">511</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xAA</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;lseek error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">512</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">&quot;write %s error&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序的结构很简单，不多解释了。主逻辑之外封装了一个用于打印错误信息并退出的函数<code>die</code>，这个函数来自<code>linux</code>的源码，功能上没有什么深奥的地方，重点在于它接收可变参数。以后有时间了跟大家介绍一下<code>C</code>语言中可变参数怎么用，下面我们看一下这个工具怎么使用。</p><p>将文件保存为<code>sign.c</code>，编译链接：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> sign
cc     sign.c   <span class="token parameter variable">-o</span> sign
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用<code>make</code>来进行编译链接，可以少敲几个字母。真正执行的命令也在控制台打印出来了。</p><p>创建一个空文件，并查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">touch</span> boot
$ <span class="token function">ls</span> <span class="token parameter variable">-l</span>
总用量 <span class="token number">20</span>
-rw-rw-r-- <span class="token number">1</span> laoli laoli     <span class="token number">0</span> <span class="token number">3</span>月   <span class="token number">4</span> <span class="token number">14</span>:15 boot
-rwxrwxr-x <span class="token number">1</span> laoli laoli <span class="token number">12776</span> <span class="token number">3</span>月   <span class="token number">4</span> <span class="token number">14</span>:14 sign
-rw-rw-r-- <span class="token number">1</span> laoli laoli   <span class="token number">928</span> <span class="token number">3</span>月   <span class="token number">4</span> <span class="token number">14</span>:14 sign.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>boot</code>文件长度为<code>0</code>，内容为空。接下来用我们的工具处理一下这个文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./sign boot
$ <span class="token function">ls</span> <span class="token parameter variable">-l</span>
总用量 <span class="token number">24</span>
-rw-rw-r-- <span class="token number">1</span> laoli laoli   <span class="token number">512</span> <span class="token number">3</span>月   <span class="token number">4</span> <span class="token number">14</span>:16 boot
-rwxrwxr-x <span class="token number">1</span> laoli laoli <span class="token number">12776</span> <span class="token number">3</span>月   <span class="token number">4</span> <span class="token number">14</span>:14 sign
-rw-rw-r-- <span class="token number">1</span> laoli laoli   <span class="token number">928</span> <span class="token number">3</span>月   <span class="token number">4</span> <span class="token number">14</span>:14 sign.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时<code>boot</code>文件的长度已经是<code>512</code>字节了。查看其内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ xxd <span class="token parameter variable">-a</span> boot
00000000: 0000 0000 0000 0000 0000 0000 0000 0000  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
*
000001f0: 0000 0000 0000 0000 0000 0000 0000 55aa  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>U.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用虚拟机从这个磁盘映像文件启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-i386 boot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+n+'" alt="可引导的硬盘" tabindex="0" loading="lazy"><figcaption>可引导的硬盘</figcaption></figure><p>结果和之前使用<code>hexedit</code>手动编辑是一样的，引导成功。</p><p>之所以要教大家自己写一个创建可引导磁盘映像的工具是因为以后我们写的汇编代码需要用到。这篇文章中我们并没有涉及到汇编语言，所以虚拟机启动起来之后我们无法观察到太多的信息。下一篇文章中，老李将正式开始教大家学习汇编语言。加油，奥里给！</p><blockquote><p>文章中部分内容和图片摘录自《Linux 内核完全注释（修正版v5.0）- 赵炯 编著》</p></blockquote>',58),r=[d];function k(v,b){return a(),e("div",null,r)}const f=s(u,[["render",k],["__file","00-计算机是如何启动的.html.vue"]]);export{f as default};
