import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c,b as n,d as s,e as o,a as l}from"./app-9978a549.js";const i={},u=l(`<p><a href="#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81">太长不看，我要代码！</a></p><p>本文不对<code>RSA</code>原理进行详细讲解，只关注于在<code>Java</code>中如何使用。</p><p>网上有很多<code>RSA</code>工具类的 demo，但是没有一个好用的。今天老李抽丝剥茧，手摸手带你打造一款属于自己的至强<code>RSA</code>工具类。</p><p><code>RSA</code>是非对称加密算法，包含由<code>公钥</code>和<code>私钥</code>组成的密钥对，支持<code>公钥加密，私钥解密</code>和<code>私钥加密，公钥解密</code>。</p><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><h3 id="生成密钥对" tabindex="-1"><a class="header-anchor" href="#生成密钥对" aria-hidden="true">#</a> 生成密钥对</h3><p>使用<code>Java</code>提供的<code>KeyPairGenerator</code>类，我们只需提供加密算法的名称并设置密钥长度就可以生成密钥对。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取 RSA 算法的密钥对生成器</span>
<span class="token keyword">var</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置密钥长度</span>
keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们对这段代码进行封装</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RSAUtil</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加密算法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY_ALGORITHM</span> <span class="token operator">=</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 密钥长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token constant">KEY_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了密钥对我们就可以通过公钥或私钥对报文进行加解密了，接下来完成加密方法和解密方法</p><h3 id="实现加解密方法" tabindex="-1"><a class="header-anchor" href="#实现加解密方法" aria-hidden="true">#</a> 实现加解密方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 加密</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解密</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加密和解密方法都是通过<code>Java</code>提供的<code>Cipher</code>类实现的，我们要做的只是根据加密算法获取对应的<code>Cipher</code>实例并初始化，在<code>Cipher::init</code>方法中告知<code>Cipher</code>我们要进行加密操作还是解密操作，通过<code>Cipher</code>类提供的两个常量<code>Cipher.ENCRYPT_MODE</code>和<code>Cipher.DECRYPT_MODE</code>设置。初始化完成后通过<code>Cipher::doFinal</code>方法进行加解密。</p><p>这两个方法除了设置加解密模式的参数（<code>Cipher.ENCRYPT_MODE | Cipher.DECRYPT_MODE</code>）外其他逻辑都是相同的，因此我们对其进行重构，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token keyword">int</span> opmode<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>opmode<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面给出此时工具类的完整代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RSAUtil</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加密算法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY_ALGORITHM</span> <span class="token operator">=</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 密钥长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token constant">KEY_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token keyword">int</span> opmode<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>opmode<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们对生成密钥对的方法和加解密方法进行测试，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPair <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testEncryptByPrivateKeyDecryptByPublicKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 公钥加密私钥解密</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">KeyPair</span> keyPair<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;冰墩墩&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> encryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> decryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后报文：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 私钥加密公钥解密</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testEncryptByPrivateKeyDecryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">KeyPair</span> keyPair<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;雪容融&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> encryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> decryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后报文：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，控制台输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>解密后报文：冰墩墩
解密后报文：雪容融
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>理论上到这里就完了，完美实现<code>RSA</code>加解密。但理论和实践之间还有一道鸿沟需要填补，接下来我们就一步步优化，实现我们的至强<code>RSA</code>工具类。</p><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h2><p><code>KeyPairGenerator</code>生成的密钥对内部使用字节数组保存公钥和私钥，我们需要将公钥和私钥通过<code>base64</code>编码为人类可读的形式以便阅读和存储。下面我们自定义一个类用于保存编码后的公钥和私钥。</p><h3 id="rsakeypair" tabindex="-1"><a class="header-anchor" href="#rsakeypair" aria-hidden="true">#</a> RSAKeyPair</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RSAKeyPair</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Encoder</span> <span class="token class-name">Base64Encoder</span> <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 保存原始的 keyPair</span>
    <span class="token keyword">private</span> <span class="token class-name">KeyPair</span> keyPair<span class="token punctuation">;</span>

    <span class="token comment">// 编码后的公钥</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> publicKey<span class="token punctuation">;</span>

    <span class="token comment">// 编码后的私钥</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">;</span>

    <span class="token comment">// 禁止外部实例化</span>
    <span class="token keyword">private</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 通过 of 静态方法获取 RSAKeyPair 实例</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RSAKeyPair</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">KeyPair</span> keyPair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> rsaKeyPair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        rsaKeyPair<span class="token punctuation">.</span>keyPair <span class="token operator">=</span> keyPair<span class="token punctuation">;</span>
        rsaKeyPair<span class="token punctuation">.</span>publicKey <span class="token operator">=</span> <span class="token class-name">Base64Encoder</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rsaKeyPair<span class="token punctuation">.</span>privateKey <span class="token operator">=</span> <span class="token class-name">Base64Encoder</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> rsaKeyPair<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">KeyPair</span> <span class="token function">getKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> keyPair<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> publicKey<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> privateKey<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n  publicKey: %s%n  privateKey: %s%n&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试一下<code>RSAKeyPair</code>类，一睹密钥对真容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPair <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> rsaKeyPair <span class="token operator">=</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>RSAKeyPair
  publicKey: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCv2jH23VSbsGFKfReQxSxlhPCvPXuLBbDAvYEqKiR+MnxJbcqXwsDIR0tO+Md5/L3zRyodBkr2jULgY21ltIrc30cERjB2KF9vN5h09TJRDobOyjYseXTp2chknRHrpywt+ghSZRs39qJs40VyENTgQ9NBiQXj2ZXucfJ+GFhFrwIDAQAB
  privateKey: MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAK/aMfbdVJuwYUp9F5DFLGWE8K89e4sFsMC9gSoqJH4yfEltypfCwMhHS074x3n8vfNHKh0GSvaNQuBjbWW0itzfRwRGMHYoX283mHT1MlEOhs7KNix5dOnZyGSdEeunLC36CFJlGzf2omzjRXIQ1OBD00GJBePZle5x8n4YWEWvAgMBAAECgYAhOgocyf81l6Mabv5n5UmZOQA9LFHOl9mo4WWpcOMKUUG4oh0YhbzlWss49brDKuU9NWIYr9q0MUbEnSTLhcyC1RZN+GLtIeuQ9ysMbs76oRY0KH8ZQiuGxZV4FX0ZCfrHsdGodDjXxmBOhMOZsvPoncPA0JY/Cy12Sdc1rzzkiQJBANvK11X5BR0HChj+RUeQMHXIqlkkDxOzX7fsR32nf3KEUZBtP27IA9P5f/2yd8zutnCdE67truqwIRFZiB4rDs0CQQDM0kzYDSdOGzQrkHUPvcI9za8LBWKQwue9Vxt4PvoLhOio1rYkAd/IcGKxZEmJZA2iFXDjmmU9CHZLVbhB8W5rAkB5YmLeZjK+vz6CYxsb1LQOuI3rwRBajvvT9bfd2311X0I0g0E/C1Oh4+8dy0yCb2tucjGGsFmj3zXEATA9iQYZAkBRhEVHG30QLe2GhRjB6hD7jffjmAIRgTC//4IUSmQz33LFd6bID+LjoC73UOWfg62VW5kxTIqMTujdtMD/pbn/AkEA10G91iABHviv6zN1OUWdo44LdEVPOrQqBgakQ+UqBCgiHRlOw0tP053ibksA15NbQpQl2k5ORA0xkJZy4rTAXQ<span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们已经有了编码后的可读形式的密钥了，但在程序中我们还是需要原始格式的密钥才能进行操作，所以接下来我们完成密钥的加载方法，即将上述文本格式的密钥还原成程序中使用的格式。</p><h3 id="加载密钥" tabindex="-1"><a class="header-anchor" href="#加载密钥" aria-hidden="true">#</a> 加载密钥</h3><p><code>Java</code>中使用<code>X509EncodedKeySpec</code>类加载公钥，使用<code>PCKS8EncodedKeySpec</code>类加载私钥。对应的加载方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在来重载两个方法，用于直接从<code>base64</code>编码后的密钥加载：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>keyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>keyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时完整的工具类如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RSAUtil</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Decoder</span> <span class="token class-name">Base64Decoder</span> <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 加密算法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY_ALGORITHM</span> <span class="token operator">=</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 密钥长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token constant">KEY_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token keyword">int</span> opmode<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>opmode<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KeyLoader</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>keyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>keyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPair <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> rsaKeyPair <span class="token operator">=</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> publicKey <span class="token operator">=</span> <span class="token class-name">RSAUtil<span class="token punctuation">.</span>KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPublicKey</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token class-name">RSAUtil<span class="token punctuation">.</span>KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPrivateKey</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testEncryptByPrivateKeyDecryptByPublicKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 公钥加密私钥解密</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">,</span> <span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;冰墩墩&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> encryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> decryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> encryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后报文：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 私钥加密公钥解密</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testEncryptByPrivateKeyDecryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">,</span> <span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;雪容融&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> encryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> decryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> encryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后报文：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>解密后报文：冰墩墩
解密后报文：雪容融
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们实现了生成密钥对，加载密钥，加解密报文的方法。此时你可能迫不及待的想找一段报文加密一下，以此检验刚才的劳动成果。</p><p>于是你不知道从哪里复制了这么一段话：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>冰墩墩（英文：Bing Dwen Dwen，汉语拼音：bīng dūn dūn），是2022年北京冬季奥运会的吉祥物。将熊猫形象与富有超能量的冰晶外壳相结合，头部外壳造型取自冰雪运动头盔，装饰彩色光环，整体形象酷似航天员。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并把它粘贴到了你的代码中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPair <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> rsaKeyPair <span class="token operator">=</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> publicKey <span class="token operator">=</span> <span class="token class-name">RSAUtil<span class="token punctuation">.</span>KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPublicKey</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token class-name">RSAUtil<span class="token punctuation">.</span>KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPrivateKey</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 公钥加密私钥解密</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">,</span> <span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;冰墩墩（英文：Bing Dwen Dwen，汉语拼音：bīng dūn dūn），是2022年北京冬季奥运会的吉祥物。将熊猫形象与富有超能量的冰晶外壳相结合，头部外壳造型取自冰雪运动头盔，装饰彩色光环，整体形象酷似航天员。&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> encryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> decryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> encryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后报文：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你满怀期待的运行你的程序时，<code>jvm</code>却毫不留情的给你抛了个异常：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> javax.crypto.IllegalBlockSizeException: Data must not be longer than <span class="token number">117</span> bytes
	at java.base/com.sun.crypto.provider.RSACipher.doFinal<span class="token punctuation">(</span>RSACipher.java:348<span class="token punctuation">)</span>
	at java.base/com.sun.crypto.provider.RSACipher.engineDoFinal<span class="token punctuation">(</span>RSACipher.java:405<span class="token punctuation">)</span>
	at java.base/javax.crypto.Cipher.doFinal<span class="token punctuation">(</span>Cipher.java:2202<span class="token punctuation">)</span>
	at ink.laoli.RSAUtil.doCipher<span class="token punctuation">(</span>RSAUtil.java:32<span class="token punctuation">)</span>
	at ink.laoli.App.testEncryptByPublicKeyDecryptByPrivateKey<span class="token punctuation">(</span>App.java:32<span class="token punctuation">)</span>
	at ink.laoli.App.main<span class="token punctuation">(</span>App.java:25<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过还好，<code>jvm</code>还是给了你一点点提示，<code>Data must not be longer than 117 bytes</code>。这就引出了另一个知识点，让我们接着往下看。</p><h3 id="rsa-算法可以加解密的数据的最大长度" tabindex="-1"><a class="header-anchor" href="#rsa-算法可以加解密的数据的最大长度" aria-hidden="true">#</a> RSA 算法可以加解密的数据的最大长度</h3><p>还记得最开始我们将密钥的长度设置为<code>1024</code>吗？</p><p>对<code>RSA</code>来说，密钥的长度决定了算法可以加解密的数据的长度。例如密钥长度为<code>1024</code>，那最多可以加密的明文长度就是<code>1024/8 = 128</code>字节，这<code>128</code>字节是包含<code>padding</code>在内的。这是因为当明文长度小于可加密的最大长度时需要用<code>padding</code>进行补齐。</p><p>只要用到了<code>padding</code>，就会占用实际的明文的空间。我们一般使用的<code>padding</code>标准有<code>NoPPadding、OAEPPadding、PKCS1Padding</code>等，其中<code>PKCS#1</code>建议的<code>padding</code>就占用了<code>11</code>个字节。所以当密钥长度为<code>1024</code>时，加密的明文的最大长度就是<code>1024/8 - 11 = 117</code>字节。是不是和<code>jvm</code>给你的温馨提示对上了？</p><p>现在我们知道了单次最多只能对<code>KEY_SIZE / 8 - 11</code>字节的明文加密，下面就好办了，只需要将原始的明文按<code>KEY_SIZE / 8 - 11</code>分段加密就行了。</p><p>先定义两个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 单次加密的最大明文长度</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span> <span class="token operator">=</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token punctuation">;</span>

<span class="token comment">// 单次解密的最大密文长度</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_DECRYPT_BLOCK</span> <span class="token operator">=</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来对<code>doCipher</code>方法进行改造，使其支持分段加解密：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token keyword">int</span> opmode<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> maxBlockSize<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>opmode<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> dataLength <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dataLength <span class="token operator">-</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> i <span class="token operator">*</span> maxBlockSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dataLength <span class="token operator">-</span> offset <span class="token operator">&gt;</span> maxBlockSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> maxBlockSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> dataLength <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            result<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>try-with-resources</code>语法进行对资源的释放，通过<code>i</code>和<code>offset</code>配合循环在原始数据上进行分段加解密。</p><p>此时完整的工具类代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RSAUtil</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Decoder</span> <span class="token class-name">Base64Decoder</span> <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 加密算法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY_ALGORITHM</span> <span class="token operator">=</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 密钥长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token comment">// 单次加密的最大明文长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span> <span class="token operator">=</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token punctuation">;</span>

    <span class="token comment">// 单次解密的最大密文长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_DECRYPT_BLOCK</span> <span class="token operator">=</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token constant">KEY_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token keyword">int</span> opmode<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> maxBlockSize<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>opmode<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> dataLength <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dataLength <span class="token operator">-</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> i <span class="token operator">*</span> maxBlockSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataLength <span class="token operator">-</span> offset <span class="token operator">&gt;</span> maxBlockSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> maxBlockSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> dataLength <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                result<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KeyLoader</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>keyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>keyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新测试类如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPair <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> rsaKeyPair <span class="token operator">=</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> publicKey <span class="token operator">=</span> <span class="token class-name">RSAUtil<span class="token punctuation">.</span>KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPublicKey</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token class-name">RSAUtil<span class="token punctuation">.</span>KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPrivateKey</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 公钥加密私钥解密</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">,</span> <span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;冰墩墩（英文：Bing Dwen Dwen，汉语拼音：bīng dūn dūn），是2022年北京冬季奥运会的吉祥物。将熊猫形象与富有超能量的冰晶外壳相结合，头部外壳造型取自冰雪运动头盔，装饰彩色光环，整体形象酷似航天员。&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> encryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token constant">MAX_ENCRYPT_BLOCK</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> decryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token constant">MAX_DECRYPT_BLOCK</span><span class="token punctuation">,</span> encryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后报文：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>解密后报文：冰墩墩（英文：Bing Dwen Dwen，汉语拼音：bīng dūn dūn），是2022年北京冬季奥运会的吉祥物。将熊猫形象与富有超能量的冰晶外壳相结合，头部外壳造型取自冰雪运动头盔，装饰彩色光环，整体形象酷似航天员。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ok，完美完成任意长度数据的加解密！</p><p>关于加解密到这里就可以结束了，但是在实际的开发当中，直接调用<code>doCipher</code>方法还是比较繁琐的，让我们继续添加一些有用的方法以便使用。</p><h3 id="一些有用的方法" tabindex="-1"><a class="header-anchor" href="#一些有用的方法" aria-hidden="true">#</a> 一些有用的方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> publicKey <span class="token operator">=</span> <span class="token class-name">KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPublicKey</span><span class="token punctuation">(</span>publicKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token class-name">KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPrivateKey</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token constant">MAX_DECRYPT_BLOCK</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token class-name">KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPrivateKey</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> publicKey <span class="token operator">=</span> <span class="token class-name">KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPublicKey</span><span class="token punctuation">(</span>publicKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> <span class="token constant">MAX_DECRYPT_BLOCK</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptByPublicKeyToBase64</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Base64Encoder</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decryptBase64TextByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> base64Data<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">,</span> privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptByPrivateKeyToBase64</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Base64Encoder</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decryptBase64TextByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> base64Data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptByPublicKeyToBase64</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Base64Encoder</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法见名知义，不多解释。</p><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPair <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> rsaKeyPair <span class="token operator">=</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testEncryptByPrivateKeyDecryptByPublicKey</span><span class="token punctuation">(</span>rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rsaKeyPair<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 公钥加密私钥解密</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testEncryptByPublicKeyDecryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> publicKeyText<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;冰墩墩（英文：Bing Dwen Dwen，汉语拼音：bīng dūn dūn），是2022年北京冬季奥运会的吉祥物。将熊猫形象与富有超能量的冰晶外壳相结合，头部外壳造型取自冰雪运动头盔，装饰彩色光环，整体形象酷似航天员。&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> encryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">encryptByPublicKeyToBase64</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> decryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">decryptBase64TextByPrivateKey</span><span class="token punctuation">(</span>encryptedMessage<span class="token punctuation">,</span> privateKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后报文：&quot;</span> <span class="token operator">+</span> decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 私钥加密公钥解密</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testEncryptByPrivateKeyDecryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> publicKeyText<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;雪容融（Shuey Rhon Rhon），是2022年北京冬季残奥会的吉祥物，其以灯笼为原型进行设计创作，主色调为红色，头顶有如意环与外围的剪纸图案，面部带有不规则形状的雪块，身体可以向外散发光芒。&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> encryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">encryptByPrivateKeyToBase64</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> privateKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> decryptedMessage <span class="token operator">=</span> <span class="token class-name">RSAUtil</span><span class="token punctuation">.</span><span class="token function">decryptBase64TextByPublicKey</span><span class="token punctuation">(</span>encryptedMessage<span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后报文：&quot;</span> <span class="token operator">+</span> decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>解密后报文：冰墩墩（英文：Bing Dwen Dwen，汉语拼音：bīng dūn dūn），是2022年北京冬季奥运会的吉祥物。将熊猫形象与富有超能量的冰晶外壳相结合，头部外壳造型取自冰雪运动头盔，装饰彩色光环，整体形象酷似航天员。
解密后报文：雪容融（Shuey Rhon Rhon），是2022年北京冬季残奥会的吉祥物，其以灯笼为原型进行设计创作，主色调为红色，头顶有如意环与外围的剪纸图案，面部带有不规则形状的雪块，身体可以向外散发光芒。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">ink<span class="token punctuation">.</span>laoli</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">BadPaddingException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">IllegalBlockSizeException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">NoSuchPaddingException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">InvalidKeySpecException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">PKCS8EncodedKeySpec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">X509EncodedKeySpec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RSAUtil</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Encoder</span> <span class="token class-name">Base64Encoder</span> <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Decoder</span> <span class="token class-name">Base64Decoder</span> <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 加密算法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY_ALGORITHM</span> <span class="token operator">=</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 密钥长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token comment">// 单次加密的最大明文长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span> <span class="token operator">=</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token punctuation">;</span>

    <span class="token comment">// 单次解密的最大密文长度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_DECRYPT_BLOCK</span> <span class="token operator">=</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token constant">KEY_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> publicKey <span class="token operator">=</span> <span class="token class-name">KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPublicKey</span><span class="token punctuation">(</span>publicKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token class-name">KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPrivateKey</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token constant">MAX_DECRYPT_BLOCK</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token class-name">KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPrivateKey</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token constant">MAX_ENCRYPT_BLOCK</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> publicKey <span class="token operator">=</span> <span class="token class-name">KeyLoader</span><span class="token punctuation">.</span><span class="token function">loadPublicKey</span><span class="token punctuation">(</span>publicKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> <span class="token constant">MAX_DECRYPT_BLOCK</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptByPublicKeyToBase64</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Encoder</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decryptBase64TextByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> base64Data<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">,</span> privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptByPrivateKeyToBase64</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Encoder</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decryptBase64TextByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> base64Data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encryptByPublicKeyToBase64</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> publicKeyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64Encoder</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doCipher</span><span class="token punctuation">(</span><span class="token keyword">int</span> opmode<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> maxBlockSize<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchPaddingException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalBlockSizeException</span><span class="token punctuation">,</span> <span class="token class-name">BadPaddingException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>opmode<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> dataLength <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dataLength <span class="token operator">-</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> i <span class="token operator">*</span> maxBlockSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataLength <span class="token operator">-</span> offset <span class="token operator">&gt;</span> maxBlockSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> maxBlockSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> dataLength <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                result<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KeyLoader</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token constant">KEY_ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>keyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">Base64Decoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>keyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最近在做一个<code>C#</code>的项目，顺便给出部分实现：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Crypto</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Crypto<span class="token punctuation">.</span>Encodings</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Crypto<span class="token punctuation">.</span>Engines</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Security</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">InkLaoli</span>
<span class="token punctuation">{</span>
    <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">RSAUtil</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> KEY_SIZE <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> MAX_ENCRYPT_BLOCK <span class="token operator">=</span> KEY_SIZE <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> MAX_DECRYPT_BLOCK <span class="token operator">=</span> KEY_SIZE <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">EncryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> publicKeyText<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> publicKey <span class="token operator">=</span> PublicKeyFactory<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">DoCipher</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> MAX_ENCRYPT_BLOCK<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">EncryptByPublicKeyToBase64</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> publicKeyText<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span><span class="token function">EncryptByPublicKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> publicKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">DecryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> privateKeyText<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> privateKey <span class="token operator">=</span> PrivateKeyFactory<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">DoCipher</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> MAX_DECRYPT_BLOCK<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">DecryptBase64TextByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> privateKeyText<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token function">DecryptByPrivateKey</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">DoCipher</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> forEncryption<span class="token punctuation">,</span> <span class="token class-name">ICipherParameters</span> parameters<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> maxBlockSize<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> data<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pkcs1Encoding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RsaEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cipher<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>forEncryption<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> dataLength <span class="token operator">=</span> data<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dataLength <span class="token operator">-</span> offset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> i <span class="token operator">*</span> maxBlockSize<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataLength <span class="token operator">-</span> offset <span class="token operator">&gt;</span> maxBlockSize<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">ProcessBlock</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> maxBlockSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        cache <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">ProcessBlock</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> dataLength <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    result<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cache<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,80),k=n("code",null,"C#",-1),r={href:"https://www.bouncycastle.org/csharp/",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"（完）",-1);function v(m,y){const a=t("ExternalLinkIcon");return e(),c("div",null,[u,n("p",null,[k,s("的实现中使用了第三方库"),n("a",r,[s("BouncyCastle"),o(a)]),s("，如需了解详情请自行查看文档。")]),d])}const g=p(i,[["render",v],["__file","手摸手带你打造至强RSA工具类.html.vue"]]);export{g as default};
