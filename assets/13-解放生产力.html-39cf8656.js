import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as d,b as s,e as a,w as o,d as n,a as p}from"./app-819cf889.js";const u="/assets/boot1-30e79b0e.jpg",r="/assets/boot2-de359253.jpg",k={},v=p('<p>在上一篇文章中，老李已经教大家将控制权从<code>汇编语言</code>转移到<code>C 语言</code>，但是我们的活动范围依然受限于<code>512</code>字节的引导扇区。今天老李就带领大家突破这<code>512</code>字节的限制，真正的<strong>解放生产力</strong>。</p><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><p>如果你一路跟着老李走过来，那么这些前置知识你应该已经掌握了。忘记也没关系，回过头再去看看就 ok 了。</p>',3),b=p(`<p>单刀直入，直接看第一个示例。</p><h2 id="读取硬盘数据" tabindex="-1"><a class="header-anchor" href="#读取硬盘数据" aria-hidden="true">#</a> 读取硬盘数据</h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><p>我们会构造一个<code>1KB</code>大小的<code>磁盘映像文件</code>，第一个<code>扇区</code>，即前<code>512</code>字节，保存我们的引导扇区程序，第二个<code>扇区</code>，即后<code>512</code>字节，保存一个文本文件。通过引导扇区的程序将第二个扇区的文本文件打印在显示器上。</p><p>大体上来说完成这个目标需要两个步骤。第一步，将数据从磁盘读取到内存；第二步，将数据打印到显示器上。显然，第一步需要进行磁盘的 I/O 操作，第二步则相对简单。</p><h3 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tree <span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
├── boot.S
├── main.c
├── Makefile
├── message.data
├── mmu.h
├── types.h
└── x86.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),m=s("code",null,"boot.S",-1),h=s("code",null,"mmu.h",-1),f={href:"https://github.com/kviccn/asm-boooom/tree/master/0x0D",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>先来看<code>types.h</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__TYPES_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TYPES_H_</span></span>

<span class="token keyword">typedef</span> __signed <span class="token keyword">char</span> <span class="token class-name">int8_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token class-name">uint8_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">short</span> <span class="token class-name">int16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token class-name">uint16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token class-name">int32_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">uint32_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token class-name">int64_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token class-name">uint64_t</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们定义了一些<code>类型</code>，可以让我们少打几个字。</p><p><code>x86.h</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;types.h&quot;</span></span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">uint8_t</span>
<span class="token function">inb</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> port<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">uint8_t</span> data<span class="token punctuation">;</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">&quot;inb %1,%0&quot;</span>
               <span class="token operator">:</span> <span class="token string">&quot;=a&quot;</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
               <span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span>
<span class="token function">outb</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> port<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">&quot;outb %0,%1&quot;</span>
               <span class="token operator">:</span>
               <span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span>
<span class="token function">insl</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">&quot;cld; rep insl&quot;</span>
               <span class="token operator">:</span> <span class="token string">&quot;=D&quot;</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;=c&quot;</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>
               <span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>
               <span class="token operator">:</span> <span class="token string">&quot;memory&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用<code>内联汇编</code>定义了三个<code>函数</code>，这三个函数使用<code>static</code>、<code>inline</code>修饰。<code>static</code>保证函数只在声明它的文件中可见，避免和其他相同名称的函数冲突。<code>inline</code>告诉编译器尽可能将函数内联到调用它的地方，这样可以减少函数调用次数，提高效率，但这不是必然。</p><p><code>inb</code>函数内联了<code>inb</code>指令，用于从指定端口读取<code>1字节</code>数据。</p><p><code>outb</code>函数内联了<code>outb</code>指令，用于向指定端口写入<code>1字节</code>数据。</p><p><code>insl</code>函数内联了<code>cld; rep insl</code>指令，<code>cld</code>用于清除方向标志，使<code>偏移量</code>向正方向移动，这个<code>偏移量</code>其实就是传入的<code>addr</code>，会被关联到<code>edi</code>，反汇编的结果中可以看到，请大家自己实验。<code>rep</code>前缀用于重复执行<code>insl</code>，重复的次数由<code>ecx</code>决定，即传入的参数<code>cnt</code>。最终数据会被连续读取到<code>addr</code>指向的内存处。</p><p><code>main.c</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;x86.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">readsect</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">bootmain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">readsect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xb8000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span><span class="token number">0x1F7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x40</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">readsect</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> offset<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F3</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F4</span><span class="token punctuation">,</span> offset <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F5</span><span class="token punctuation">,</span> offset <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F6</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0xE0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F7</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">insl</span><span class="token punctuation">(</span><span class="token number">0x1F0</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> <span class="token number">512</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第<code>3</code>行声明函数<code>readsect</code>，用于从磁盘读取一个扇区。参数<code>dst</code>指定目的内存位置，参数<code>offset</code>指定要读取的扇区的偏移量。我们将使用<code>LBA</code>模式访问磁盘，该模式从<code>0</code>开始编号数据块，第一个区块<code>LBA=0</code>，第二个区块<code>LBA=1</code>，以此类推。</p><p>第<code>7</code>行调用<code>readsect</code>，将偏移量为<code>1</code>的扇区，即第二个扇区的数据读取到内存<code>0xb8000</code>处。因为我们将向该扇区写入<code>ASCII</code>编码的文本，所以可以直接将数据读取到显存对应的内存处，以直接打印文本。</p><p>第<code>13~17</code>行定义函数<code>waitdisk</code>，采用<code>忙等</code>的方式等待磁盘准备好进行数据传输。端口<code>1F7</code>既是命令端口，又是状态端口。作为状态端口时，每一位含义如下：</p><ul><li>第<code>7</code>位 控制器忙碌</li><li>第<code>6</code>位 磁盘驱动器已准备好</li><li>第<code>5</code>位 写入错误</li><li>第<code>4</code>位 搜索完成</li><li>第<code>3</code>位 为<code>1</code>时扇区缓冲区没有准备好</li><li>第<code>2</code>位 是否正确读取磁盘数据</li><li>第<code>1</code>位 磁盘每转一周将此位设为<code>1</code></li><li>第<code>0</code>位 之前的命令因发生错误而结束</li></ul><p><code>inb(0x1F7)</code>从端口<code>0x1F7</code>读取出状态，与<code>0xC0</code>做<code>&amp;</code>运算，只保留<code>高两位</code>，即第<code>7</code>位和第<code>6</code>位，如果不等于<code>0x40</code>（控制器不忙且已准备好交互），则继续等待、测试。</p><p>第<code>19~33</code>行定义函数<code>readsect</code>。</p><p>第<code>21</code>行，函数首先调用<code>waitdisk</code>以确保磁盘准备好交互。</p><p>第<code>23</code>行，向端口<code>0x1F2</code>写入<code>1</code>，指定读取的扇区数量为<code>1</code>。</p><p>第<code>24~27</code>行，向端口<code>0x1F3、0x1F4、0x1F5、0x1F6</code>写入<code>28</code>位的逻辑扇区编号，其中端口<code>0x1F6</code>的<code>高四位</code>写入<code>0xE</code>，表示以<code>LBA</code>模式访问<code>主硬盘</code>。</p><p>第<code>28</code>行，端口<code>0x1F7</code>做为命令端口，向其写入<code>0x20</code>表示请求读硬盘。</p><p>第<code>30</code>行，继续等待硬盘准备好数据。</p><p>第<code>32</code>行，调用函数<code>insl</code>从端口<code>0x1F0</code>读取数据到<code>dst</code>，<code>0x1F0</code>是数据端口。读取的次数是<code>512 / 4</code>，因为一个扇区包含<code>512</code>个字节，而<code>insl</code>指令一次可以读取<code>4</code>个字节。</p><p><code>message.data</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>H
e
l
l
o

l
a
o
l
i
!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个字符换一行，因为换行符的<code>ASCII</code>码为<code>0a</code>，正好等于<code>浅绿色</code>的字符显示属性，所以我们可以直接将其与字符一起读入显存对应的内存处，做为字符的显示属性。既可以说是偷懒，也可以说是个小技巧。因为我们的目的是演示如何使用 C 语言读写磁盘。<code>message.data</code>的底层内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ xxd <span class="token parameter variable">-a</span> message.data
00000000: 480a 650a 6c0a 6c0a 6f0a 200a 6c0a 610a  H.e.l.l.o. .l.a.
00000010: 6f0a 6c0a 690a 210a                      o.l.i.<span class="token operator">!</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译链接" tabindex="-1"><a class="header-anchor" href="#编译链接" aria-hidden="true">#</a> 编译链接</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> boot.o boot.S
$ cc <span class="token parameter variable">-m32</span> -fno-builtin -fno-pic <span class="token parameter variable">-nostdinc</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> main.o main.c
$ ld <span class="token parameter variable">-N</span> <span class="token parameter variable">-e</span> start <span class="token parameter variable">-Ttext</span><span class="token operator">=</span>0x7c00 <span class="token parameter variable">-m</span> elf_i386 <span class="token parameter variable">-o</span> boot.elf boot.o main.o
$ objcopy <span class="token parameter variable">-S</span> <span class="token parameter variable">-O</span> binary <span class="token parameter variable">-j</span> .text boot.elf boot.bin
$ <span class="token function">cp</span> boot.bin boot
$ ./sign boot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="制作磁盘映像" tabindex="-1"><a class="header-anchor" href="#制作磁盘映像" aria-hidden="true">#</a> 制作磁盘映像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">512</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">2</span>
$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>boot <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">conv</span><span class="token operator">=</span>notrunc
$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>message.data <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">seek</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">conv</span><span class="token operator">=</span>notrunc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-i386 <span class="token parameter variable">-drive</span> <span class="token assign-left variable">file</span><span class="token operator">=</span>boot.img,format<span class="token operator">=</span>raw <span class="token parameter variable">-monitor</span> stdio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如下:</p><figure><img src="`+u+`" alt="boot1.jpg" tabindex="0" loading="lazy"><figcaption>boot1.jpg</figcaption></figure><p>可以看到从<code>!</code>到<code>e</code>中间的部分是黑掉的。因为我们没有那么多数据，但是<code>readsect</code>还是会读取<code>512</code>个字节，而剩下的字节都是<code>0</code>。</p><h2 id="加载-内核" tabindex="-1"><a class="header-anchor" href="#加载-内核" aria-hidden="true">#</a> 加载“内核”</h2><p>其实我们上一个栗子的代码已经相当于一个<code>操作系统</code>的<code>bootloader</code>了。我们从磁盘读取了一段数据并显示在屏幕上，如果我们读取一段程序并执行它呢？这可不就是一个<code>bootloader</code>加载<code>内核</code>的过程吗。你品，你细品。</p><p>接下来老李就带大家撸一个<code>Hello world 内核</code>加载到内存并运行起来。</p><h3 id="目录结构-1" tabindex="-1"><a class="header-anchor" href="#目录结构-1" aria-hidden="true">#</a> 目录结构</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tree <span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
├── boot.S
├── kernel.c
├── main.c
├── Makefile
├── mmu.h
├── types.h
└── x86.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),x=s("code",null,"main.c",-1),y=s("code",null,"kernel.c",-1),_={href:"https://github.com/kviccn/asm-boooom/tree/master/0x0E",target:"_blank",rel:"noopener noreferrer"},w=p(`<p><code>main.c</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;x86.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">readsect</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">bootmain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">readsect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x10000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span><span class="token number">0x1F7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x40</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">readsect</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> offset<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F3</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F4</span><span class="token punctuation">,</span> offset <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F5</span><span class="token punctuation">,</span> offset <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F6</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0xE0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F7</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">insl</span><span class="token punctuation">(</span><span class="token number">0x1F0</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> <span class="token number">512</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同处在第<code>7、9</code>行。</p><p>第<code>7</code>行，这次我们将数据读取到了内存<code>0x10000</code>处。</p><p>第<code>9</code>行，通过强制类型转换，将<code>0x10000</code>处开始的内容转换成了一个函数并调用，函数的类型是<code>void (*)(void)</code>。如果像下面这样写可能会好理解一点：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>kernel.c</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;types.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">uint16_t</span> <span class="token operator">*</span>video_buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xb8000</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    video_buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>video_buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  video_buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0700</span> <span class="token operator">|</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">;</span>
  video_buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0700</span> <span class="token operator">|</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
  video_buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0700</span> <span class="token operator">|</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">;</span>
  video_buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0700</span> <span class="token operator">|</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">;</span>
  video_buffer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0700</span> <span class="token operator">|</span> <span class="token char">&#39;i&#39;</span><span class="token punctuation">;</span>
  video_buffer<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0700</span> <span class="token operator">|</span> <span class="token char">&#39;!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常规操作，清屏，打印字符，大家应该已经轻车熟路了。</p><h3 id="编译链接-1" tabindex="-1"><a class="header-anchor" href="#编译链接-1" aria-hidden="true">#</a> 编译链接</h3><h4 id="制作-bootloader" tabindex="-1"><a class="header-anchor" href="#制作-bootloader" aria-hidden="true">#</a> 制作 bootloader</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> boot.o boot.S
$ cc <span class="token parameter variable">-m32</span> -fno-builtin -fno-pic <span class="token parameter variable">-nostdinc</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> main.o main.c
$ ld <span class="token parameter variable">-N</span> <span class="token parameter variable">-e</span> start <span class="token parameter variable">-Ttext</span><span class="token operator">=</span>0x7c00 <span class="token parameter variable">-m</span> elf_i386 <span class="token parameter variable">-o</span> boot.elf boot.o main.o
$ objcopy <span class="token parameter variable">-S</span> <span class="token parameter variable">-O</span> binary <span class="token parameter variable">-j</span> .text boot.elf boot.bin
$ <span class="token function">cp</span> boot.bin boot
$ ./sign boot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="制作-kernel" tabindex="-1"><a class="header-anchor" href="#制作-kernel" aria-hidden="true">#</a> 制作 kernel</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cc <span class="token parameter variable">-m32</span> -fno-builtin -fno-pic <span class="token parameter variable">-nostdinc</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> kernel.o kernel.c
$ objcopy <span class="token parameter variable">-S</span> <span class="token parameter variable">-O</span> binary <span class="token parameter variable">-j</span> .text kernel.o kernel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="制作磁盘映像-1" tabindex="-1"><a class="header-anchor" href="#制作磁盘映像-1" aria-hidden="true">#</a> 制作磁盘映像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">512</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">2</span>
$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>boot <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">conv</span><span class="token operator">=</span>notrunc
$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>kernel <span class="token assign-left variable">of</span><span class="token operator">=</span>boot.img <span class="token assign-left variable">seek</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">conv</span><span class="token operator">=</span>notrunc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行-1" tabindex="-1"><a class="header-anchor" href="#运行-1" aria-hidden="true">#</a> 运行</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-i386 <span class="token parameter variable">-drive</span> <span class="token assign-left variable">file</span><span class="token operator">=</span>boot.img,format<span class="token operator">=</span>raw <span class="token parameter variable">-monitor</span> stdio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如下:</p><figure><img src="`+r+'" alt="boot2.jpg" tabindex="0" loading="lazy"><figcaption>boot2.jpg</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>先来说一下上面所谓的“内核”潜在的一些问题。我们只是简单的从磁盘读取了<code>512</code>字节的数据，事实上真正的“内核”的大小是变化的，可能小于<code>512</code>字节，但更多的可能是大于<code>512</code>字节。所以我们需要将“内核”的大小写在某个地方，让<code>bootloader</code>知道应该读取多少扇区。</p><p>再来说一下写<code>汇编语言</code>这个系列的初衷，是为了开发操作系统做一些准备工作。如果只是学习操作系统的理论知识那完全可以不学习汇编语言，但如果想开发一个操作系统，那汇编语言的知识就是必不可少的。因为不可避免的要和硬件打交道，不论是<code>x86</code>、<code>arm</code>还是其它的体系结构。</p>',23),E=s("code",null,"汇编语言",-1),q=s("code",null,"保护模式",-1),F=s("code",null,"操作系统",-1),A={href:"https://pdos.csail.mit.edu/6.828/2018/index.html",target:"_blank",rel:"noopener noreferrer"},B=s("p",null,"（完）",-1);function $(C,S){const e=c("RouterLink"),t=c("ExternalLinkIcon");return l(),d("div",null,[v,s("ul",null,[s("li",null,[a(e,{to:"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/05-IO%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF.html"},{default:o(()=>[n("I/O 接口技术")]),_:1})]),s("li",null,[a(e,{to:"/series/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%80%E5%8F%91%E5%85%A5%E9%AD%82/06-%E7%A1%AC%E7%9B%98%E6%93%8D%E4%BD%9C.html"},{default:o(()=>[n("硬盘操作")]),_:1})]),s("li",null,[a(e,{to:"/posts/C%E8%AF%AD%E8%A8%80%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96.html"},{default:o(()=>[n("内联汇编")]),_:1})])]),b,s("p",null,[n("其中"),m,n("、"),h,n("内容与前一篇文章相同，不再重复介绍。完整的代码戳"),s("a",f,[n("这里"),a(t)]),n("。")]),g,s("p",null,[n("还是挑有变化的来讲，除了"),x,n("和"),y,n("，其他内容都与之前相同。完整的代码戳"),s("a",_,[n("这里"),a(t)]),n("。")]),w,s("p",null,[n("到目前为止，"),E,n("的基础知识已经讲的差不多了，"),q,n("的概念也介绍了一些，还有很多没有介绍，剩下的部分我打算结合"),F,n("讲解，想继续学习的小伙伴们请移步到"),a(e,{to:"/series/%E8%80%81%E6%9D%8E%E6%95%99%E4%BD%A0%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{default:o(()=>[n("这里")]),_:1}),n("。")]),s("p",null,[n("参考"),s("a",A,[n("MIT 6.828: Operating System Engineering"),a(t)]),n("。")]),B])}const I=i(k,[["render",$],["__file","13-解放生产力.html.vue"]]);export{I as default};
