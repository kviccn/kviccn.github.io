import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as o,b as s,d as n,e,a as t}from"./app-9978a549.js";const c={},u=s("p",null,"Gradle 是一个基于任务依赖的构建工具。每个构建过程被拆分成一个个任务，任务之间构成一个任务依赖图，Gradle 根据任务依赖图决定某次构建需要执行哪些任务。",-1),r=s("h2",{id:"安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),n(" 安装")],-1),d={href:"https://docs.gradle.org/current/userguide/installation.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="前置条件" tabindex="-1"><a class="header-anchor" href="#前置条件" aria-hidden="true">#</a> 前置条件</h3><p>确认已安装好 <code>JDK</code> 环境：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-version</span>
<span class="token function">java</span> version <span class="token string">&quot;1.8.0_361&quot;</span>
Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_361-b09<span class="token punctuation">)</span>
Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.361</span>-b09, mixed mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装-gradle" tabindex="-1"><a class="header-anchor" href="#安装-gradle" aria-hidden="true">#</a> 安装 Gradle</h3>`,4),v={href:"https://scoop.sh/",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ scoop <span class="token function">install</span> gradle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="确认安装结果" tabindex="-1"><a class="header-anchor" href="#确认安装结果" aria-hidden="true">#</a> 确认安装结果</h3><p>控制台输出如下结果即表明安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-version</span>

------------------------------------------------------------
Gradle <span class="token number">8.1</span>.1
------------------------------------------------------------

Build time:   <span class="token number">2023</span>-04-21 <span class="token number">12</span>:31:26 UTC
Revision:     1cf537a851c635c364a4214885f8b9798051175b

Kotlin:       <span class="token number">1.8</span>.10
Groovy:       <span class="token number">3.0</span>.15
Ant:          Apache Ant<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> version <span class="token number">1.10</span>.11 compiled on July <span class="token number">10</span> <span class="token number">2021</span>
JVM:          <span class="token number">1.8</span>.0_341 <span class="token punctuation">(</span>Oracle Corporation <span class="token number">25.341</span>-b10<span class="token punctuation">)</span>
OS:           Windows <span class="token number">10</span> <span class="token number">10.0</span> amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建脚本" tabindex="-1"><a class="header-anchor" href="#构建脚本" aria-hidden="true">#</a> 构建脚本</h2><p>Gradle 目前支持两种格式的构建脚本，分别基于 Groovy 和 Kotlin，对应的脚本文件名称为 <code>build.gradle</code> 和 <code>build.gradle.kts</code>。以基于 Kotlin 的脚本为例，当 <code>gradle</code> 命令启动时， <code>gradle</code> 会在当前目录下查找 <code>build.gradle.kts</code> 文件。尽管这个文件被称作 <em>构建脚本</em>，但严格意义上来说，它应该叫做 <em>构建配置脚本</em>，这个构建脚本定义了一个项目（project）和它的任务。</p><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello world</h3><p>下面我们创建一个任务并执行它。创建一个空目录并在其中新建构建脚本 <code>build.gradle.kts</code>，内容如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello world!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行进入该目录并运行 <code>gradle -q hello</code>，输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> hello
Hello world<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-q</code> 参数会抑制 Gradle 的日志信息，只输入任务输出的内容，保持输出信息简洁。</p><p>上述构建脚本中定义了一个名叫 <code>hello</code> 的任务，并且在任务中加入了一个动作（action）。当运行 <code>gradle hello</code> 时，Gradle 会执行 <code>hello</code> 任务并执行你提供的 action， action 就是一个可执行的代码块。</p><h3 id="构建脚本即代码" tabindex="-1"><a class="header-anchor" href="#构建脚本即代码" aria-hidden="true">#</a> 构建脚本即代码</h3><p>在 Gradle 构建脚本中，你可以使用 Groovy 或 Kotlin 的全部能力。下面我们看一个例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;upper&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token keyword">val</span> someString <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;mY_nAmE&quot;</span></span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Original: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">someString</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Upper case: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">someString<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> upper
Original: mY_nAmE  
Upper case: MY_NAME
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;count&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> count
<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务依赖" tabindex="-1"><a class="header-anchor" href="#任务依赖" aria-hidden="true">#</a> 任务依赖</h3><p>你可以在任务中声明它们的依赖关系。</p><p>依赖于另一个任务的任务：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello world!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;intro&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m Gradle&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$  gradle <span class="token parameter variable">-q</span> intro
Hello world<span class="token operator">!</span>
I&#39;m Gradle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="灵活的任务注册" tabindex="-1"><a class="header-anchor" href="#灵活的任务注册" aria-hidden="true">#</a> 灵活的任务注册</h3><p>Groovy 和 Kotlin 强大的能力然你不只可以定义任务的功能。例如，还可以使用循环定义一组相同类型的任务。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> counter <span class="token operator">-&gt;</span>
    tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;task</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        doLast <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m task number </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> task1
I&#39;m task number <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作已存在的任务" tabindex="-1"><a class="header-anchor" href="#操作已存在的任务" aria-hidden="true">#</a> 操作已存在的任务</h3><p>任务在注册之后可以使用一个 API 来访问。例如，可以在运行时动态的向任务添加依赖。</p><p>使用 API 访问任务并且添加依赖的例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> counter <span class="token operator">-&gt;</span>
    tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;task</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        doLast <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m task number </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;task0&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;task2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;task3&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> task0
I<span class="token string">&#39;m task number 2
I&#39;</span>m task number <span class="token number">3</span>
I&#39;m task number <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以向已存在的任务添加行为：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello Earth&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doFirst <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello Venus&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello Mars&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello Jupiter&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> hello
Hello Venus
Hello Earth
Hello Mars
Hello Jupiter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>doFirst</code> 和 <code>doLast</code> 可以多次执行。它们会向任务的动作列表（actions list）的起始或结尾添加一个动作。当任务执行时，动作列表中的动作将按顺序执行。</p><h3 id="默认任务" tabindex="-1"><a class="header-anchor" href="#默认任务" aria-hidden="true">#</a> 默认任务</h3><p>Gradle 允许你定义一个或多个默认任务，如果未指定任务时将会执行默认任务。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">defaultTasks</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;clean&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;run&quot;</span></span><span class="token punctuation">)</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;clean&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Default Cleaning!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;run&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Default Running!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;other&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m not a default task!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span>
Default Cleaning<span class="token operator">!</span>
Default Running<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这等价于执行 <code>gradle clean run</code>。在多项目构建中每个子项目都可以有自己的默认任务。如果子任务未指定默认任务，则其会使用父项目的默认任务（如果父项目定义了默认任务的话）。</p><h3 id="构建脚本的外部依赖" tabindex="-1"><a class="header-anchor" href="#构建脚本的外部依赖" aria-hidden="true">#</a> 构建脚本的外部依赖</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>建议不要直接操作脚本类路径，而是使用自带类路径的插件。对于自定义构建逻辑，建议使用自定义插件。</p></div><p>如果要在构建脚本中使用外部库，你可以通过构建脚本自身将它们添加到脚本的类路径中。通过使用 <code>buildscript()</code> 方法并且向其传递一个声明构建脚本类路径的代码块来实现。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>buildscript <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
 
    dependencies <span class="token punctuation">{</span>
        <span class="token string-literal singleline"><span class="token string">&quot;classpath&quot;</span></span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;commons-codec&quot;</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;commons-codec&quot;</span></span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.2&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过向类路径（classpath）配置中添加依赖项来声明构建脚本的类路径。这与声明 Java 编译时类路径的方式相同。除了项目（project）依赖项，你可以使用任何依赖项类型。</p><p>在声明构建脚本的类路径之后就可以在构建脚本中使用类路径中的类了。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>Base64

buildscript <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    dependencies <span class="token punctuation">{</span>
        <span class="token string-literal singleline"><span class="token string">&quot;classpath&quot;</span></span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;commons-codec&quot;</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;commons-codec&quot;</span></span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.2&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;encode&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token keyword">val</span> encodedString <span class="token operator">=</span> <span class="token function">Base64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello world\\n&quot;</span></span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> encode
aGVsbG8gd29ybGQK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于多项目构建，在项目的 <code>buildscript()</code> 方法中声明的依赖项同样可用于其子项目。</p>`,60);function b(g,h){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,r,s("p",null,[n("Gradle 可以在 Linux, macOS 和 Windows 上运行，官方的安装指南"),s("a",d,[n("戳这里"),e(a)]),n("，本文以 Windows 为例讲解安装过程。")]),k,s("p",null,[n("Windows 下推荐使用包管理工具 "),s("a",v,[n("Scoop"),e(a)]),n(" 进行安装。执行如下命令即可：")]),m])}const x=i(c,[["render",b],["__file","Gradle快速入门.html.vue"]]);export{x as default};
