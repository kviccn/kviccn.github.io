import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as o,b as s,d as n,e as t,a as e}from"./app-0c3433bd.js";const c={},u=e(`<p>Gradle 目前支持两种格式的构建脚本，分别基于 Groovy 和 Kotlin，对应的脚本文件名称为 <code>build.gradle</code> 和 <code>build.gradle.kts</code>。以基于 Kotlin 的脚本为例，当 <code>gradle</code> 命令启动时， <code>gradle</code> 会在当前目录下查找 <code>build.gradle.kts</code> 文件。尽管这个文件被称作 <em>构建脚本</em>，但严格意义上来说，它应该叫做 <em>构建配置脚本</em>，这个构建脚本定义了一个项目（project）和它的任务。</p><h2 id="基础内容" tabindex="-1"><a class="header-anchor" href="#基础内容" aria-hidden="true">#</a> 基础内容</h2><h3 id="项目-插件和任务" tabindex="-1"><a class="header-anchor" href="#项目-插件和任务" aria-hidden="true">#</a> 项目，插件和任务</h3><p>每个 Gradle 构建都由一个或多个项目组成。项目代表什么取决于你用 Gradle 做什么。例如，项目可能代表一个 JAR 库或一个 web 应用程序。它可能表示从其他项目生成的 jar 中组装的发行版 ZIP。 项目不一定代表要构建的东西。它可能表示要做的事情，例如将应用程序部署到 staging 环境或生产环境。如果目前还不是很明白的话也不需要担心。Gradle 的按约定构建为项目添加了更具体的定义。</p><p>Gradle 在项目中可以做的工作是由一个或多个任务定义的。任务表示构建执行的一些原子工作。可能是编译一些类、创建 JAR、生成 Javadoc 或将一些 archive 发布到仓库。</p><p>通常，任务是通过应用插件提供的，因此你不必自己定义它们。尽管如此，为了让你对任务有一个概念，我们将在本文定义一些简单的任务。</p><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello world</h3><p>下面我们创建一个任务并执行它。创建一个空目录并在其中新建构建脚本 <code>build.gradle.kts</code>，内容如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello world!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行进入该目录并运行 <code>gradle -q hello</code>，输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> hello
Hello world<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-q</code> 参数会抑制 Gradle 的日志信息，只输入任务输出的内容，保持输出信息简洁。</p><p>上述构建脚本中定义了一个名叫 <code>hello</code> 的任务，并且在任务中加入了一个动作（action）。当运行 <code>gradle hello</code> 时，Gradle 会执行 <code>hello</code> 任务并执行你提供的 action， action 就是一个可执行的代码块。</p><h3 id="构建脚本即代码" tabindex="-1"><a class="header-anchor" href="#构建脚本即代码" aria-hidden="true">#</a> 构建脚本即代码</h3><p>在 Gradle 构建脚本中，你可以使用 Groovy 或 Kotlin 的全部能力。下面我们看一个例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;upper&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token keyword">val</span> someString <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;mY_nAmE&quot;</span></span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Original: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">someString</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Upper case: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">someString<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> upper
Original: mY_nAmE  
Upper case: MY_NAME
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;count&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> count
<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务依赖" tabindex="-1"><a class="header-anchor" href="#任务依赖" aria-hidden="true">#</a> 任务依赖</h3><p>你可以在任务中声明它们的依赖关系。</p><p>依赖于另一个任务的任务：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello world!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;intro&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m Gradle&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$  gradle <span class="token parameter variable">-q</span> intro
Hello world<span class="token operator">!</span>
I&#39;m Gradle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="灵活的任务注册" tabindex="-1"><a class="header-anchor" href="#灵活的任务注册" aria-hidden="true">#</a> 灵活的任务注册</h3><p>Groovy 和 Kotlin 强大的能力让你不只可以定义任务的功能。例如，还可以使用循环定义一组相同类型的任务。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> counter <span class="token operator">-&gt;</span>
    tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;task</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        doLast <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m task number </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> task1
I&#39;m task number <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作已存在的任务" tabindex="-1"><a class="header-anchor" href="#操作已存在的任务" aria-hidden="true">#</a> 操作已存在的任务</h3><p>任务在注册之后可以使用 <code>named</code> API 来访问。例如，可以在运行时动态的向任务添加依赖。</p><p>使用 <code>named</code> API 访问任务并且添加依赖的例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> counter <span class="token operator">-&gt;</span>
    tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;task</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        doLast <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m task number </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;task0&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;task2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;task3&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> task0
I<span class="token string">&#39;m task number 2
I&#39;</span>m task number <span class="token number">3</span>
I&#39;m task number <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以向已存在的任务添加行为：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello Earth&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doFirst <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello Venus&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello Mars&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello Jupiter&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> hello
Hello Venus
Hello Earth
Hello Mars
Hello Jupiter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>doFirst</code> 和 <code>doLast</code> 可以多次执行。它们会向任务的动作列表（actions list）的起始或结尾添加一个动作。当任务执行时，动作列表中的动作将按顺序执行。</p><h3 id="默认任务" tabindex="-1"><a class="header-anchor" href="#默认任务" aria-hidden="true">#</a> 默认任务</h3><p>Gradle 允许你定义一个或多个默认任务，如果未指定任务时将会执行默认任务。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">defaultTasks</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;clean&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;run&quot;</span></span><span class="token punctuation">)</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;clean&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Default Cleaning!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;run&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Default Running!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;other&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m not a default task!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span>
Default Cleaning<span class="token operator">!</span>
Default Running<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这等价于执行 <code>gradle clean run</code>。在多项目构建中每个子项目都可以有自己的默认任务。如果子任务未指定默认任务，则其会使用父项目的默认任务（如果父项目定义了默认任务的话）。</p><h3 id="构建脚本的外部依赖" tabindex="-1"><a class="header-anchor" href="#构建脚本的外部依赖" aria-hidden="true">#</a> 构建脚本的外部依赖</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>建议不要直接操作脚本类路径，而是使用自带类路径的插件。对于自定义构建逻辑，建议使用自定义插件。</p></div><p>如果要在构建脚本中使用外部库，你可以通过构建脚本自身将它们添加到脚本的类路径中。通过使用 <code>buildscript()</code> 方法并且向其传递一个声明构建脚本类路径的代码块来实现。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>buildscript <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
 
    dependencies <span class="token punctuation">{</span>
        <span class="token string-literal singleline"><span class="token string">&quot;classpath&quot;</span></span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;commons-codec&quot;</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;commons-codec&quot;</span></span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.2&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过向类路径（classpath）配置中添加依赖项来声明构建脚本的类路径。这与声明 Java 编译时类路径的方式相同。除了项目（project）依赖项，你可以使用任何依赖项类型。</p><p>在声明构建脚本的类路径之后就可以在构建脚本中使用类路径中的类了。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>Base64

buildscript <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    dependencies <span class="token punctuation">{</span>
        <span class="token string-literal singleline"><span class="token string">&quot;classpath&quot;</span></span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;commons-codec&quot;</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;commons-codec&quot;</span></span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.2&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;encode&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token keyword">val</span> encodedString <span class="token operator">=</span> <span class="token function">Base64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello world\\n&quot;</span></span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> encode
aGVsbG8gd29ybGQK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于多项目构建，在项目的 <code>buildscript()</code> 方法中声明的依赖项同样可用于其子项目。</p><h2 id="更多内容" tabindex="-1"><a class="header-anchor" href="#更多内容" aria-hidden="true">#</a> 更多内容</h2><p>使用构建脚本配置项目。每个 Gradle 项目对应一个需要构建的软件组件，比如一个库或一个应用程序。每个构建脚本都与一个 <code>Project</code> 类型的对象相关联。当构建脚本执行时，它会配置这个 <code>Project</code>。</p><div class="hint-container tip"><p class="hint-container-title">构建脚本，设置脚本和初始化脚本</p><p>构建脚本 <code>build.gradle.kts</code> 用于定义 <code>Project</code> 对象</p><p>设置脚本 <code>settings.gradle.kts</code> 用于定义 <code>Settings</code> 对象</p><p>初始化脚本 <code>init.gradle.kts</code> 用于定义 <code>Gradle</code> 对象</p></div><h3 id="属性-properties" tabindex="-1"><a class="header-anchor" href="#属性-properties" aria-hidden="true">#</a> 属性（Properties）</h3><p>构建脚本中的许多顶级属性都是 <code>Project</code> API 的一部分。下面的构建脚本使用 <code>Project.name</code> 属性来打印项目的名字：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// build.gradle.kts</span>
<span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>project<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> check
project-api
project-api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两条 <code>println</code> 语句打印出了相同的属性。第一个使用对 <code>Project</code> 对象的 <code>name</code> 属性的顶级引用。另一条语句使用了任何构建脚本都可用的 <code>project</code> 属性，该属性返回关联的 <code>project</code> 对象。</p><h4 id="项目的标准属性" tabindex="-1"><a class="header-anchor" href="#项目的标准属性" aria-hidden="true">#</a> 项目的标准属性</h4><p><code>Project</code> 对象在构建脚本中暴露了一组标准属性。下表列出了一些常用的属性：</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">project</td><td style="text-align:left;">Project</td><td style="text-align:left;">Project 实例</td></tr><tr><td style="text-align:left;">name</td><td style="text-align:left;">String</td><td style="text-align:left;">项目目录名称</td></tr><tr><td style="text-align:left;">path</td><td style="text-align:left;">String</td><td style="text-align:left;">项目绝对路径</td></tr><tr><td style="text-align:left;">description</td><td style="text-align:left;">String</td><td style="text-align:left;">项目描述</td></tr><tr><td style="text-align:left;">projectDir</td><td style="text-align:left;">File</td><td style="text-align:left;">包含构建脚本的目录</td></tr><tr><td style="text-align:left;">buildDir</td><td style="text-align:left;">File</td><td style="text-align:left;"><em>projectDir</em>/build</td></tr><tr><td style="text-align:left;">group</td><td style="text-align:left;">Object</td><td style="text-align:left;">未指明</td></tr><tr><td style="text-align:left;">version</td><td style="text-align:left;">Object</td><td style="text-align:left;">未指明</td></tr><tr><td style="text-align:left;">ant</td><td style="text-align:left;">AntBuilder</td><td style="text-align:left;">AntBuilder 实例</td></tr></tbody></table><h3 id="script-api" tabindex="-1"><a class="header-anchor" href="#script-api" aria-hidden="true">#</a> Script API</h3>`,72),r=s("code",null,".gradle",-1),d={href:"https://docs.gradle.org/current/dsl/org.gradle.api.Script.html",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"Script",-1),v=s("code",null,".gradle.kts",-1),g={href:"https://gradle.github.io/kotlin-dsl-docs/api/org.gradle.kotlin.dsl/-kotlin-build-script/index.html",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"KotlinBuildScript",-1),b=e(`<h3 id="声明变量" tabindex="-1"><a class="header-anchor" href="#声明变量" aria-hidden="true">#</a> 声明变量</h3><p>构建脚本可以声明两种变量：局部变量（local variables）和额外属性（extra properties）。</p><h4 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h4><p>用 <code>val</code> 关键字声明局部变量。局部变量只在声明它们的作用域中可见。它们是底层 Kotlin 语言的一个特性。</p><p>例：声明局部变量</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// build.gradle.kts</span>
<span class="token keyword">val</span> dest <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;dest&quot;</span></span>

tasks<span class="token punctuation">.</span>register<span class="token operator">&lt;</span>Copy<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;copy&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;source&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">into</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="额外属性" tabindex="-1"><a class="header-anchor" href="#额外属性" aria-hidden="true">#</a> 额外属性</h4><p>Gradle 的所有增强对象，包括 projects、tasks 和 source sets，都可以包含用户定义的属性。</p><p>通过所属对象的 <code>extra</code> 属性添加，访问和获取额外属性。另外，你也可以通过使用 <code>by extra</code> 来访问 Kotlin 委托属性。</p><p>例：使用额外属性</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// build.gradle.kts</span>
plugins <span class="token punctuation">{</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;java-library&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">val</span> springVersion <span class="token keyword">by</span> <span class="token function">extra</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;3.1.0.RELEASE&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> emailNotification <span class="token keyword">by</span> extra <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;build@master.org&quot;</span></span> <span class="token punctuation">}</span>

sourceSets<span class="token punctuation">.</span><span class="token function">all</span> <span class="token punctuation">{</span> extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;purpose&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>

sourceSets <span class="token punctuation">{</span>
    main <span class="token punctuation">{</span>
        extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;purpose&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;production&quot;</span></span>
    <span class="token punctuation">}</span>

    test <span class="token punctuation">{</span>
        extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;purpose&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token function">create</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;plugin&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;purpose&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;production&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;printProperties&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> springVersion <span class="token operator">=</span> springVersion
    <span class="token keyword">val</span> emailNotification <span class="token operator">=</span> emailNotification
    <span class="token keyword">val</span> productionSourceSets <span class="token operator">=</span> provider <span class="token punctuation">{</span>
        sourceSets<span class="token punctuation">.</span><span class="token function">matching</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;purpose&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;production&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    doLast <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>springVersion<span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>emailNotification<span class="token punctuation">)</span>
        productionSourceSets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> printProperties
<span class="token number">3.1</span>.0.RELEASE
build@master.org
main
plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本例通过 <code>by extra</code> 向项目对象添加两个额外属性。此外，本例通过将 <code>extra[&quot;purpose&quot;]</code> 设置为 <code>null</code>，向每个 source set 添加了一个名为 <code>purpose</code> 的属性。添加后，你可以通过 <code>extra</code> 读取和设置所有这些属性。</p><p>Gradle 需要特殊的语法来添加属性，这样它就可以快速失败。例如，这允许 Gradle 在脚本试图设置一个不存在的属性时识别出来。你可以在任何可以访问其所属对象的地方访问额外的属性。这使得额外属性的作用域比局部变量更广。子项目可以访问父项目上的额外属性。</p>`,14);function h(q,f){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("当 Gradle 执行 Groovy 构建脚本 ("),r,n(") 时，它将脚本编译成一个实现 "),s("a",d,[n("Script"),t(a)]),n(" 的类。因此，构建脚本可以访问 "),k,n(" 接口声明的所有属性和方法。")]),s("p",null,[n("当 Gradle 执行 Kotlin 构建脚本("),v,n(")时，它会将该脚本编译为 "),s("a",g,[n("KotlinBuildScript"),t(a)]),n(" 的子类。因此，构建脚本可以访问 "),m,n(" 类型声明的所有可见属性和函数。")]),b])}const _=i(c,[["render",h],["__file","Gradle构建脚本编写.html.vue"]]);export{_ as default};
