import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as i,b as s,d as e,e as l,a}from"./app-819cf889.js";const t="/assets/segment_descriptor-70de6ac0.png",p="/assets/s1_type-804a8d65.jpg",r="/assets/s0_type-8112d16b.jpg",v="/assets/gdtr-e86e585d.png",u="/assets/cr0-c6b0a725.png",b="/assets/descriptor_cache-35d66521.jpg",m="/assets/segment_selector-7c7ed9e6.jpg",f="/assets/boot-3cf0a50b.jpg",g={},k=a('<p>保护模式实际上很简单，只是概念比较多。今天老李就带领大家进入保护模式，然后在实操中逐一攻克每个概念。</p><h2 id="进入保护模式" tabindex="-1"><a class="header-anchor" href="#进入保护模式" aria-hidden="true">#</a> 进入保护模式</h2><p>进入保护模式总共分三步。</p><ul><li>第一步，打开<code>A20</code>地址线。</li><li>第二步，加载<code>GDT</code>。</li><li>第三步，将处理器切换到<code>保护模式</code>。</li></ul><p>下面我们就来详细讲解一下这三个步骤。</p><h3 id="a20-地址线" tabindex="-1"><a class="header-anchor" href="#a20-地址线" aria-hidden="true">#</a> A20 地址线</h3><p>众所周知，<code>8086</code>处理器有<code>20</code>根地址线，可访问的最大内存地址是<code>0xfffff</code>，即<code>1MB</code>。<code>32</code>位处理器具有<code>32</code>根地址线，可访问的最大内存地址是<code>0xffffffff</code>，即<code>4GB</code>。在<code>32</code>位处理器刚面世的时候并没有太多针对<code>32</code>位处理器开发的软件，更多的是为<code>8086</code>开发的软件，计算机制造商为了能够兼容这些软件，便想出了一个办法，在计算机启动后将第<code>21</code>根地址线，即<code>A20</code>，置为<code>0</code>。这样，当地址超过<code>0xfffff</code>后，由于第<code>21</code>根地址线为<code>0</code>，所以地址又会绕回到<code>0x00000</code>开始。从外表上看就好像是一个<code>16</code>位的处理器。</p>',7),x=s("code",null,"A20",-1),_=s("code",null,"32",-1),h=s("code",null,"A20",-1),D={href:"https://wiki.osdev.org/A20_Line",target:"_blank",rel:"noopener noreferrer"},T=s("code",null,"Fast A20 Gate",-1),G=s("code",null,"0x92",-1),P=s("code",null,"A20",-1),E=a('<div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>inb $0x92, %al    # 读出原数据\norb $0x2, %al     # 将第`2`位置为`1`\noutb %al, $0x92   # 写入数据\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就打开了<code>A20</code>。</p><h3 id="gdt-global-descriptor-table" tabindex="-1"><a class="header-anchor" href="#gdt-global-descriptor-table" aria-hidden="true">#</a> GDT (Global Descriptor Table)</h3><p><code>GDT</code>即全局描述符表，<code>GDT</code>中的项被称为<strong>段描述符 (Segment Descriptor)</strong>。段描述符用于描述内存段，描述符中包含内存段的基地址、段界限和用于访问检测、数据保护的信息，每一个段描述符占据<code>8</code>个字节，每一个字节的图解如下：</p><figure><img src="'+t+'" alt="segment_descriptor" tabindex="0" loading="lazy"><figcaption>segment_descriptor</figcaption></figure><p>可以看到 <strong>基地址(base)</strong> 和 <strong>段界限(limit)</strong> 是分散存放的，这是由历史原因造成的。其中基地址共占据<code>32</code>位，即基地址可以起始于<code>4GB</code>内存空间的任何位置，但更好的做法还是选取那些<code>16</code>字节对齐的地址，这样寻址效率更高；段界限共有<code>20</code>位，取值范围为<code>0~0xfffff</code>，用于限制段的扩展范围，这需要和图中所示的<code>G</code>位，即<strong>粒度位</strong>结合起来使用。<code>G</code>位为<code>0</code>时，段界限以字节为单位，段的扩展范围为<code>1B~1MB</code>。<code>G</code>位为<code>1</code>时，段界限以<code>4KB</code>为单位的，段的扩展范围为<code>4KB~4GB</code>。下面解释一下其余位的含义：</p><ul><li><p><code>D/B</code> 位表示默认的操作数大小或默认的堆栈指针大小。为<code>0</code>时表示指令中的偏移地址或者操作数是<code>16</code>位的，相应的指令指针寄存器取<code>ip</code>，堆栈指针寄存器取<code>sp</code>；为<code>1</code>时表示指令中的偏移地址或者操作数是<code>32</code>位的，相应的指令指针寄存器取<code>eip</code>，堆栈指针寄存器取<code>esp</code>。</p></li><li><p><code>L</code> 位是<code>64</code>位代码段标志，我们目前用不到，置<code>0</code>即可。</p></li><li><p><code>AVL</code> 位是留给开发者使用的，置位还是清除就看你的兴趣了。</p></li><li><p><code>P</code> 位即存在位，用于指示描述符所对应的段是否在内存中。当访问不存在的内存段时会触发中断，我们可以在中断处理程序中将不存在的内存段从磁盘中置换到内存中。</p></li><li><p><code>DPL (Descriptor Privilege Level)</code> 用于表示描述符的特权级，占两位，可以表示<code>0，1，2，3</code>四种特权级。<code>0</code>级最高，<code>3</code>级最低。</p></li><li><p><code>S</code> 位表示描述符类型。为<code>1</code>时表示代码段或数据段，为<code>0</code>时表示系统段。</p></li><li><p><code>TYPE</code> 占据四位。其含义根据<code>S</code>位的不同可以分为如下两大类：</p></li></ul><p>当<code>S</code>位置位时，即<code>S</code>位为<code>1</code>时，描述符表示代码段或数据段，<code>TYPE</code>的具体含义如下表：</p><figure><img src="'+p+'" alt="s1_type" tabindex="0" loading="lazy"><figcaption>s1_type</figcaption></figure><p>当<code>S</code>位清除时，即<code>S</code>位为<code>0</code>时，描述符表示系统段，<code>TYPE</code>的具体含义如下表：</p><figure><img src="'+r+'" alt="s0_type" tabindex="0" loading="lazy"><figcaption>s0_type</figcaption></figure><p>表格内容比较多，但是我们现在需要用到的并不多，以后遇到了再逐一讲解。</p><p>至此，每一个描述符的含意我们就清楚了。把所有的描述符放在一起就构成了一个描述符表，如果用一个结构<code>(struct)</code>表示一个描述符的话那么很明显，描述符表就是一个结构数组。</p><p>每一个描述符需要占据<code>8</code>个字节，显然我们不可能把描述符表全部保存在寄存器中，因为没有那么多的寄存器空间。所以全局描述符表是被放在内存中的，处理器中有一个<code>48</code>位的，专用于保存全局描述符表信息的寄存器 —— <strong>全局描述符表寄存器(GDTR)</strong>。其中低<code>16</code>位<code>(0~15)</code>表示<code>GDT</code>的边界，其值为表的长度减一，从<code>0</code>开始计，高<code>32</code>位<code>(16~47)</code>存放<code>GDT</code>在内存中的基地址。图示如下：</p><figure><img src="'+v+`" alt="GDTR" tabindex="0" loading="lazy"><figcaption>GDTR</figcaption></figure><p>一旦准备好了<code>GDT</code>，就可以通过<code>lgdt</code>指令将其描述信息加载到<code>GDTR</code>中，指令格式如下：</p><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>lgdt gdtdesc  # gdtdesc 是全局描述符表信息在内存中的地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="将处理器切换到保护模式" tabindex="-1"><a class="header-anchor" href="#将处理器切换到保护模式" aria-hidden="true">#</a> 将处理器切换到保护模式</h3><p>将处理器从实模式切换到保护模式非常的简单，只须将控制寄存器<code>cr0</code>的<code>PE</code>位置位即可。<code>cr0</code>寄存器每一位的含义如下：</p><figure><img src="`+u+`" alt="cr0" tabindex="0" loading="lazy"><figcaption>cr0</figcaption></figure><p>当处理器刚加电时，<code>PE</code>位，即保护模式允许位<code>(Protection Enable)</code>默认为<code>0</code>，表示处理器运行在实模式下，处理器的寻址，计算都按照实模式来。一旦<code>PE</code>位置为<code>1</code>，则处理器立刻切换到保护模式执行。这也意味着，我们必须在将处理器运行模式切换到保护模式之前设置好<code>全局描述符表</code>并开启<code>A20</code>。设置<code>PE</code>位的代码如下：</p><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>movl %cr0, %eax
orl $0x1, %eax
movl %eax, %cr0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了上面的理论知识，下面我们开始实战。</p><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>.set PROT_MODE_CSEG, 0x08        # code segment selector
.set PROT_MODE_DSEG, 0x10        # data segment selector

.globl start
start:
  .code16
  cli

  # Enable A20
  inb $0x92, %al
  orb $0x2, %al
  outb %al, $0x92

  # Load GDT
  lgdt gdtdesc

  # Switch from real to protected mode
  movl %cr0, %eax
  orl $0x1, %eax
  movl %eax, %cr0

  # Jump into 32-bit protected mode
  ljmp $PROT_MODE_CSEG, $protcseg

  .code32
protcseg:
  movw $PROT_MODE_DSEG, %ax
  movw %ax, %ds

  movb $&#39;L&#39;, 0
  movb $0x0a,1

  movb $&#39;a&#39;, 2
  movb $0x0a,3

  movb $&#39;o&#39;, 4
  movb $0x0a,5

  movb $&#39;l&#39;, 6
  movb $0x0a,7

  movb $&#39;i&#39;, 8
  movb $0x0a,9

hlt

.p2align 2
gdt:
  .quad 0x0
  .quad 0x00cf98000000ffff
  .quad 0x0040920b8000ffff

gdtdesc:
  .word gdtdesc - gdt - 1
  .long gdt

.org 510
.word 0xAA55
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h3><p>前两行分别定义了两个符号，值分别为<code>0x08</code>，<code>0x10</code>。这个很好理解，但是注释里的话是什么意思？什么是段选择子<code>(segment selector)</code>？这个我们稍后解释。</p><p>第<code>4</code>行定义了一个全局可见的符号<code>start</code>，<code>start</code>做为一个标号定义在第<code>5</code>行，这是代码的起始位置。</p><p>第<code>6</code>行用伪指令<code>.code16</code>告诉汇编器下面的代码按照<code>16</code>位的格式汇编。</p><p>第<code>7</code>行<code>cli</code>指令用于关闭中断，因为我们还没有设置如何处理保护模式下的中断。</p><p>第<code>10~12</code>行 开启<code>A20</code>。</p><p>第<code>15</code>行 加载<code>GDT</code>。看到第<code>53~55</code>行，<code>gdtdesc</code>定义在这里，其中低<code>16</code>位是<code>GDT</code>的长度减一，高<code>32</code>位是<code>GDT</code>的基地址。</p><p>第<code>18~20</code>行 从实模式切换到保护模式。</p><p>第<code>23</code>行 使用<code>ljmp</code>长跳转指令跳转到保护模式代码段中，偏移量为<code>protcseg</code>的位置，即跳转到第<code>26</code>行处继续执行。这是<code>intel</code>的要求，因为<code>ljmp</code>指令可以使处理器清空流水线和指令预读取队列。这里我们碰到了第一行定义的符号<code>PROT_MODE_CSEG</code>，其值为<code>0x08</code>。现在我们来解释一下它的含义。</p><p>实模式下，段寄存器<code>cs、ds、es、ss</code>中保存的是<code>16</code>位的段基地址。保护模式下，段寄存器中保存的就不是段基地址了，而是<strong>段选择子</strong>，并且每个段寄存器还包含了一个<code>64</code>位的不可见部分，被称为<strong>描述符高速缓存器</strong>，如下图：</p><figure><img src="`+b+'" alt="descriptor_cache" tabindex="0" loading="lazy"><figcaption>descriptor_cache</figcaption></figure><p><strong>描述符高速缓存器</strong>中保存的就是我们在描述符表中定义的段的信息，而<strong>段选择子</strong>就是用于在描述符表中定位描述符的。段选择子也是<code>16</code>位的，其格式如下：</p><figure><img src="'+m+`" alt="segment_selector.jpg" tabindex="0" loading="lazy"><figcaption>segment_selector.jpg</figcaption></figure><p>这<code>16</code>位的信息分为三部分，第<code>0、1</code>位是<code>RPL（请求特权级）</code>，表示给出当前选择子的程序的特权级别，用于处理器固件校验权限。第<code>2</code>位是<code>TI</code>位，用于标识所需要的段描述符在<code>GDT</code>还是<code>LDT</code>中，<code>GDT</code>我们之前介绍过，<code>LDT</code>是<strong>局部描述符表</strong>，和<code>GDT</code>类似。当<code>TI</code>位为<code>0</code>时表示在<code>GDT</code>中取描述符，为<code>1</code>时表示在<code>LDT</code>中取描述符。第<code>3~15</code>位时<strong>索引</strong>，如果把描述符表看作一个数组的话，这里的索引就相当于数组的下标。因为每个描述符占<code>8</code>个字节，所以处理器拿到索引后先将其乘以<code>8</code>，在以得到的结果为偏移量到描述符表中获取相应的描述符。</p><p>以<code>PROT_MODE_CSEG</code>为例，其值为<code>0x08</code>，对应二进制<code>0000000000001_0_00</code>，根据上面的知识就很好理解了。<code>RPL</code>为<code>0</code>，表示最高特权级；<code>TI</code>为<code>0</code>，表示请求的描述符在<code>GDT</code>中；<code>Index</code>为<code>1</code>，<code>1 * 8 = 8</code>，表示该描述符相对于描述符表的基地址偏移量为<code>8</code>，即描述符表中的第二个描述符。为什么不用第一个描述符呢？这是因为<code>Intel</code>规定，全局描述符表中的第一个描述符必须为<strong>空描述符</strong>，即<code>8</code>个字节全为<code>0</code>，所以我们能使用的描述符只能从第二个开始了。我们将段选择子<code>0x08</code>指向的描述符表示的段做为代码段，其定义在第<code>50</code>行，如下：</p><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>.quad 0x00cf98000000ffff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了简单，在这里我们直接写入了<code>64</code>位的数据。将这<code>64</code>位的数据按照段描述符的格式拆解可得：</p><ul><li><code>Base 31_24: 00</code></li><li><code>G: 1</code></li><li><code>D/B: 1</code></li><li><code>L: 0</code></li><li><code>AVL: 0</code></li><li><code>Limit 19_16: f</code></li><li><code>P: 1</code></li><li><code>DPL: 0</code></li><li><code>S: 1</code></li><li><code>TYPE: 8</code></li><li><code>Base 23_16: 00</code></li><li><code>Base 15_00: 0000</code></li><li><code>Limit 15_00: ffff</code></li></ul><p>整理可得：</p><ul><li><code>Base: 0x00000000</code></li><li><code>Limit: 0xfffff</code></li><li><code>G: 1</code> 段界限粒度为<code>4KB</code></li><li><code>D/B: 1</code> <code>32</code>位操作数</li><li><code>L: 0</code></li><li><code>AVL: 0</code></li><li><code>P: 1</code> 对应的段在内存中</li><li><code>DPL: 0</code> 特权级为<code>0</code></li><li><code>S: 1</code> 描述符为代码段或数据段</li><li><code>TYPE: 8</code> 只执行代码段</li></ul><p>其中段界限为<code>0xfffff</code>，粒度为<code>4KB</code>，段界限与粒度相乘可得上限为<code>4GB</code>。基地址为<code>0x0</code>，所以这个描述符表示的范围是全部的<code>4GB</code>内存空间。</p><p>第<code>25</code>行，伪指令<code>.code32</code>告诉汇编器，之后的指令都按照<code>32</code>位格式编译。</p><p>第<code>27、28</code>行，我们将数据段设置为选择子<code>PROT_MODE_DSEG</code>，值为<code>0x10</code>，对应的描述符定义在第<code>51</code>行，如下：</p><div class="language-asm line-numbers-mode" data-ext="asm"><pre class="language-asm"><code>.quad 0x0040920b8000ffff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>拆解可得：</p><ul><li><code>Base: 0x000b8000</code></li><li><code>Limit: 0x0ffff</code></li><li><code>G: 0</code> 段界限粒度为<code>1B</code></li><li><code>D/B: 1</code> <code>32</code>位操作数</li><li><code>L: 0</code></li><li><code>AVL: 0</code></li><li><code>P: 1</code> 对应的段在内存中</li><li><code>DPL: 0</code> 特权级为<code>0</code></li><li><code>S: 1</code> 描述符为代码段或数据段</li><li><code>TYPE: 2</code> 可读可写数据段</li></ul><p>基地址<code>0xb8000</code>对应显存的起始地址，段界限<code>0xffff * 1 = 0xffff</code>，即<code>64KB</code>。</p><p>第<code>30~43</code>行，向数据段，即显存对应的内存段写入数据以显示字符。</p><p>第<code>45</code>行，<code>hlt</code>使处理器暂停。</p><p>第<code>47</code>行，伪指令<code>.p2align 2</code>强制<code>4</code>字节对齐。</p><p>第<code>49</code>行，处理器规定的空描述符。</p><h3 id="编译、链接" tabindex="-1"><a class="header-anchor" href="#编译、链接" aria-hidden="true">#</a> 编译、链接</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ as <span class="token parameter variable">--32</span> boot.s <span class="token parameter variable">-o</span> boot.o
$ ld <span class="token parameter variable">-e</span> start <span class="token parameter variable">-Ttext</span><span class="token operator">=</span>0x7c00 <span class="token parameter variable">-m</span> elf_i386 <span class="token parameter variable">--oformat</span> binary boot.o <span class="token parameter variable">-o</span> boot.bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们使用了链接器<code>ld</code>而不是<code>objcopy</code>制作最终的启动文件。其参数含义如下：</p><ul><li><code>-e</code> 指定程序入口点为<code>start</code>，这是我们在代码里导出的符号</li><li><code>-T</code> 指定代码段<code>(text)</code>的地址为<code>0x7c00</code></li><li><code>-m</code> 指定生成<code>i386</code>格式的指令</li><li><code>--oformat binary</code> 指定生成纯二进制的文件</li></ul><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ qemu-system-i386 <span class="token parameter variable">-drive</span> <span class="token assign-left variable">file</span><span class="token operator">=</span>boot.bin,format<span class="token operator">=</span>raw <span class="token parameter variable">-monitor</span> stdio
QEMU <span class="token number">2.11</span>.1 monitor - <span class="token builtin class-name">type</span> <span class="token string">&#39;help&#39;</span> <span class="token keyword">for</span> <span class="token function">more</span> information
<span class="token punctuation">(</span>qemu<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在启动虚拟机的同时将<code>Qemu</code>的<code>monitor</code>关联到了<code>stdio</code>，也就是控制台。此时运行情况如下：</p><figure><img src="`+f+`" alt="boot.jpg" tabindex="0" loading="lazy"><figcaption>boot.jpg</figcaption></figure><p>我们在<code>monitor</code>中输入<code>info registers</code>查看寄存器状态。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>qemu<span class="token punctuation">)</span> info registers
<span class="token assign-left variable">EAX</span><span class="token operator">=</span>00000010 <span class="token assign-left variable">EBX</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">ECX</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">EDX</span><span class="token operator">=</span>00000080
<span class="token assign-left variable">ESI</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">EDI</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">EBP</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">ESP</span><span class="token operator">=</span>00006f04
<span class="token assign-left variable">EIP</span><span class="token operator">=</span>00007c68 <span class="token assign-left variable">EFL</span><span class="token operator">=</span>00000006 <span class="token punctuation">[</span>-----P-<span class="token punctuation">]</span> <span class="token assign-left variable">CPL</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">II</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">A20</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SMM</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">HLT</span><span class="token operator">=</span><span class="token number">1</span>
ES <span class="token operator">=</span>0000 00000000 0000ffff 00009300 <span class="token assign-left variable">DPL</span><span class="token operator">=</span><span class="token number">0</span> DS16 <span class="token punctuation">[</span>-WA<span class="token punctuation">]</span>
CS <span class="token operator">=</span>0008 00000000 ffffffff 00cf9800 <span class="token assign-left variable">DPL</span><span class="token operator">=</span><span class="token number">0</span> CS32 <span class="token punctuation">[</span>---<span class="token punctuation">]</span>
SS <span class="token operator">=</span>0000 00000000 0000ffff 00009300 <span class="token assign-left variable">DPL</span><span class="token operator">=</span><span class="token number">0</span> DS16 <span class="token punctuation">[</span>-WA<span class="token punctuation">]</span>
DS <span class="token operator">=</span>0010 000b8000 0000ffff 00409300 <span class="token assign-left variable">DPL</span><span class="token operator">=</span><span class="token number">0</span> DS   <span class="token punctuation">[</span>-WA<span class="token punctuation">]</span>
FS <span class="token operator">=</span>0000 00000000 0000ffff 00009300 <span class="token assign-left variable">DPL</span><span class="token operator">=</span><span class="token number">0</span> DS16 <span class="token punctuation">[</span>-WA<span class="token punctuation">]</span>
GS <span class="token operator">=</span>0000 00000000 0000ffff 00009300 <span class="token assign-left variable">DPL</span><span class="token operator">=</span><span class="token number">0</span> DS16 <span class="token punctuation">[</span>-WA<span class="token punctuation">]</span>
<span class="token assign-left variable">LDT</span><span class="token operator">=</span>0000 00000000 0000ffff 00008200 <span class="token assign-left variable">DPL</span><span class="token operator">=</span><span class="token number">0</span> LDT
TR <span class="token operator">=</span>0000 00000000 0000ffff 00008b00 <span class="token assign-left variable">DPL</span><span class="token operator">=</span><span class="token number">0</span> TSS32-busy
<span class="token assign-left variable">GDT</span><span class="token operator">=</span>     00007c68 00000017
<span class="token assign-left variable">IDT</span><span class="token operator">=</span>     00000000 000003ff
<span class="token assign-left variable">CR0</span><span class="token operator">=</span>00000011 <span class="token assign-left variable">CR2</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">CR3</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">CR4</span><span class="token operator">=</span>00000000
<span class="token assign-left variable">DR0</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">DR1</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">DR2</span><span class="token operator">=</span>00000000 <span class="token assign-left variable">DR3</span><span class="token operator">=</span>00000000
<span class="token assign-left variable">DR6</span><span class="token operator">=</span>ffff0ff0 <span class="token assign-left variable">DR7</span><span class="token operator">=</span>00000400
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察第<code>6</code>行，<code>cs</code>的值为<code>0x08</code>，段基址为<code>0</code>，上限为<code>0xffffffff</code>，属性为<code>0xcf98</code>，与我们设置的一致。</p><p>第<code>8</code>行，<code>ds</code>的值为<code>0x10</code>，段基址为<code>0xb8000</code>，上限为<code>0xffff</code>，属性为<code>0x4093</code>，与我们设置的有点出入，我们设置的是<code>0x4092</code>，其中<code>2</code>表示可读可写数据段，查表可知<code>3</code>表示已访问过的可读可写数据段。这说明当我们访问这个段时处理器已经将其标记为<strong>已访问</strong>。</p><p>一切水到渠成，简单三步进入保护模式。</p>`,70);function L(S,B){const o=c("ExternalLinkIcon");return d(),i("div",null,[k,s("p",null,[e("现在，我们要做的就是打开"),x,e("，让处理器可以使用全部的"),_,e("根地址线。打开"),h,e("的方法有很"),s("a",D,[e("多种"),l(o)]),e("，这里我们介绍一种被称为"),T,e("的方法，通过读写"),G,e("端口控制"),P,e("的开关。代码如下：")]),E])}const $=n(g,[["render",L],["__file","10-进入保护模式.html.vue"]]);export{$ as default};
