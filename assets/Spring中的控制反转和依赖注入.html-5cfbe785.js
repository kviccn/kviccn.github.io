import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,b as n,d as a,e,a as t}from"./app-a3b1dd03.js";const l={},d=n("p",null,"说明：控制反转和依赖注入是很简单的两个概念，如果你看了很多文章还没有搞明白那说明写那些文章的人也是个半吊子。",-1),r=n("h2",{id:"概览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概览","aria-hidden":"true"},"#"),a(" 概览")],-1),u=n("p",null,"今天简单说一下 IoC (Inversion of Control) 和 DI (Dependency Injection)的概念，同时看看其在 Spring framework 中的实现。",-1),k=n("h2",{id:"啥是控制反转",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#啥是控制反转","aria-hidden":"true"},"#"),a(" 啥是控制反转")],-1),v=n("code",null,"控制反转",-1),m=n("code",null,"IoC",-1),b=n("code",null,"依赖注入",-1),h={href:"https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"看懂没？控制反转是设计原则，依赖注入是实现方式。",-1),w=n("p",null,"那到底是什么东西的控制被反转了？本来是谁控制的？反转到哪里去了？",-1),_={href:"https://martinfowler.com/",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"依赖对象的获得被反转了",-1),f=t(`<p>举个例子，Class A 中用到了 Class B 的对象 b，一般情况下，需要在 A 的代码中显式地用 new 创建 B 的对象，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Item</span> item<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用依赖注入技术之后，A 的代码只需要定义一个 private 的 B 对象，不需要直接 new 来获得这个对象，而是通过相关的容器控制程序来将 B 对象在外部 new 出来并注入到 A 类里的引用中，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Item</span> item<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此例中<code>Store</code>依赖<code>Item</code>，常规做法是在<code>Store</code>的实现中显示的<code>new</code>了一个<code>Item</code>对象，使用<code>IoC</code>后，我们没有手动<code>new Item</code>，这里通过构造器注入的方式，<code>IoC</code>容器在创建<code>Store</code>对象的时候会自动把<code>Item</code>通过构造器注入进去。</p><p>要获得<code>依赖对象</code>的话之前需要自己手动<code>new</code>，现在这个过程反转了，由<code>IoC</code>容器或框架负责<code>依赖对象</code>的创建并注入给我们。</p><p>依赖注入有如下实现方式：</p><ul><li>基于接口。实现特定接口以供外部容器注入所依赖类型的对象。</li><li>基于 set 方法。实现特定属性的 public set 方法，来让外部容器调用传入所依赖类型的对象。</li><li>基于构造函数。实现特定参数的构造函数，在新建对象时传入所依赖类型的对象。</li><li>基于注解。基于 Java 的注解功能，在私有变量前加<code>@Autowired</code>等注解，不需要显式的定义以上三种代码，便可以让外部容器传入对应的对象。<code>该方案相当于定义了 public 的 set 方法，但是因为没有真正的 set 方法，从而不会为了实现依赖注入导致暴露了不该暴露的接口</code>（因为 set 方法只想让容器访问来注入而并不希望其他依赖此类的对象访问）。</li></ul><h2 id="spring-ioc-container" tabindex="-1"><a class="header-anchor" href="#spring-ioc-container" aria-hidden="true">#</a> Spring IoC Container</h2><p>IoC 容器是实现 IoC 的框架的共同特征。</p><p>在 Spring 框架中，接口 <code>ApplicationContext</code> 表示 IoC 容器。Spring 容器负责实例化、配置和组装被称为 bean 的对象，以及管理它们的生命周期。</p><p>Spring 提供了多种 <code>ApplicationContext</code> 接口的实现，有 <code>ClassPathXmlApplicationContext</code>、<code>FileSystemXmlApplicationContext</code>、<code>AnnotationConfigApplicationContext</code> 和 <code>WebApplicationContext</code>。</p><p>为了装配 beans，容器需要使用配置元数据(configuration metadata)，通过<code>XML</code>配置或<code>注解</code>形式提供。</p><p>手动实例化容器的方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要在上面的例子中设置 item 属性，我们可以使用元数据。然后容器将读取此元数据，并在运行时使用它来组装 bean。</p><p><strong>Spring 中的依赖项注入可以通过构造函数、setter 或字段来实现。</strong></p><h2 id="基于构造函数的依赖注入" tabindex="-1"><a class="header-anchor" href="#基于构造函数的依赖注入" aria-hidden="true">#</a> 基于构造函数的依赖注入</h2><p>在基于构造函数的依赖项注入中，容器将调用一个构造函数，每个参数表示我们想要设置的依赖项。</p><p>Spring 解析每一个参数时按类型、属性名和索引的顺序来消除歧义。让我们看看使用注解的 bean 及其依赖项的配置:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Item</span> <span class="token function">item1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ItemImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Store</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token function">item1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Configuration</code> 注解表明该类是 <code>bean 定义</code>的一个源，我们还可以将它添加到多个配置类中。</p><p>我们在方法上使用<code>@Bean</code>注解来定义 bean。如果我们不指定自定义名称，那么 bean 名称将默认为方法名称。</p><p>对于具有默认<code>单例作用域(singleton scope)</code>的 bean, Spring 首先检查该 bean 的缓存实例是否已经存在，如果不存在，则创建一个新实例。如果我们使用的是<code>原型作用域(prototype scope)</code>，容器会为每个方法调用返回一个新的 bean 实例。</p><h2 id="基于-setter-的依赖注入" tabindex="-1"><a class="header-anchor" href="#基于-setter-的依赖注入" aria-hidden="true">#</a> 基于 Setter 的依赖注入</h2><p>对于基于 setter 的依赖注入，容器将在调用无参构造器或无参静态工厂方法实例化 bean 后调用类的 setter 方法。配置如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Store</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Store</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    store<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token function">item1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> store<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于同一个 bean， 可以组合使用基于构造器的依赖注入和基于 setter 的依赖注入。Spring 文档建议对强制性依赖项使用基于构造器的注入，对可选依赖项使用基于 setter 的注入。</p><h2 id="基于字段的依赖注入" tabindex="-1"><a class="header-anchor" href="#基于字段的依赖注入" aria-hidden="true">#</a> 基于字段的依赖注入</h2><p>对于基于字段的依赖注入，我们可以通过使用<code>@Autowired</code>注解来注入依赖项。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Item</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构造 Store 对象时，如果没有构造函数或 setter 方法来注入 Item bean，容器将使用反射将 Item 注入 Store。</p><p>这种方法可能看起来更简单和干净，但我们不推荐使用它，因为它有一些缺点，如:</p><ul><li>此方法使用反射来注入依赖项，这比基于构造函数或基于 setter 的注入成本更高</li><li>使用这种方法很容易不断添加多个依赖项。如果我们使用构造函数注入，有多个参数会让我们知道类做了不止一件事，这可能违反单一责任原则</li></ul><h2 id="自动装配依赖关系" tabindex="-1"><a class="header-anchor" href="#自动装配依赖关系" aria-hidden="true">#</a> 自动装配依赖关系</h2>`,35),I={href:"https://www.baeldung.com/spring-annotations-resource-inject-autowire",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>使用 XML 配置自动装配 bean 有四种模式:</p><ul><li>no：默认 - 这意味着 bean 不使用自动装配，我们必须显式地命名依赖项</li><li>byName：自动装配是基于属性的名称完成的，因此 Spring 将寻找与需要设置的属性同名的 bean</li><li>byType：类似于 byName 自动装配，只是基于属性的类型。这意味着 Spring 将寻找与要设置的属性类型相同的 bean。如果该类型的 bean 不止一个，框架就会抛出异常</li><li>constructor：自动装配是基于构造函数参数完成的，这意味着 Spring 将寻找与构造函数参数类型相同的 bean</li></ul><p>示例，让我们将上面按类型定义的 <em>item1</em> bean 自动装配到 <em>store</em> bean 中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>autowire <span class="token operator">=</span> <span class="token class-name">Autowire</span><span class="token punctuation">.</span><span class="token constant">BY_TYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Item</span> item<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以使用<code>@Autowired</code>注解按类型自动装配来注入 bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Item</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有多个相同类型的 bean，我们可以使用<code>@Qualifier</code>注解按名称引用 bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;item1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Item</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="延迟初始化-beans" tabindex="-1"><a class="header-anchor" href="#延迟初始化-beans" aria-hidden="true">#</a> 延迟初始化 Beans</h2><p>默认情况下，容器在初始化期间创建和配置所有单例 bean。为了避免这种情况，我们可以使用<code>@Lazy</code>注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Lazy</span>
<span class="token keyword">public</span> <span class="token class-name">Store</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token function">item1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),j={href:"https://github.com/kviccn/ioc-and-di-in-spring",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"（完）",-1);function A(B,E){const s=p("ExternalLinkIcon");return c(),i("div",null,[d,r,u,k,n("p",null,[v,a("（英语：Inversion of Control，缩写为 "),m,a("），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做"),b,a("（Dependency Injection，简称 DI），还有一种方式叫“依赖查找”（Dependency Lookup）。see "),n("a",h,[a("wikipedia"),e(s)]),a("。")]),g,w,n("p",null,[n("a",_,[a("Martin Fowler"),e(s)]),a("给出的结论是"),y,a("。")]),f,n("p",null,[n("a",I,[a("装配"),e(s)]),a("允许 Spring 容器通过检查已定义的 bean 来自动解析协作 bean 之间的依赖关系。")]),S,n("p",null,[a("完整代码见 "),n("a",j,[a("ioc-and-di-in-spring"),e(s)])]),n("p",null,[a("参考："),n("a",x,[a("Intro to Inversion of Control and Dependency Injection with Spring"),e(s)])]),C])}const N=o(l,[["render",A],["__file","Spring中的控制反转和依赖注入.html.vue"]]);export{N as default};
